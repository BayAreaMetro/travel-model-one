<?xml version='1.0' encoding='utf-8' ?>

<workbook source-platform='win' version='8.3' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <!-- build 8200.14.0720.2105                                -->
  <preferences>
  </preferences>
  <datasources>
    <datasource caption='TravelCost Extract' inline='true' name='C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde' version='8.3'>
      <connection class='dataengine' dbname='C:\Users\lzorn\Documents\AcrossScenarios\TravelCost.tde' schema='Extract' tablename='Extract'>
        <relation name='Extract (Extract.Extract)' table='[Extract].[Extract]' type='table' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>SD</remote-name>
            <remote-type>4</remote-type>
            <local-name>[SD]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>SD</remote-alias>
            <ordinal>0</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>34</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>1.0</statistic>
              <statistic aggregation='Max' datatype='real'>34.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>COUNTY</remote-name>
            <remote-type>4</remote-type>
            <local-name>[COUNTY]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>COUNTY</remote-alias>
            <ordinal>1</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>9</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>1.0</statistic>
              <statistic aggregation='Max' datatype='real'>9.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>5</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>county_name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[county_name]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>county_name</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>9</approx-count>
            <scale>2</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='binary' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;Alameda&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;Sonoma&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>6</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;wstr&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>people</remote-name>
            <remote-type>4</remote-type>
            <local-name>[people]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>people</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>6</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>1.0</statistic>
              <statistic aggregation='Max' datatype='real'>6.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>4</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>incQ</remote-name>
            <remote-type>4</remote-type>
            <local-name>[incQ]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>incQ</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>4</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>1.0</statistic>
              <statistic aggregation='Max' datatype='real'>4.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>incQ_label</remote-name>
            <remote-type>130</remote-type>
            <local-name>[incQ_label]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>incQ_label</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>4</approx-count>
            <scale>2</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='binary' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;$30k to $60k&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;More than $100k&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;wstr&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>autos</remote-name>
            <remote-type>4</remote-type>
            <local-name>[autos]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>autos</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>5</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>0.0</statistic>
              <statistic aggregation='Max' datatype='real'>4.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>3</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>freq</remote-name>
            <remote-type>4</remote-type>
            <local-name>[freq]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>freq</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>2072</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>1.0</statistic>
              <statistic aggregation='Max' datatype='real'>20968.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>9</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_cost</remote-name>
            <remote-type>5</remote-type>
            <local-name>[total_cost]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>total_cost</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>11854</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>0.0</statistic>
              <statistic aggregation='Max' datatype='real'>8254.8989090714294</statistic>
            </statistics>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>trip_cost_indiv</remote-name>
            <remote-type>5</remote-type>
            <local-name>[trip_cost_indiv]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>trip_cost_indiv</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>11850</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>0.0</statistic>
              <statistic aggregation='Max' datatype='real'>6584.1111111111113</statistic>
            </statistics>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>trip_cost_joint</remote-name>
            <remote-type>5</remote-type>
            <local-name>[trip_cost_joint]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>trip_cost_joint</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>8454</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>0.0</statistic>
              <statistic aggregation='Max' datatype='real'>325.25</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>cost_fail</remote-name>
            <remote-type>4</remote-type>
            <local-name>[cost_fail]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>cost_fail</remote-alias>
            <ordinal>11</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>17</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>0.0</statistic>
              <statistic aggregation='Max' datatype='real'>16.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>7</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>pcost_indiv</remote-name>
            <remote-type>5</remote-type>
            <local-name>[pcost_indiv]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>pcost_indiv</remote-alias>
            <ordinal>12</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>9539</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>0.0</statistic>
              <statistic aggregation='Max' datatype='real'>6666.3139090714285</statistic>
            </statistics>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>pcost_joint</remote-name>
            <remote-type>5</remote-type>
            <local-name>[pcost_joint]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>pcost_joint</remote-alias>
            <ordinal>13</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>4404</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>0.0</statistic>
              <statistic aggregation='Max' datatype='real'>582.81512954545451</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>src</remote-name>
            <remote-type>130</remote-type>
            <local-name>[src]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>src</remote-alias>
            <ordinal>14</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>3</approx-count>
            <scale>2</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='binary' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;2010_04_ZZZ&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;2040_03_127&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>0</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;wstr&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[:Measure Names]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\TravelCost.tde].[pcdf:usr:Calculation_4070915162654650:qk:1]&quot;' value='Change in Average Household Out-of-Pocket Travel Cost' />
          <alias key='&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\TravelCost.tde].[sum:freq:qk]&quot;' value='Number of Households' />
          <alias key='&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\TravelCost.tde].[usr:Calculation_4070915162654650:qk]&quot;' value='Average out-of-pocket cost per Household' />
        </aliases>
      </column>
      <column aggregation='Sum' datatype='real' name='[COUNTY]' role='dimension' type='ordinal'>
      </column>
      <column caption='Average Out-of-Pocket Travel Cost' datatype='real' name='[Calculation_4070915162654650]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='0.01*sum([total_cost]*[freq])/sum([freq])' scope-isolation='false' />
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column aggregation='Sum' caption='Automobile Ownership Category' datatype='real' name='[autos]' role='dimension' type='ordinal'>
        <aliases>
          <alias key='0.0' value='Zero automobiles' />
          <alias key='1.0' value='One automobile' />
          <alias key='2.0' value='Two automobiles' />
          <alias key='3.0' value='Three automobiles' />
          <alias key='4.0' value='Four or more automobiles' />
        </aliases>
      </column>
      <column caption='County of Residence' datatype='string' name='[county_name]' role='dimension' semantic-role='[County].[Name]' type='nominal'>
      </column>
      <column datatype='real' name='[freq]' role='measure' type='quantitative'>
      </column>
      <column aggregation='Sum' datatype='real' name='[incQ]' role='dimension' type='ordinal'>
      </column>
      <column caption='Household Income Category' datatype='string' name='[incQ_label]' role='dimension' type='nominal'>
      </column>
      <column caption='Scenario' datatype='string' name='[src]' role='dimension' type='nominal'>
      </column>
      <column-instance column='[county_name]' derivation='None' name='[none:county_name:nk]' pivot='key' type='nominal' />
      <column-instance column='[src]' derivation='None' name='[none:src:nk]' pivot='key' type='nominal' />
      <column-instance column='[Calculation_4070915162654650]' derivation='User' name='[pcdf:usr:Calculation_4070915162654650:qk:1]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-field='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[none:src:nk]' ordering-type='Field' type='PctDiff'>
          <address>
            <value>-2</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[freq]' derivation='Sum' name='[sum:freq:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_4070915162654650]' derivation='User' name='[usr:Calculation_4070915162654650:qk]' pivot='key' type='quantitative' />
      <layout dim-ordering='alphabetic' dim-percentage='0.5' measure-ordering='alphabetic' measure-percentage='0.4' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:county_name:nk]' type='palette'>
            <map to='#1f77b4'>
              <bucket>&quot;San Francisco&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Santa Clara&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Sonoma&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Solano&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Contra Costa&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Marin&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Alameda&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Napa&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;San Mateo&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='Across County' tab-color='#eaeed3'>
      <table>
        <view>
          <datasources>
            <datasource caption='TravelCost Extract' name='C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde' />
          </datasources>
          <datasource-dependencies datasource='C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde'>
            <column caption='Average Out-of-Pocket Travel Cost' datatype='real' name='[Calculation_4070915162654650]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='0.01*sum([total_cost]*[freq])/sum([freq])' scope-isolation='false' />
            </column>
            <column caption='County of Residence' datatype='string' name='[county_name]' role='dimension' semantic-role='[County].[Name]' type='nominal'>
            </column>
            <column-instance column='[county_name]' derivation='None' name='[none:county_name:nk]' pivot='key' type='nominal' />
            <column-instance column='[src]' derivation='None' name='[none:src:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_4070915162654650]' derivation='User' name='[pcdf:usr:Calculation_4070915162654650:qk:1]' pivot='key' type='quantitative'>
              <table-calc diff-options='Relative' ordering-field='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[none:src:nk]' ordering-type='Field' type='PctDiff'>
                <address>
                  <value>-2</value>
                </address>
              </table-calc>
            </column-instance>
            <column caption='Scenario' datatype='string' name='[src]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Calculation_4070915162654650]' derivation='User' name='[usr:Calculation_4070915162654650:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\TravelCost.tde].[pcdf:usr:Calculation_4070915162654650:qk:1]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\TravelCost.tde].[usr:Calculation_4070915162654650:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\TravelCost.tde].[usr:Calculation_4070915162654650:qk]&quot;</bucket>
              <bucket>&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\TravelCost.tde].[pcdf:usr:Calculation_4070915162654650:qk:1]&quot;</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[none:county_name:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;San Francisco&quot;</bucket>
              <bucket>&quot;San Mateo&quot;</bucket>
              <bucket>&quot;Santa Clara&quot;</bucket>
              <bucket>&quot;Alameda&quot;</bucket>
              <bucket>&quot;Contra Costa&quot;</bucket>
              <bucket>&quot;Solano&quot;</bucket>
              <bucket>&quot;Napa&quot;</bucket>
              <bucket>&quot;Sonoma&quot;</bucket>
              <bucket>&quot;Marin&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <slices>
            <column>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[usr:Calculation_4070915162654650:qk]' value='C1033%' />
            <format attr='text-format' field='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[pcdf:usr:Calculation_4070915162654650:qk:1]' value='p0.0%' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[:Measure Names] / [C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[none:src:nk])</rows>
        <cols total='true'>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[none:county_name:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Across County Change Chart' tab-color='#eaeed3'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Change in Average Household Out-of-Pocket Cost</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='TravelCost Extract' name='C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde' />
          </datasources>
          <datasource-dependencies datasource='C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde'>
            <column caption='Average Out-of-Pocket Travel Cost' datatype='real' name='[Calculation_4070915162654650]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='0.01*sum([total_cost]*[freq])/sum([freq])' scope-isolation='false' />
            </column>
            <column caption='County of Residence' datatype='string' name='[county_name]' role='dimension' semantic-role='[County].[Name]' type='nominal'>
            </column>
            <column-instance column='[county_name]' derivation='None' name='[none:county_name:nk]' pivot='key' type='nominal' />
            <column-instance column='[src]' derivation='None' name='[none:src:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_4070915162654650]' derivation='User' name='[pcdf:usr:Calculation_4070915162654650:qk:1]' pivot='key' type='quantitative'>
              <table-calc diff-options='Relative' ordering-field='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[none:src:nk]' ordering-type='Field' type='PctDiff'>
                <address>
                  <value>-2</value>
                </address>
              </table-calc>
            </column-instance>
            <column caption='Scenario' datatype='string' name='[src]' role='dimension' type='nominal'>
            </column>
          </datasource-dependencies>
          <sort class='manual' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[none:county_name:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;San Francisco&quot;</bucket>
              <bucket>&quot;San Mateo&quot;</bucket>
              <bucket>&quot;Santa Clara&quot;</bucket>
              <bucket>&quot;Alameda&quot;</bucket>
              <bucket>&quot;Contra Costa&quot;</bucket>
              <bucket>&quot;Solano&quot;</bucket>
              <bucket>&quot;Napa&quot;</bucket>
              <bucket>&quot;Sonoma&quot;</bucket>
              <bucket>&quot;Marin&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[pcdf:usr:Calculation_4070915162654650:qk:1]' value='p0.0%' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[none:src:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[none:county_name:nk] / [C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[none:src:nk])</rows>
        <cols>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[pcdf:usr:Calculation_4070915162654650:qk:1]</cols>
      </table>
    </worksheet>
    <worksheet name='Across County Chart' tab-color='#eaeed3'>
      <table>
        <view>
          <datasources>
            <datasource caption='TravelCost Extract' name='C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde' />
          </datasources>
          <datasource-dependencies datasource='C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde'>
            <column caption='Average Out-of-Pocket Travel Cost' datatype='real' name='[Calculation_4070915162654650]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='0.01*sum([total_cost]*[freq])/sum([freq])' scope-isolation='false' />
            </column>
            <column caption='County of Residence' datatype='string' name='[county_name]' role='dimension' semantic-role='[County].[Name]' type='nominal'>
            </column>
            <column-instance column='[county_name]' derivation='None' name='[none:county_name:nk]' pivot='key' type='nominal' />
            <column-instance column='[src]' derivation='None' name='[none:src:nk]' pivot='key' type='nominal' />
            <column caption='Scenario' datatype='string' name='[src]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Calculation_4070915162654650]' derivation='User' name='[usr:Calculation_4070915162654650:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <sort class='manual' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[none:county_name:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;San Francisco&quot;</bucket>
              <bucket>&quot;San Mateo&quot;</bucket>
              <bucket>&quot;Santa Clara&quot;</bucket>
              <bucket>&quot;Alameda&quot;</bucket>
              <bucket>&quot;Contra Costa&quot;</bucket>
              <bucket>&quot;Solano&quot;</bucket>
              <bucket>&quot;Napa&quot;</bucket>
              <bucket>&quot;Sonoma&quot;</bucket>
              <bucket>&quot;Marin&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[usr:Calculation_4070915162654650:qk]' value='C1033%' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[none:src:nk]' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[none:src:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[usr:Calculation_4070915162654650:qk]</rows>
        <cols>([C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[none:county_name:nk] / [C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[none:src:nk])</cols>
      </table>
    </worksheet>
    <worksheet name='County, Auto, Income'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Typical day out-of-pocket household average by county, income quartile and automobile ownership category for </run>
            <run>&lt;</run>
            <run>Page Name</run>
            <run>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='TravelCost Extract' name='C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde' />
          </datasources>
          <datasource-dependencies datasource='C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde'>
            <column aggregation='Sum' datatype='real' name='[COUNTY]' role='dimension' type='ordinal'>
            </column>
            <column caption='Average Out-of-Pocket Travel Cost' datatype='real' name='[Calculation_4070915162654650]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='0.01*sum([total_cost]*[freq])/sum([freq])' scope-isolation='false' />
            </column>
            <column aggregation='Sum' caption='Automobile Ownership Category' datatype='real' name='[autos]' role='dimension' type='ordinal'>
              <aliases>
                <alias key='0.0' value='Zero automobiles' />
                <alias key='1.0' value='One automobile' />
                <alias key='2.0' value='Two automobiles' />
                <alias key='3.0' value='Three automobiles' />
                <alias key='4.0' value='Four or more automobiles' />
              </aliases>
            </column>
            <column caption='County of Residence' datatype='string' name='[county_name]' role='dimension' semantic-role='[County].[Name]' type='nominal'>
            </column>
            <column datatype='real' name='[freq]' role='measure' type='quantitative'>
            </column>
            <column caption='Household Income Category' datatype='string' name='[incQ_label]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[COUNTY]' derivation='None' name='[none:COUNTY:ok]' pivot='key' type='ordinal' />
            <column-instance column='[autos]' derivation='None' name='[none:autos:ok]' pivot='key' type='ordinal' />
            <column-instance column='[county_name]' derivation='None' name='[none:county_name:nk]' pivot='key' type='nominal' />
            <column-instance column='[incQ_label]' derivation='None' name='[none:incQ_label:nk]' pivot='key' type='nominal' />
            <column-instance column='[src]' derivation='None' name='[none:src:nk]' pivot='key' type='nominal' />
            <column caption='Scenario' datatype='string' name='[src]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[freq]' derivation='Sum' name='[sum:freq:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_4070915162654650]' derivation='User' name='[usr:Calculation_4070915162654650:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\TravelCost.tde].[usr:Calculation_4070915162654650:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\TravelCost.tde].[sum:freq:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[none:incQ_label:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Less than $30k&quot;</bucket>
              <bucket>&quot;$30k to $60k&quot;</bucket>
              <bucket>&quot;$60k to $100k&quot;</bucket>
              <bucket>&quot;More than $100k&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <slices>
            <column>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[usr:Calculation_4070915162654650:qk]' value='C1033%' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows total='true'>([C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[:Measure Names] / ([C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[none:autos:ok] / [C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[none:incQ_label:nk]))</rows>
        <cols total='true'>([C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[none:COUNTY:ok] / [C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[none:county_name:nk])</cols>
        <pages>
          <column>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[none:src:nk]</column>
        </pages>
      </table>
    </worksheet>
    <worksheet name='Income,Auto'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Average out-of-pocket household expenditures for transportation on a typical travel day for </run>
            <run>&lt;</run>
            <run>Page Name</run>
            <run>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='TravelCost Extract' name='C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde' />
          </datasources>
          <datasource-dependencies datasource='C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde'>
            <column caption='Average Out-of-Pocket Travel Cost' datatype='real' name='[Calculation_4070915162654650]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='0.01*sum([total_cost]*[freq])/sum([freq])' scope-isolation='false' />
            </column>
            <column aggregation='Sum' caption='Automobile Ownership Category' datatype='real' name='[autos]' role='dimension' type='ordinal'>
              <aliases>
                <alias key='0.0' value='Zero automobiles' />
                <alias key='1.0' value='One automobile' />
                <alias key='2.0' value='Two automobiles' />
                <alias key='3.0' value='Three automobiles' />
                <alias key='4.0' value='Four or more automobiles' />
              </aliases>
            </column>
            <column caption='Household Income Category' datatype='string' name='[incQ_label]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[autos]' derivation='None' name='[none:autos:ok]' pivot='key' type='ordinal' />
            <column-instance column='[incQ_label]' derivation='None' name='[none:incQ_label:nk]' pivot='key' type='nominal' />
            <column-instance column='[src]' derivation='None' name='[none:src:nk]' pivot='key' type='nominal' />
            <column caption='Scenario' datatype='string' name='[src]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Calculation_4070915162654650]' derivation='User' name='[usr:Calculation_4070915162654650:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <sort class='manual' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[none:incQ_label:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Less than $30k&quot;</bucket>
              <bucket>&quot;$30k to $60k&quot;</bucket>
              <bucket>&quot;$60k to $100k&quot;</bucket>
              <bucket>&quot;More than $100k&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[usr:Calculation_4070915162654650:qk]' value='C1033%' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[usr:Calculation_4070915162654650:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows total='true'>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[none:incQ_label:nk]</rows>
        <cols total='true'>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[none:autos:ok]</cols>
        <pages>
          <column>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[none:src:nk]</column>
        </pages>
      </table>
    </worksheet>
  </worksheets>
  <windows>
    <window class='schema' source-height='-1' />
    <window auto-hidden='0' class='worksheet' maximized='0' name='County, Auto, Income'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='currpage' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='67'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='bottom'>
          <strip size='56'>
            <card type='caption' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[:Measure Names]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[none:COUNTY:ok]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[none:autos:ok]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[none:county_name:nk]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[none:incQ:ok]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[none:incQ_label:nk]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[none:src:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Income,Auto'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='currpage' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='bottom'>
          <strip size='56'>
            <card type='caption' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[none:autos:ok]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[none:incQ_label:nk]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[none:src:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Across County'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='bottom'>
          <strip size='56'>
            <card type='caption' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[:Measure Names]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[none:county_name:nk]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[none:src:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Across County Chart'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[none:src:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[:Measure Names]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[none:src:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='1' name='Across County Change Chart'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[none:src:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='bottom'>
          <strip size='56'>
            <card type='caption' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[:Measure Names]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[none:county_name:nk]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\TravelCost.tde].[none:src:nk]</field>
        </color-one-way>
      </highlight>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='County, Auto, Income' width='192'>
      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
    </thumbnail>
    <thumbnail height='164' name='Income,Auto' width='192'>
      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
      7XkAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='184' name='Across County' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Across County Chart' width='192'>
      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
      AABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Across County Change Chart' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7EAAAOxAGVKw4b
      AAAgAElEQVR4nO3dWZBd933Y+e/Z7r5vfW/37X0F0ECDBPcNXERIlmTZiseT1Njj8kOc8Xge
      UjOTpDwzrlQyU5OHeUgmrpQrL3HFFY/LTiRLEUWKIkWJFABiX3oBet+X2333fT/nzEOTkKkm
      RJAAcbsb5/MC1EWf8/+fy/7xnP/v/H//v6Druo7B8IgSW90Bg6GVjAAwPNKMADA80owAMDzS
      jAAwPNKMADA80owAMDzS5I//omkaxisBw6PmTgCoqkq9Xm9lXx6YSqWC1WptdTcMB8CdAFAU
      BUVRQGty48pFXB0j9EcDX06ruk4+mwLFjlYrIlmd2GRoCArlXBKz3YvdagJdJRFP4PQGkfUa
      TdGCRRFpVEvEU1nMFiuNWgXFYkOtVtBkM5GQH03TsNvtFOJrvPnTK/zat38TPbnEjy/OcGK4
      kxI2PFaFgf7eL+f6DAeGvOcTtcL03BKPhbr48ff+iqaznXJ8C3u4l6+/+uwDaVTXNZKpJAuL
      lxEkBRULAWKI/c+TmJpEcLk4c/o5yukNJsenEXw9mLev4jj5bU5E7QCktpapmkN4xTyxiol+
      v5mbS0t84ysv3Gln4sYEAVueidUizas3cQfrnBtfhGKMQNcJunq6MUnGMOhRtue/vqYLdHa2
      MXH5IsvbWRLbW9h9Ieql/ANrVBBETCIMHTmC1enBJEJXVzcCOnanB1nYHYvomobb56OcWmcz
      UyGTyQDQrJepm3ycHAyTqcg89/gRtnYyvHr6uU+0E/S6mJ7bwdIs42mzMTsX5ytf+zV6ohFm
      P3yHue0Hd02Gg0nYMxlO1ymXS8gmC41aFVGWkUQRHTCbTA+kUV1TuXn1IoqnHbteRPZECVga
      lEQ3mbVpMDsoFgpYHG7UYpb2wWPYtTyr8QKlQg61Uaeh6ZjNMtVqE6fNSr5Ywmz38NjJo5QL
      BZxOJ7rWJJsr4bBZEWWBfKGCx+2g0VCp1ypY7U4kUXgg12Q4mPYEQLWQZvL2POGeQTrbfHc9
      cGtri/b29i+lU5qm0myqCIKIovziKU1Vm6iqhihKyLJ01+MLHwWAwfBZ9owBMrF55tczBL2b
      fP/6LTq8GsWmiUYhg2B24bfr5FUrFrHJwq3rSJ4olBMorjD1bBzV7OalZ08hCF/8/6yiKGEy
      7f0FlyQZ6e6/9wbD57Z3EAz0HTmBW97E7A6wvnyRZE0k5A+jVJMs55ocO/4Y05MTmJpZYrEi
      fo+TE20a19caiM01VP0UciufLHIb8L0//uLHn/p9OPZtmrUyumxFFnVSiQRWh4tGvYHVakYx
      mRDvI8gN+8OeAPB3HsWhm7GKLp4NSlS77TRFMzazGQENSVAp1EVOnz4NzSoNyY7cLKKbXLzq
      DaAqTuTPeK7WNZXxa5fINyXESg7B2c7Rdpm5lEx5awZbZICnx0ZolFK8/8GH+Dv7KWyvEj3x
      Iv1tDtRmjZ+/9wFPvPQiF8+d5fjIADOLGzz+3Iu4TAI0yrD0/hf/VvpfBZr89b/+3zn6+/+a
      I9YN/uzP/iNnXn+J985e49jxUb7xa2cwhg8H354AMFmd7A51TXgsgLNrz0GuPZ+4P/rz3p67
      BVFiZGSE27NzFCU/9fQGV7Zz1G1B3OYIhUwcGKFSSBOKRIkXdUY6fcQSGfrbHAiCiKA1UZEQ
      1CYLi8vUqzXKtSYuk3LPF/+ryYweGUEDJMXOV156mpWsyitPDHF1Zon3P7zG6y888YDaMrTK
      pz4Cfdl0rcnZn39AsG8Uc3Ida6ib7pDMQkxFz6/gbxsEwO4JkR6fp617gM10HW/EDIAoKfgD
      fkyKCb/fRzjoZ3JuGekBP5K0H3sW1VYllapRrDR4/qln0IppvMEQuDoeaFuG1tibBt0HCqkY
      txfWsHlCHB/+xdva+MYSy5sJ/OEuBrojdz9++RrOv3j1i3fg9f8Tnv/HX/x4w4GxLwPgfhXy
      OZzm+3jDK5tBejDvPAz7W0segb5sxWaZnyevf+HjPWYPz3c8/wB7ZNivWjMG0HWW526h2/xo
      +R0UT5SoX2E7p1HYXsQR7qezzYuu1pi4MU6kb5Ct5SX6R0/iNEvouk5sfR2nx8ns/ArhoIe1
      jRgjY0/isyskygn++OwXT4OOBcd4vuN5EmuTfDid5zfOPMv5994kLzopri/Te/QYvp6j9AUd
      D/BbMbRCi2aC6fja2tmcu8lWvs787Ummxy8xuzhPPKUyc2sCgGJynaYONyYXkOoZ5jZ25wKp
      jTKXzl+gosmEbCplxY9JEnHaHlQGaJfZbSa1tANqhSvXZ8nmCri9Li5fuczS3ByH7+Hx0dOa
      ANB1ZsevEegeQq8WkQSdXKlOOlNCrWdRLDYAFLOVQi6DySRhDYSoJFMAyCY7bUEP9VKa6c0i
      Hc46muJDecB5eZfbh8frYGcnx3B/lFpD57HHjtHT1cfyyjLG7//B15JBsK5rJHe2QbFhFlVE
      ixOHWaRc06hXctSqFVbWY9g8Adp9ThweH/l0inqtyEYsiT/cRUfAhY5KJlvA5/eDIGM17z7R
      TWxM8Dvv/c4X7t9YcIy//PpfPqjLNexjhzILtJnc5P3E+1/4+IA1wFd7vvrgOmTYt+4EQL1e
      p1artbo/D4RREmm4V3eyQCaTCZPJBLrG/O0JXO0DtHl/Kcuh1Zm8vUB/ZxuryTJH+jvRdY18
      vojbvXeCxF3pOpqmgSCAroMg8vFLXE3TEAQRUdz9N1XTEEUR0AEBQRDQdQ1V1T76u74781TX
      0QUB+aPpok6nk1ohyU/O3uS1r76Knt/hZ1fmODnSTk514LZAe+TuL9MMj4a9adBGnvOXx3nm
      ZR9zVz9AcLWRi23giPRy+rFO/uYv/hOnnj/FZqZBfMGBZPVwa36Z/s4Adn+UWmYH0e7npWcf
      v2ujuq4xefMKm4ksQrMKlhAhYROh7wU2r57DHO7mzItPUc1t8c575/H0n8IWv4rp6Dc5EbVT
      LaS5fOkSdXMQt1hgp26m2ykztZbiv/utb9xp58aHl5CqMa4uF9GunkVz1fjuO+vIjTRDYy8T
      DoeNGZ2PuL0lkSgcP9bL9YsfsrgRY2F+HsHiIBPfBqB/IMrsRhq3lmdpI8Z6PIfXJjG/tEI5
      t0O8BDubq7+yUUEQ6YiE6e/txhGKYhIadHZ2IdDAE+xB0nYfxZr1Kl29feRj88ysJe+URMqK
      CZu3g5efOQGKmzMvPYMOfP3rZz7Rjt1uIZOrYRZUrE4zuXyN17/19xjuDnPxzb/h9lbuQXyH
      hgPsU0oiNbY21rB5ghTTCRSbHbNiQtfB67aTyuZAF9F1lUqxiMXlRq1VQVexugM0iikEiwe/
      237XRnWtycVzH+AM9yJVUkjuTtrtdfJSgNTyTRR3BJfNjCxLrC3O0z58Ei9ZtsomrGKTXGKL
      RLGBzQTFiobfbSOeyuH2hT5REqk1KkzNrNDTHkFxyMzPbzJ6tJ9coUI2sU17Tz9m2SiKf5Tt
      yyxQrZRnJ5XFZHUQDv6iLLOYS5POFbE5PQS8dx9zGCWRhnu1LwPgfhkBYLhXh3IyHMUdeP9P
      Wt0LwwHQooKY3ZLIhuJCKCcRXVGGIyYWUwLl2Ay28CAnhntQq3nOnb9AqLOPxMYafY89R9Rr
      RdeaXL14mdEnn2L8ymVGBroZv73EY8+9sFsSWc3Btf/YikszHDAtGQEKosTo2En0UpKS7CQd
      W2ZqapJEfJ266iO+tQZAKbuNxxdiI1WjO2RhO76btVHVBrlUmkqtTjab5tb0LKpWp6lqrbgc
      wwHWkgDQtSbv/vC/IrrDkI9jtnlwuDxUqhKN6gZ2z+6apDann+2NFdw2gVi+iaw2AJAVK263
      A5PFhsthp70tSKVcolxTW3E5hgNsXw6CW14SaXhk7MsAuF+FTBJnbavV3TAcAIcyC1QTYEk6
      dHFt+BK0JgB0ne3NFbD60IpJZFeIoFMhU1IppTaxBaL4XTbQmiwuLBCKdhPfWCfaP4hZ2p27
      k8+kMVnNrK7F8HtsxHbS9AyM4LTKbBW3+N33frcll2Y4WFpUE6yhSyamr51DsLppVDfo8jVY
      r7qRShWaqzuceeVFSqk1duJxFmI5PM0EBXOQk91eGrUiP37zbZ7/6hnESpyYaYhiJoWsGAuH
      Gj6f1kyEEUSKqTgDx04gSzKyXmUzXiCbzaMoEspHKz8LooQsy4iiyMDJ42TXd5/rFbODjrAf
      RRLING2MtJuRbEGsLV2Q1HAQtegRSEMFylWd/o4AsmuUkEshnW9QSm+iSSYuXbqEze3H7/Fy
      pLuXraVFeqMWLl26hD/cxZGTj6OrdWRBo1jWGBzpb8mlGA62Q5kFWomv8Ncrf93qbhgOAKMk
      0vBI21sSic7O1gZWTwiXzfyJH/7lX6xaKU8slafN70GTzNgtD3ZdnvvhdDpp1orcnl3j6OgR
      9GqemeVtOiMeKpoFqwIet/uzT2Q41PaOAeo5fvjWOzz76hnK20so7hDZ2AZWX5DJGzd56onj
      FBoKz54a5d2f/JTR48eYG58jLQfQi0kCPiclwYlc3MYRGeJI395tlD6eDJcsNRBqBQR7O0Fi
      CN1PsXn9HNZIPy89dYJ6YYef/PQ8waEnsaYnkPpe4UjERjmX4Nq169RkD26pQqIu026XmY9l
      +e3f+NqddsbPn2V6cYaqqwv1+rvMlRN8cN6KqJU59thpTj9tBMCj7lNKIk2ceuwIk1cvsrCy
      yo2b4xTqOpubG/j8frbWVhgfH0fXdRqqTsDvQxIFUltrLM9Ncv3mFC6Pi/nlFSZvL35qo4Io
      MdDfR8jrQvG2o9fy+P1eGs0SNlcX9XIWgGopT0dXL9vLt7g+tUgitVsSabE7sTh8vPjs44iy
      lZeeewarWeKll09/oh0dkYDfiy7sXmog4Ob5M9+iP+Lm0jvfZ9ooiXzk7bkDCIoZs2LhhZdf
      Jb25isXtwW6xoek6tVKOeqNOZMCKIIi8dvoZZpe26Bs4hjtaJ7ETwel0Egr6UY+ewBH89Pk6
      utbkytVrBLpHcFa3EDt6sLsaeOQATWURX3gQVVWxeSMUbl/g6Mmn8I/1kjF5UFWV2NIs+Uqd
      8WsXyJR0TNPjrG2madOXCZw8eqedk888zU/O3aBPKmJ+/UUuXJrheKeDHcvr+EPzdAbuXrZp
      eDTsyyxQIbXNzNI6VneQ0aGeO58nNldY2Urga+ukvyt89+ONijDDPdqXAXC/jAAw3KtDORmO
      SgYm/rzVvTAcAC2bCzQ7dQPV4kMvxJE9UXqDJtYzOsXtORzhAQa6wmiNMlcvX6Otp5+dtRX6
      jz+B32FC1zXmp6fpHhphaW6Gro4wk9NLnHjiCWyyAKUEvPvPW3FphgOmRYviCHT1DZLdXCBV
      F1lfnGH61g3WNpbJF80sL84CUExtIluszCzv4DHVWYntZofURpX527OUKhXmZueYnJyiXCpQ
      bx66pznDl6xF+wNonH/vx1gCUZr5BKKkUG9opDJVqsUtTNbdNX8sNifxrXWsZoEiCo1CAQDZ
      ZMPrsaNYHHicVtx2G5VKjnSp3pLLMRxcLdofQKdeq4EoIQo6gigji6BqoKkNSrkUs0vr2DxB
      hns6kBWFRqNBJrHJ6kclkb0dQURJRlObiJJIvd7EZDIhCEZJpOHeHc4sUDKGM36l1d0wHACH
      MgCy+SyayVgixfDZWlYSWSzkQLGi18uIJjs2s0i1rtGoFFBsLqxmBXSNTDqDzeWmnM/h9PqQ
      xd2il1q1giTL5HJFrBaZYqmK2+fHLIus5dfua4skw6OjZWnQWGyTpZU1BEFEE+0MtWks5u2o
      yW1Ej48zp5+lnNng6uVJBGcIU2ED99FXGOv20KgVeeM7b/DMV15ma24SKThIYmGSZ17/BubD
      +WbD8CVpzcpwgojdpDA0PIzN7cOkFphZ3CKbTeFwB5CF3QWudLWJPxhER2Lk5DHysd09ChSz
      g/awD7vDicnVxrH+NnzhHjwWoybY8Pm07g4Qj2P2dhBxmZG7nqI7aGUzWaOYWEa0BpiamsJs
      d6AIAmNHe9laXqKjzcfU1BRuf5je4SPUcglK5TLlYoWufqMk0vD57ctBsNpsUK3VESUZq+UX
      RTmNeo16o4kkm7CY7158s7C9wL+59W8eRlcNB5xREml4pH1KSSTUajUUk4lmo3Hns7tp1OvI
      JhP7bUESp9OJpjYpFMs4XU5QmxTKVWwWhaYuIYugKPunhNPQGnvGALpW5z/8v/8Pr/3eP2b6
      0nuMHRmkKlipFVPUmwJWlw+3UqeEHVMjx4fnx3nmK09TKsLYscF7CoSPSyKLmoJQySI6OwiK
      SbTwCWKT57GFB3nyxBDNcpr3P/iQtuEnsOfn0TuepD9ooZxLcHNiiobkwC7WyKkyfkVgPVPm
      17/6yp12bn34U9459yGv/d4/Q73xI362sIDTFUEQmvQNjvGVF049yO/ScADtCYDU6jSSp42r
      V65j1zRmpm8Ry1Rw+T1UcypO+yqJxA7+jn60egWPXWZ2eobYeoYjxwYxf1orv0QQJY4cPcrU
      rWlKNh+VTJz2IKSrGUQlTC69DQxRzicJhjtYW5ymHl+gw3GU/qAFq8OD1WLnxPExVm+P0zt0
      nOLmPJ7uoU+0U66pjI32Uq42UctwfLQLe+gp4rfPcevSOfqGh+kLOj69k4ZHwp4AqOlW/tv/
      /vfZWp5Hktqo5NP4Oix4vC4aVQ2TAsONPhqKB6WeJZ1XsdsFfJ52RI17SqzqWpMPfvoewf7j
      mJJrmP1RnJ4mVdlLUZ3BGxkEwO4Okbp5ns7+41j8EtWPVn7bXJhkK1OicfNDYqk6mniL2cUN
      evolOtu8d9o5ceokP3zvCkfkEpZXTvGzc7d56aUoG/YX8Xlmcdt+9eOd4fDbl1mg+94fwKgI
      M9yjfRkA98sIAMO9OpwTB2pFWP9pq3thOABa9CZYZ3XhNrotiJbfRvF00OEzsZNTKews4Qz3
      0x50o6t1psYniPQNsbW8QP+xk9hNIrquE49t4Qu3k9zewu/zcGt6idGxURRRgMIW/Offa8Wl
      GQ6YFpVE6rgDYdamr7GRrTA7NcH0zQvcXphjO17n1uRNAIrJdWpNlavjM1BJMbuxuzBWs17i
      /PtnKZSKnD17jombN8hkkpQah+5pzvAla1EAwNLtCcJ9w1CvIAka6UKNTKaI1iyimHff4iom
      M+VSAbNJwhVppxRP7H5udhAOeVEsTtr8biRNRxKqxHNGSaTh82lRSaTG9uY6usmBVWwiWd24
      rBLFikqtlKFeb7C2GcPmDtDmtuLyB8kk4qhqlc1YEn+4i4jPgcXhpFLMY7Va2I6niUTCiEZJ
      pOFzOJxZoPgazvnvtbobhgPgcAaAkQY13KNDmQZdza/yD9/4h63uhuEAaE0a9KPJcFvpAkK9
      DLYwJ6Iit1NmKhuzWNv7eP2FJ6lmN/nxT87ijg6iJpYJjn2FE127JZE/+O4PefL0c8zevI6z
      fYC12zd5+Tf+PiGHgqZrlBqlVlya4YBpSQAIgkhXZxSzo0CyUKWe3ubyzQRNR5hwqJ+6WgGg
      UavQ3TdIoqpw5OgA68kUdHlQzA4iIS/uQJhweye9RwcQGw1CDmN6s+HzadGLMJXpmVnc7f34
      lCLS0GO81ulkcbNMMTGP2dtJIpFAkt3UK1sMdvcR29wg3B4mkUhgttqJdHVTiC2TLFToKOYJ
      dfa14lIMB9y+HARXilm2dlKYbC46I8E7n+fTCRKZPA63n7aA567HT29N88eX//hhdNVwwBkl
      kYZH2qeWRB4GRhrUcC/2jAGyWwucn1zFH2hjuNNLqiLgkpuky3Wy6/OIvk5cTiemZhF3pA+X
      Uufd985h9/h5/PgQa7E0fR0+FjczqNklGs4+rNQZGB7GLO/OvNA1lYkbl2kqboRyEtEVJSjn
      afoG2J6+hD08yOhgF2qtwIfnLxIZOYW9vI7qHyHqNVPOJZi8PYsm21H0GjVBxq5rJCoqr59+
      9s61zF/+gO+8/VO+/Yf/G82pn/DGtVt0dvYhSDrhcC+vvfjkw/umDfvSngDYWl6mf+xphkIO
      /va738Vn0dnMgc9voVFRsZQmof8p1iauw0KOM497Mfl6efGZEX7y5vfxe2y8OVNnYX6Zpx8f
      RmhsM3l7kqazjbEu324jgsix42Ncu3yJqslFY2sVu7tOUXFTa3jIb6wwOthFKRPD6fWzMDuN
      klsheKqfqNeM1eXHbjbRPnSU9MotrO1DyMUtLLrrE9cSz5Z47sl+Erka6naNp57spqn0k5y/
      wdzUBCPHj9HhsT2UL9qwP+2ZDDfw2BMk58e5cnOaod4okreHE0cG6Ovrpb+vG4sjQJvXgcMd
      INruwxnqxy2kOXfhCv2Dg6RrZk6O9HLy5BidnZ3ozQZt0Siuv7tmoa7yzhvfQ3RH0HM7KHYf
      Hq8fSXRSK69jc+0GitXpI7a+gsvjxWQ2kc/vbmu6MXONua0sC5Mfcm12k/TaLO+evUExk0b9
      O9dy/PgISzGRqFRi+IUR1tYEnjt1jOOPP0HUb0cQ9ttaFoaHbV9mgYySSMPDsi8D4H4ZAWC4
      V4dyLhDNGsSWW90Lw35hsoP/09eObdn+AIntDbB40MppZEcAn10mV1YpZ7exeiN4nVbQmqyu
      rOKPdJCKbRHp7sUk7T63F3JZbC4PpXwWu93G6to2Pb1diAKQXQWjHsDwsZ4X4PffJB9fZmqt
      QCOziubo5JVnT7RudeiaqjF75ecIZieN+io9/gZrFTdioYBq2eLMyy9QSq2zvr7G7EYSZz1O
      RvJysttLo1bk7Tfe4rVvfZMfv/Ujjg71sZMu4o924jYZA1vDpyuU48zcjPMP/sELvPOzD6ES
      aV1N8NzUTRRnkGY5iyDLBMJdmCUTtXIaxbSbmpTNVrKpJGazgiopNEu7MzwVs4OOsB/F6qI9
      6MWERjKxQ7Gq/qpGDY+4cLSfns4Ab3/3rxCdQXbS1dbtEvnLBODjT4vp7TtZoNGhnjs/k9hc
      vpMF6u8K/9JRu2cxdok07PHRI9CnOZxZoNQ2zsytVnfDsF9YvdDx+Kf+06EMgEwuQ0k0CmIM
      n04SJSL23fdILcsCZdMJMDnQqwVEqwuXVaZU06gV0picPpw2M+gqO9s7uHwB8ukUvrbw7sJX
      QKVURFYUEqkMTpuZTL5IsK0dq0livbBu7BJpuKuQLcR7v/0e9XKmdVmgTC7LwvxVBNmMqpvo
      D6osF53omSQ4nJx5+TnK6Q1u35qhafZiLW/hGHmZkx/tEvnm937As6+/RmLlNjv+QdJLU3ja
      2jEmQRvuVS4ba90ukbKmMnT0GBa7E0UtsbAaJ5tNY3O4kcXdpzJd03C5PYDEyGMnyG/GgI93
      ifRjtVrRrQGO9fpw+qO4TMYukYZ7F2zvaN0dIJXNILssRH125L4hon4z26k6xeQKmOxcvXoV
      q8uLRTFxaniAjcUFomEnV69exdfWycDRUZqlDNVKmWKxRs/gQCsuxXCgufbnIFjXNDRdBwQk
      6Rc3KU3T0HUdQRAQxbvfvBZ3Fvn3M//+IfTUcBC5zW7+5Jk/AYySSMMj7lNKInUKuRyK1YHF
      JIOuU6lWD9wvlNPpRGvW2I5naYuEoFElni7gcVlpaDKKDFbLwbomw4O3dwxQz/Gf/8t/4anT
      X0UoxBAdfuampxnuiSA4A5R2YggOH265Sq5p5uTxkc89kv54YaxcQ0Ss5hAc7QSFBHrHSbbG
      z2OLDPDMySM0Sil+9v55QsNPYstNI3Q+y2DISjmX4MbNCeqyC4dYJduUCZpFVpJFfvPrr91p
      Z/L8+5y7dpVnf/t/Rr3xIy5uriKb/IjUGRx5klefP3mfX5/hoNsTAJpo4eToEAu3r9LUXFBf
      QpJk5ufnyLKCHQeiGKOhNvHIAvmRETyfcz0qQZQYHh5mZm6Bghyknk9ha5NJ1nIolnaK2QRw
      hEohTVt7JxuLtyhvLxB1jDIYsmJxuLHaXJw8Mcbi1DhPnBgjs3abU71HPtFOrakz1B+l1lRR
      azDYH8bd+SKJqZ8xfv49Ogf6GWwz6gYeZXsCQBBEJMnMicefo57eRHINITarFHIZuu0uHIoN
      hCaSunsHcH+Bxdh0rcn5c2cJ9B7DklrHFurE4WlQlX1UmCPQ9tEukZ42MhML9A6NYe90Ubbv
      bsK6tXiLeL5M88YF4tkmgjTJwkqMzpqJ9uDRO+2MPfE4P3r/KqNSEfOrT/PzC9O8MtDGlu1l
      fL45gi7LF/zaDIfFvswCGSWRhodlXwbA/TICwHCvDmdJZDUPi2+0uheGA6Blb4KXZm+hW/1o
      hR1kT5Quv0Isp1HYXsQR7qcr7ENv1hi/cZNw7yCxlSX6R0/issjousbm2hqhaBfbG6uEgn5u
      3V5i9PExzKIAxW34/v/YikszHDAt2yQvEIkSW5wgVmywOD3J9MRl5pYWSKQ1ZqcnASim1lER
      GL+9iNLMMb+ZBUBtVLh64TLFconLl68ycXOcXD5DpX7onuYMX7LWBICuc/v6JXydA+iVApIo
      kC83SGdKNGsZFLMdAMVsI59NYzZJmLx+qqk0ALLJTijgRrE4CXqdWCQJXS2RLBi7RBo+n5bt
      EplOJkC2YhJVRLMdu0mkUtdoVApUq2WW17aweYJEAy7sbg+FTIZapcB6bDcLFA26MVlt1Cpl
      zGYT6Uwev99nlEQaPpfDmQVKrONc+XGru2E4AA5nABhpUMM9allJZFNtgiCBpiKIEqIImrb7
      lliQZCRRBF2n0WggyTJqs4msKHcWtNVUFUEQaDRVJEmg2dRQFAVRFFjOLfO7f/u7Lbk0w8HS
      sjTo9OQN1nfSCGoNzEFGO2A6baUWW8Qc6uTMS09TzW7y7vsXsbf1oKdWCIx9hbGPdon8r995
      g6dfeZGFievYIoNszIxz+pu/RcC+OzdD59Dd2AxfgpbtEhkOBTHbXexkitSzca5PpajbQoQD
      3dT1KgDNRo1oVw/JmsKx48OsxBN3dolsb/Ph9Abwt3UyMNKDUKvd+eU3GO5Vy2WLTxgAABMT
      SURBVHaJXFxaxtHWQ9AKUvgUgx12VmIViolFFFeU9fV1FMWO1tjmSF+U2NoakbCP9fV1bE4P
      0d4+SvF1MsUy1VKRSLexS6Th89uXg+BauUgyk0Ox2An5f7EbZCmfJVsoYXW48bkddz1+NjbL
      v7j2Lx5CTw0HnVESaXikGbtEGh5pe8YA2/NX+P7FOF6lwEvPPUFJs6CW02Dx4jE1yDXMDPZ2
      cD+LkH9cElmXHQjlNKKrg4CURQuMELt9AXt4kLGRXtRqnrPnLhAZPoW9tIIaHKXbb6GcSzBx
      a4amZMMiNChrIi4Rtot1vvbqC3fambnwHt/50Xt8+4/+Oc3xt3njxhQdHX0IokZHdIjXTz91
      H1dhOAz2BICua1SSq+RNNiYnJliL55FNFoI2nYbsIJnK09f7O/c1ehZEidETY9y4dpWy4qSx
      s4nH2yRfStLU/CRi6zDSSym7jdcfYml+GiG9RNuTg3T7LVhdPmxmM11HjhNfmCTadQQts4Y9
      4vtEO+lijeefGSFTqKGmVZ5+egDBdpTE7FXmJ28wfHyULp+xS+SjbM9kOLunjW99+5ucGj2C
      2+2mr6+XRiWHLzpExO+mv78P4T6HzbrW5N233kB0tSEUElhcftxeP4rsolnbxOEJAmBzBdjZ
      XMUfbMPv91GvVgDYmL3B0k6eufHzTCztkFiZ5oNLk+RSyU/sEnli7BgbSTOdcomRl0bZ3lZ4
      5uQwJ554mt6OwJ19iw2Prs/OAukayUyWgM/3K3/sQTJKIg0Py75Mg94vIwAM9+pwlkQ2KrA6
      1epeGB4GdxQ8nV/48JZNhoutL4HNj1pIoLjbCLlMpItNisl17MFuAm4baE3m5+Zo6+xlZ32V
      roFhzPJu/imXTmH3+ClkUziddhYWNxgcHkASgNw6/MXXWnJphofspX8Gr/4fTH34FpaBV8hM
      vEX707+Ft7HFGz96F2+kj3yxxFBvlKPHjiGLn8xftmQUqOsaotnG9PXzLGzGGb92g5mbZ7l+
      a5ql5STXr18DoJhaI5VOc+HKOJmtBW5/VBLZqBV5560fky/mefvtd5i8eZP19VWKRknkI0ol
      vbpAPFNmZ26adAVsvgjtbSGGesKUs1uc//AS6/HcniNbkwYRBLI7m/QfPYEkCsjUiCWLZLN5
      JAkUeffGJIkyAiDJMn0nRsmtbwG/tEtkyEuzXMFl19nKVFtyOYZWk2iLhBFFmUh7GNQKiUSc
      Ut1MT98gR7p78NoVbo7f3HNka0oiNZX5mVtg9eGU68jONoJOmUyhSSmzhSbIxHbi2NwBHGKT
      YFc3seVlzFYTsZ0k/nAXAYeCwxsgn0nicjlYWNpkaKgf0SiJfLR89Aj0RR3OLND2Es7x/9Dq
      bhgehv5XYOArX/jwwxkARhrUcI8OZRp0o7DBP3n3n7S6G4aH4E9f/VP6Pf2kk3E8/hDpZJxA
      MERsbZHV7Szd0RCa7MRmAo/Hs2cOW2sKYj6aDJco1BHqRQR7hOMdItMpE5XNWayRfk4/PUY9
      v8O7Pz2Ht3OAemKV0PGXOdrholkv8fYb7zD2zCnmJidwt/exPjPF81//NiGHQkNrsFZYa8Wl
      GR6yulqnmk/y7/703/FH/9Mf8m//7M/5v/7ln+B0e1h6/wLplTmWMxmOPvYyLz/l2XN8a3aJ
      FCX6+3pp87sx+9qhtM3ZSzdIxNexu7tpVHbTVdVynmh3H+WGzEB/B4VECgBJseJxWfGEooTb
      wgwM9tHe3U/IYZREPoosrgCDnRHsvnZ6w34AxGaJtoHjnPn236M/6ufGD/4/pmKVPce26A7Q
      5Nr1GwS6hnHWYog9o7z88nPMrpUpJ2bxtw3QaDSwuNsoTK/S1d3HxnaWcI+bRqOBIIqEIu2k
      12bYypaJlLP42ns/u2HDofX8a2cwSfDKmTPkEttoJicnjwWRZYGxx1/D740yEDTvOW5fDoKL
      6R3mVjaxugIcGei683kytspaLIU31EFvtO2ux09tTvGHP//Dh9FVQ4v9+df+nCHv0Bc+3iiJ
      NDzSjJJIwyNt7xigUeRvv/cGvcefo8unIFhcqNU8TcGMyyKQq+jYTFAsVRAQ8PvdJFIFOjoi
      iPdYJ6nrGjOT11HNXvRiAtkTJWAq03BE2Zm7hiM8wGB3BK1R5sqlq0SGxrDVtmm6egm7TZRz
      CSan55HMDmhU0E1WlHqVnCpy+tkn7rSzcvMC3337fX7zD/5X1Nmf84PLU/T19qFLIqFAOy8+
      8/iD+h4NB9TeAJDM+D1OSrkN3ruVBb2E1tRRBB3NpGAXBHbKFZxaBdHuweb0sTA/y9//vT8g
      6LjXMbVAz8AwN65cpGHxUl9aQLeXqEVMFEoWkktzDHZHKKY2MVltTM/MoGTmCZyKEnabsLkC
      eG3ruDr7qSeW0FxRXHqOzeInk1ob8TRPnOxgM1VGXc7x2MkwJS1IbmWKme0MQ8eO0uY0Nsp7
      lO1Jg2rNGpqkIIg2gk6RcLSH7t4+uru66WoPIDn99Pf00t87QG9vD7KgE27vQPw8SxHqKj9/
      500UX5RmdgfR7CAQCAA2KsUNTFYXABa7i+2NNSxmEzoCmUwGgM25G0ytJYkt3uDC5AqV1Dpv
      /fQiWr2K9neaOTrcz/RyjYhYov+pXhYWarz4zGOMHD+OW25Qa6h7+2Z4pLRofwCdZrMBgrgb
      geLunzoCmtaklEkws7SOzRPkSF8noiwj6Do7myusbiXwhjro6QghCAK6rn/iT1lRKBpTIQz3
      aF+mQe+XMRfIcK8O5VwgtCYUtlvdi0ePzQ/SwXob37KSyEIuA4oNvV5CNDuwW0QqNZ16OYfJ
      7sZmMYGukUomsbu9lHJZ3P7AnZK2aqWMyWKjVi1jNplIpXP4A/7dTFR6CYx6gIfvH31AxRbh
      nQ+u8MpXv4aeWee9y7cZHeoi2zDhd5jo79tfb+xbtj/ATnybpeUVBFFGFWwMhTQWC3a01A6C
      28OZ089RTq9z4/otsAcwFzdxHnmFk927+wP88Ltv8Oq3vsE7b77JiaNDbOxkefrlV3Gb7mfN
      OsP9Sq7McfPqdYafepn4xUvUKzm+/0EWr5gl0HGMaFcXZllqdTfvaM1kOEHEKksMjRzB6vJi
      UgvMLm+Rzaaxu/zIwm4uR9c0vP4AOjIjJ0cpxHYfaxSzg/awD8XqIhL0kktnsCp1drKH4032
      QZYpVYhGPayvbNI1MkwuW+Ubv/Hr9EYjLFz7GbfXU63u4ie0rCTyxtWLmDzt2LQisqeDrqCV
      rWSVYmIFweKkXCphcbho5NKEe/vZXF7E6fVSyBfwBNsxa1V87Z0kt9bwed1Mzaxw4uQJTJJg
      lES2yj/6AK1tlEw2j9NuR5AFCoUKXo+Ter1JrVrG5nQhi/tnRb59mQXS1Ca1egNRkjGbfjGo
      ajYaNJpNJFnBpNz96a2wOYvz7L98GF01/F1n/m/w7a9n/M+yLwPgfhlpUMO9OpRp0O3SNv/0
      4j9tdTceKT6Lj3/14r+iUatQaeg4HTZq5SJ1TUTSm5gsNnT4lXfuVmhpSWRBlREqWURnB0fb
      ZeZSEuWtWWzhAZ4aG6ZRTvP+B+cJdPaTj63ROfYCfSEHWrPGz3/2cwaPDTN3ewZ/exebC7Oc
      evXrhBwKlWaF81vnW3Fpj6yIfXex4p9856+4tlXjn/0vf8Tf/OV/IlXXcKpFbIEoYy98ldHu
      QIt7+kktK4kcOXIEu6Sh2f2UU+tcuTFOIr6OZAqTz+wAUMmnCIWjJAsavVEvycTuynC6IEKz
      gSsYpTMcIBztxtfWbpRE7gNFJEJ+Mw1Vo7ernXJN58y3foNqIcu5d9+i3Gx1Dz+pNUsjak3O
      vv8zRIcPUy2LK9jF8RNjuF1tCFocX6gDALsnRCq+RcijsJWp47Lu/oJLkoIv4CO5Os3ttSRy
      I4Pd98UXSDU8OKdOHqd3cJR8Ik4wFOQrr71OyO/n5TNfY6CvF9P+SQAB+3QQfL/7A0xsTPA7
      7/3Ow+iq4SMRe4R3/pt3Wt2Nz+0TJZH1er3V/XkgSuUSqmRMdX6YREHEYbr71rX71Z1BsKIo
      KMrheIbWNM1IgxruyZ0AEITdOTSbs9e4uqniKs4TfvwbdPvMKLJIrVomW6rjdzuRTGZM9zGf
      Q9d1VuZvoduCaPltFE8HAatKVfaQWJ7CEe4nGvKgq3Umb44TGRjF2sxQtwTx2ZXdksiZRexO
      D9ViDrPbi5rLUlPsPP3YMQRBQBAEtufG+e7bZ/nN3/8f0Fau8oMLtxgZ7KUpmfE73Tzx+PH7
      /wYNB9qeNGgpG+f2rU0c+RUyYpi3524SDIXo7BkgFVulrKpYHV381jdfvI9mdbyhdiauXUK3
      +alvTpGWU+g9T1BINlhPjhN99TTF5Bp1TePm1AxyfBz/k7+Nz65gcwWIeLfRXG0EHRIZzUHf
      oIvpjfwnWplf3mB0yMVCrIQ6scnIsINkESrbk8SsIQaOjOCxHo67nuGL2TMmN1nt9IdddIw8
      TqWQxhdsw2Jz0dMVxeF00jtyFLfl/l8fzE/eINQzhF4rIZksdHREETChNvIolt2tSxWTlVI+
      h9CsUNHEOyWRyY155nbKSJUdbszF8Fo0fnbuBpGQ7xMlkQPd7dy4lcKvF4kea2NyKsXLp5+j
      b2CQZnKNRN7YT+BR16KSSI14bAtMdixiE9HiwiqpNAQz1XySWq3G6kYMmydAxGPH6Qsi63U2
      t7aI7SSxOtx4XXYkWUJtqiiKQqPRQJTNRCIhSsZUCMM92pdp0PtlzAUy3Kt99lrCYHi4WlYS
      +Vm3HUEQPvXnPs5W7d64BPjETwgIApBagH/7aw+su4bDq2UlkePXL7GZzCM0Kgi2No53iNxO
      maluzmGJ9HLmxaeo5rb48U/O4uoYQE0sEzz5OmNduyWRP/jOG7zy69/g3bfe4tTYURbXEzzz
      cUmkrkFz71LYBsMva1lJZGdHB/09XTjbujA1slyZmCWX3cEb6kPSdksbG7Uq3X2DNHUTR0aH
      KCeSwG5JZKRttyQyHPCwsx1Hb+RI5Y2SSMPn06I7gMrs3DyuSB9+UxFp+DGGO50sbZYpJuYx
      eTrZ3t5Glp00qlsMd/cT21gn3B5ie3sbi91Je3cPJhGi3b0E/R4mppdpcx+exX0ND8e+zAJV
      Szm2ExlMVgftbb+YP17IJklli9hdXoI+912PL6xN4fzhHzyMrhoOuH0ZAPfLSIMa7tWhDICV
      +Ap/ufSXre6G4QBoWUnkxPVLNBQ3QjmJ6IoyHDaxmBYoxWawhwc5PtSNWitw/twFQl19JDbW
      6Dv5LB1eK7rW5PrlK7R3R5mbXSTc0cHm0hKjz79KyKGQr+f5m9m/acWlGQ6Y1rwIE0SOnTiJ
      WkxQlByktpaYuj1FIr5GvellZ3MVgFImhtsXZD1ZpStgJhbf3T1SVRuk40kcgSi9YTc2fwd2
      j4eg3ZjYZvh8WhMAuso7P/w+kjsM+R1MVjdWm51iWaBeWcfm3t3q0ur0E1tfwWWFWKGJ1Nwt
      2JEVK263g8TKLS7e3sCuZ5DtEQRjVUTD57QvxwBGSaThYbkTAKqq0mzus5L9LyiTzxBrxFrd
      DcMBcCgDoFQqYbfbjXMa5/xMd7JAkiQhSftn2er7oaoqZvPeXcGNcxrn/GX7cgxgMDws+2uh
      xgfo9tWz3FhO0Rv2UBMk3K4Qj58Y/tznmZ28xvRKAp+lgWb1Ee7oZ6Q3fF99a5RTfOfND+nx
      S9RMLkLhXo4OdNzXOaeuXSBVVzDXU1QlO4FQN6ND97NYmMrbP/gekidMbXMeZ88JRo4eo839
      xbeVnb/+AVtCiMr6LLrdRTO+hrv3OCNHRwm5vtjdYGniPCtVF26tQLLapBlbxN5zgpEjxwh7
      Pruvh7YgptYQ6Ar7iHT3olUrJLeWiBcan/s8XT3ddPX0MnxklEYhw8ryHJWG9tkH/goXzn5I
      tVygc/AojWKO9dV5SrX7W8coFtsmublF59AIzWKezbV5CtX7OKdaQxBtiILCkccep5RYZ2Zu
      7r762B7tRKSGw9uNjM6Rkycpxu/vvOGOTmRRpLsrQk/PAEceO0U5vnbP5zy0d4Cunii3VpJE
      ox2IGiS3VlHkzx/vtyanwN6GNxBg6MgoWzsJxPt83/DSV79J+/wikbYgqnqM2PYO4n2edPT4
      KMs7JdoCIZrDOts720j3c07RTDjsQ/FECLklpBMu4vn7WzhNtrqIBB3UWMLvGiLkFJGtbhKF
      L35e2eKk3a8xNb1AW88wIb8fcczFTu7eFjwwxgCGR9qhvQMYDr9qKU9FlTHLYLPZqBZzbCez
      BMMRtGaNSqmMLogEg8G73rWNADAcWAu3J1hJFujqHeHESC+LNy7R7DjKwrmzOEwq04sryM4w
      wx0BAkE/O8Umlnoem9fHzlqMjv7ewzsINhx+IyefpN1rZWHiKqvJIiDgC4YQtAb5isrgwAAu
      ucriWoyl2VuoepMbE0ssL95GRWHq5lVjDGA4wLQmyWyBbHyb9r4h6tkYM8sx+oeGaVQKyJKE
      LsoktjYIt4fRTW4yG3M4Am1IugQS/P9GtsRvGY4zaQAAAABJRU5ErkJggg==
    </thumbnail>
  </thumbnails>
</workbook>
