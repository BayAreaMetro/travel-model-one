<?xml version='1.0' encoding='utf-8' ?>

<workbook source-platform='win' version='8.3' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <!-- build 8200.14.0720.2105                                -->
  <preferences>
  </preferences>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='8.3'>
      <aliases enabled='yes' />
      <column caption='Effective Hours' datatype='real' name='[Parameter 1]' param-domain-type='any' role='measure' type='quantitative' value='8.0'>
        <calculation class='tableau' formula='8.0' />
      </column>
      <column caption='Max Zone Number' datatype='integer' name='[Parameter 2]' param-domain-type='any' role='measure' type='quantitative' value='1454'>
        <calculation class='tableau' formula='1454' />
      </column>
      <column caption='Occupancy' datatype='real' name='[Parameter 3]' param-domain-type='any' role='measure' type='quantitative' value='1.5'>
        <calculation class='tableau' formula='1.5' />
      </column>
    </datasource>
    <datasource caption='tableau.non-recurrent delay (Reference)' inline='true' name='excel-direct.41880.749246307867' version='8.3'>
      <connection class='excel-direct' cleaning='no' compat='no' filename='C:\Users\lzorn\Documents\Travel Model One Utilities\CoreSummaries\tableau\Reference.xlsx'>
        <relation name='&apos;tableau#non-recurrent delay$&apos;' table='[&apos;tableau#non-recurrent delay$&apos;]' type='table'>
          <columns header='yes'>
            <column datatype='integer' name='vcRatioTimes100' ordinal='0' />
            <column datatype='string' name='Lanes' ordinal='1' />
            <column datatype='real' name='Non-recurrent Delay per Vehicle Mile' ordinal='2' />
            <column datatype='string' name='Facility Type' ordinal='3' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>vcRatioTimes100</remote-name>
            <remote-type>20</remote-type>
            <local-name>[vcRatioTimes100]</local-name>
            <parent-name>[&apos;tableau#non-recurrent delay$&apos;]</parent-name>
            <remote-alias>vcRatioTimes100</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Lanes</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Lanes]</local-name>
            <parent-name>[&apos;tableau#non-recurrent delay$&apos;]</parent-name>
            <remote-alias>Lanes</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Non-recurrent Delay per Vehicle Mile</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Non-recurrent Delay per Vehicle Mile]</local-name>
            <parent-name>[&apos;tableau#non-recurrent delay$&apos;]</parent-name>
            <remote-alias>Non-recurrent Delay per Vehicle Mile</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Facility Type</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Facility Type]</local-name>
            <parent-name>[&apos;tableau#non-recurrent delay$&apos;]</parent-name>
            <remote-alias>Facility Type</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name></remote-name>
            <remote-type>0</remote-type>
            <parent-name>[&apos;tableau#non-recurrent delay$&apos;]</parent-name>
            <remote-alias></remote-alias>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>2</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column aggregation='Sum' datatype='integer' name='[vcRatioTimes100]' role='dimension' type='ordinal'>
      </column>
      <layout dim-ordering='alphabetic' dim-percentage='0.5' measure-ordering='alphabetic' measure-percentage='0.4' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='avgload5period Extract' inline='true' name='C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde' version='8.3'>
      <connection class='dataengine' dbname='C:\Users\lzorn\Documents\AcrossScenarios\avgload5period.tde' schema='Extract' tablename='Extract'>
        <relation name='Extract (Extract.Extract)' table='[Extract].[Extract]' type='table' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>a</remote-name>
            <remote-type>4</remote-type>
            <local-name>[a]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>a</remote-alias>
            <ordinal>0</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>12113</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>1.0</statistic>
              <statistic aggregation='Max' datatype='real'>20443.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>14</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>b</remote-name>
            <remote-type>4</remote-type>
            <local-name>[b]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>b</remote-alias>
            <ordinal>1</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>12115</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>1.0</statistic>
              <statistic aggregation='Max' datatype='real'>20443.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>15</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>distance</remote-name>
            <remote-type>5</remote-type>
            <local-name>[distance]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>distance</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>385</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>0.0</statistic>
              <statistic aggregation='Max' datatype='real'>12.800000000000001</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>9</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lanes</remote-name>
            <remote-type>4</remote-type>
            <local-name>[lanes]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>lanes</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>8</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>1.0</statistic>
              <statistic aggregation='Max' datatype='real'>8.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>4</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>gl</remote-name>
            <remote-type>4</remote-type>
            <local-name>[gl]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>gl</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>10</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>1.0</statistic>
              <statistic aggregation='Max' datatype='real'>10.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>6</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>use</remote-name>
            <remote-type>130</remote-type>
            <local-name>[use]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>use</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>6</approx-count>
            <scale>2</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='binary' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;   ?&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;4.0&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;wstr&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ft</remote-name>
            <remote-type>4</remote-type>
            <local-name>[ft]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>ft</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>8</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>1.0</statistic>
              <statistic aggregation='Max' datatype='real'>10.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>5</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>at</remote-name>
            <remote-type>4</remote-type>
            <local-name>[at]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>at</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>7</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>0.0</statistic>
              <statistic aggregation='Max' datatype='real'>7.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>3</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>cap</remote-name>
            <remote-type>4</remote-type>
            <local-name>[cap]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>cap</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>22</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>0.0</statistic>
              <statistic aggregation='Max' datatype='real'>2000.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ffs</remote-name>
            <remote-type>4</remote-type>
            <local-name>[ffs]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>ffs</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>14</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>10.0</statistic>
              <statistic aggregation='Max' datatype='real'>100.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>7</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fft</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fft]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>fft</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>554</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>0.0</statistic>
              <statistic aggregation='Max' datatype='real'>19.370000000000001</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>10</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>cspd</remote-name>
            <remote-type>5</remote-type>
            <local-name>[cspd]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>cspd</remote-alias>
            <ordinal>11</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>5621</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>0.0</statistic>
              <statistic aggregation='Max' datatype='real'>65.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>12</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>vol_tot</remote-name>
            <remote-type>5</remote-type>
            <local-name>[vol_tot]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>vol_tot</remote-alias>
            <ordinal>12</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>242544</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>0.0</statistic>
              <statistic aggregation='Max' datatype='real'>49725.989999999998</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>16</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>4</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ctim</remote-name>
            <remote-type>5</remote-type>
            <local-name>[ctim]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>ctim</remote-alias>
            <ordinal>13</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>1338</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>0.0</statistic>
              <statistic aggregation='Max' datatype='real'>30.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>11</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>vc</remote-name>
            <remote-type>5</remote-type>
            <local-name>[vc]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>vc</remote-alias>
            <ordinal>14</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>10854</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>0.0</statistic>
              <statistic aggregation='Max' datatype='real'>1.9641</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>13</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>timeperiod</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timeperiod]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>timeperiod</remote-alias>
            <ordinal>15</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>5</approx-count>
            <scale>2</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='binary' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;AM&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;PM&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;wstr&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>src</remote-name>
            <remote-type>130</remote-type>
            <local-name>[src]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>src</remote-alias>
            <ordinal>16</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>3</approx-count>
            <scale>2</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='binary' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;2010_04_ZZZ&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;2040_03_127&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>0</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;wstr&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[:Measure Names]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\avgload5period.tde].[pcdf:sum:Calculation_4890829192148691:qk:2]&quot;' value='Growth in Roadway Lane Miles from Year 2010' />
          <alias key='&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\avgload5period.tde].[pcto:sum:Calculation_1810829190347636:qk]&quot;' value='Share of Vehicle-miles Traveled' />
          <alias key='&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\avgload5period.tde].[pcto:sum:Calculation_4420828151331817:qk:1]&quot;' value='Share of VMT' />
          <alias key='&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\avgload5period.tde].[pcto:sum:Calculation_4420828151331817:qk:2]&quot;' value='Share of VMT for Link Type' />
          <alias key='&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\avgload5period.tde].[pcto:sum:Calculation_4890829192148691:qk]&quot;' value='Share of Roadway Lane Miles' />
          <alias key='&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\avgload5period.tde].[pcto:sum:Calculation_6350905173822671:qk:3]&quot;' value='Share of Total Roadway Seat Miles along County' />
        </aliases>
      </column>
      <column caption='Share of Vehicle Miles Traveled' datatype='real' default-format='p0.00%' name='[Calculation1]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM(iif([ctim]&lt;0.1,[Calculation_4420828151331817],0)) / TOTAL(SUM(iif([ctim]&lt;0.1,[Calculation_4420828151331817],0)))' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='VMT (Speed Bin non-dummy)' datatype='real' name='[Calculation_1810829190347636]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Calculation_6500829184447940]==&apos;0 mph (dummy)&apos; THEN&#13;&#10;  0&#13;&#10;ELSE&#13;&#10;  [Calculation_4420828151331817]&#13;&#10;END' scope-isolation='false' />
      </column>
      <column caption='Delay' datatype='real' name='[Calculation_2320829171401165]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([ctim]-[fft])*[vol_tot]/60' scope-isolation='false' />
      </column>
      <column caption='Non-recurrent Delay Per Mile' datatype='real' name='[Calculation_3400829181112340]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='ATTR([excel-direct.41880.749246307867].[Non-recurrent Delay per Vehicle Mile])' scope-isolation='false' />
      </column>
      <column caption='Average Travel Speed' datatype='real' name='[Calculation_4000829170355183]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='Sum([distance]*[vol_tot])/Sum([ctim]*[vol_tot]/60)' scope-isolation='false' />
      </column>
      <column caption='VMT' datatype='real' name='[Calculation_4420828151331817]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[vol_tot]*[distance]' scope-isolation='false' />
      </column>
      <column caption='Roadway Lane Miles' datatype='real' name='[Calculation_4890829192148691]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[distance]*[lanes]' scope-isolation='false' />
      </column>
      <column caption='Congestion (volume over capacity)' datatype='string' name='[Calculation_5010829191108792]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [vc] &lt;= 0.00001 THEN&#13;&#10;  &apos;0 (dummy)&apos;&#13;&#10;ELSEIF [vc] &lt;= 0.75 THEN&#13;&#10;  &apos;Light&#13;&#10;(v/c &lt; 0.75)&apos;&#13;&#10;ELSEIF [vc] &lt;= 1.0 THEN&#13;&#10;  &apos;Moderate&#13;&#10;(0.75 &lt; v/c &lt; 1.00)&apos;&#13;&#10;ELSE&#13;&#10;  &apos;Heavy&#13;&#10;(v/c &gt; 1.00)&apos;&#13;&#10;END' scope-isolation='false' />
      </column>
      <column caption='VHT' datatype='real' name='[Calculation_5810829165448827]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[ctim]*[vol_tot]/60' scope-isolation='false' />
      </column>
      <column caption='Roadway Seat Miles' datatype='real' name='[Calculation_6350905173822671]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[distance]*[lanes]*[cap]*[Parameters].[Parameter 1]*[Parameters].[Parameter 3]' scope-isolation='false' />
      </column>
      <column caption='Speed Bin' datatype='string' name='[Calculation_6500829184447940]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [cspd] &lt;= 0.1 THEN&#13;&#10;  &apos;0 mph (dummy)&apos;&#13;&#10;ELSEIF [cspd] &lt;= 7.5 THEN&#13;&#10;  &apos;1.0 to 7.5 mph&apos;&#13;&#10;ELSEIF [cspd] &lt;= 15 THEN&#13;&#10;  &apos;7.5 to 15 mph&apos;&#13;&#10;ELSEIF [cspd] &lt;= 30 THEN&#13;&#10;  &apos;15 to 30 mph&apos;&#13;&#10;ELSEIF [cspd] &lt;= 45 THEN&#13;&#10;  &apos;30 to 45 mph&apos;&#13;&#10;ELSEIF [cspd] &lt;= 60 THEN&#13;&#10;  &apos;45 to 60 mph&apos;&#13;&#10;ELSE&#13;&#10;  &apos;Faster than 60 mph&apos;&#13;&#10;END' scope-isolation='false' />
      </column>
      <column aggregation='Sum' caption='vcRatioTimes100' datatype='integer' name='[Calculation_6530829180003764]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='INT([vc]*100)' scope-isolation='false' />
      </column>
      <column caption='Facility Type' datatype='string' name='[Calculation_7550828155717668]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='If [ft]==1 THEN&#13;&#10;  &apos;Freeways&apos;&#13;&#10;Elseif [ft]==2 THEN&#13;&#10;  &apos;Freeways&apos;&#13;&#10;Elseif [ft]==3 THEN&#13;&#10;  &apos;Expressways&apos;&#13;&#10;Elseif [ft]==4 THEN&#13;&#10;  &apos;Collectors&apos;&#13;&#10;Elseif [ft]==5 THEN&#13;&#10;  &apos;Freeways&apos;&#13;&#10;Elseif [ft]==6 THEN&#13;&#10;  &apos;Other&apos;&#13;&#10;Elseif [ft]==7 THEN&#13;&#10;  &apos;Major Arterials&apos;&#13;&#10;Elseif [ft]==8 THEN&#13;&#10;  &apos;Freeways&apos;&#13;&#10;Elseif [ft]==8 THEN&#13;&#10;  &apos;Other&apos;&#13;&#10;END' scope-isolation='false' />
      </column>
      <column caption='Link Type' datatype='string' name='[Calculation_7570828154404546]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='If [a]&lt;=[Parameters].[Parameter 2] THEN&#13;&#10;  &apos;Centroid&apos;&#13;&#10;Elseif [b]&lt;=[Parameters].[Parameter 2] THEN&#13;&#10;  &apos;Centroid&apos;&#13;&#10;Elseif [ft]==6 THEN&#13;&#10;  &apos;Dummy&apos;&#13;&#10;Else&#13;&#10;  &apos;Roadway&apos;&#13;&#10;END' scope-isolation='false' />
        <aliases>
          <alias key='&quot;Dummy&quot;' value='Toll Plazas' />
        </aliases>
      </column>
      <column caption='VMT (Congestion non-dummy)' datatype='real' name='[Calculation_7680829191605709]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF  [Calculation_5010829191108792]==&apos;0 (dummy)&apos; THEN&#13;&#10;  0&#13;&#10;ELSE&#13;&#10;  [Calculation_4420828151331817]&#13;&#10;END' scope-isolation='false' />
      </column>
      <column caption='Vehicle Seconds of Delay per Mile' datatype='real' name='[Calculation_8200829171900729]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='Sum([Calculation_2320829171401165]*60*60)/Sum([Calculation_4420828151331817])' scope-isolation='false' />
      </column>
      <column caption='Lanes' datatype='string' name='[Calculation_9060829180125573]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [lanes]==2 THEN&#13;&#10; &apos;2&apos;&#13;&#10;ELSEIF [lanes]==3 THEN&#13;&#10; &apos;3&apos;&#13;&#10;ELSE&#13;&#10; &apos;4 or more&apos;&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='string' name='[Facility Type (group)]' role='dimension' type='nominal'>
        <calculation class='categorical-bin' column='[Calculation_7550828155717668]'>
          <bin value='&quot;Collectors&quot;'>
            <value>&quot;Collectors&quot;</value>
            <value>&quot;Expressways&quot;</value>
            <value>&quot;Major Arterials&quot;</value>
            <value>&quot;Other&quot;</value>
          </bin>
        </calculation>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column aggregation='Sum' datatype='real' name='[ft]' role='dimension' type='ordinal'>
      </column>
      <column aggregation='Sum' caption='County' datatype='real' name='[gl]' role='dimension' type='ordinal'>
        <aliases>
          <alias key='1.0' value='San Francisco' />
          <alias key='2.0' value='San Mateo' />
          <alias key='3.0' value='Santa Clara' />
          <alias key='4.0' value='Alameda' />
          <alias key='5.0' value='Contra Costa' />
          <alias key='6.0' value='Solano' />
          <alias key='7.0' value='Napa' />
          <alias key='8.0' value='Sonoma' />
          <alias key='9.0' value='Marin' />
        </aliases>
      </column>
      <column caption='Scenario' datatype='string' name='[src]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;2010_04_ZZZ\\modelfiles\\avgload5period.csv&quot;' value='Year 2010 (v 0.4)' />
          <alias key='&quot;2040_03_116\\modelfiles\\avgload5period.csv&quot;' value='Year 2040 Plan (v 0.3)' />
          <alias key='&quot;2040_03_127\\modelfiles\\avgload5period.csv&quot;' value='Year 2040 TIP 2015 (v 0.3)' />
        </aliases>
      </column>
      <column caption='Time Period' datatype='string' name='[timeperiod]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;AM&quot;' value='AM Peak (6 am to 10 am)' />
          <alias key='&quot;EA&quot;' value='Early AM (3 am to 6 am)' />
          <alias key='&quot;EV&quot;' value='Evening (7 pm to 3 am)' />
          <alias key='&quot;MD&quot;' value='Midday (10 am to 3 pm)' />
          <alias key='&quot;PM&quot;' value='PM Peak (3 pm to 7 pm)' />
        </aliases>
      </column>
      <column-instance column='[Calculation_6500829184447940]' derivation='None' name='[none:Calculation_6500829184447940:nk]' pivot='key' type='nominal' />
      <column-instance column='[gl]' derivation='None' name='[none:gl:ok]' pivot='key' type='ordinal' />
      <column-instance column='[src]' derivation='None' name='[none:src:nk]' pivot='key' type='nominal' />
      <column-instance column='[timeperiod]' derivation='None' name='[none:timeperiod:nk]' pivot='key' type='nominal' />
      <column-instance column='[Calculation_4890829192148691]' derivation='Sum' name='[pcdf:sum:Calculation_4890829192148691:qk:2]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Columns' type='PctDiff'>
          <address>
            <value>-2</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Calculation_1810829190347636]' derivation='Sum' name='[pcto:sum:Calculation_1810829190347636:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[Calculation_4420828151331817]' derivation='Sum' name='[pcto:sum:Calculation_4420828151331817:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[Calculation_4420828151331817]' derivation='Sum' name='[pcto:sum:Calculation_4420828151331817:qk:2]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Columns' type='PctTotal' />
      </column-instance>
      <column-instance column='[Calculation_4890829192148691]' derivation='Sum' name='[pcto:sum:Calculation_4890829192148691:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-field='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:gl:ok]' ordering-type='Field' type='PctTotal' />
      </column-instance>
      <column-instance column='[Calculation_6350905173822671]' derivation='Sum' name='[pcto:sum:Calculation_6350905173822671:qk:3]' pivot='key' type='quantitative'>
        <table-calc ordering-field='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:gl:ok]' ordering-type='Field' type='PctTotal' />
      </column-instance>
      <group hidden='true' name='[Exclusions (Scenario,Speed Bin,Time Period)]' name-style='unqualified' user:auto-column='exclude'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:src:nk]' />
          <groupfilter function='level-members' level='[none:Calculation_6500829184447940:nk]' />
          <groupfilter function='level-members' level='[none:timeperiod:nk]' />
        </groupfilter>
      </group>
      <layout dim-ordering='alphabetic' dim-percentage='0.378277' measure-ordering='alphabetic' measure-percentage='0.475655' show-hidden-fields='true' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:gl:ok]' type='palette'>
            <map to='#1f77b4'>
              <bucket>4.0</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>9.0</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>6.0</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>2.0</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>1.0</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>8.0</bucket>
            </map>
            <map to='#d62728'>
              <bucket>7.0</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>3.0</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>5.0</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column caption='Effective Hours' datatype='real' name='[Parameter 1]' param-domain-type='any' role='measure' type='quantitative' value='8.0'>
          <calculation class='tableau' formula='8.0' />
        </column>
        <column caption='Max Zone Number' datatype='integer' name='[Parameter 2]' param-domain-type='any' role='measure' type='quantitative' value='1454'>
          <calculation class='tableau' formula='1454' />
        </column>
        <column caption='Occupancy' datatype='real' name='[Parameter 3]' param-domain-type='any' role='measure' type='quantitative' value='1.5'>
          <calculation class='tableau' formula='1.5' />
        </column>
      </datasource-dependencies>
      <datasource-dependencies datasource='excel-direct.41880.749246307867'>
        <column datatype='real' name='[Non-recurrent Delay per Vehicle Mile]' role='measure' type='quantitative'>
        </column>
      </datasource-dependencies>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='AcrossScen Miles Chart' tab-color='#fff6be'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Growth in Roadway Lane Miles from Base Scenario</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='avgload5period Extract' name='C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde'>
            <column caption='Roadway Lane Miles' datatype='real' name='[Calculation_4890829192148691]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[distance]*[lanes]' scope-isolation='false' />
            </column>
            <column caption='Link Type' datatype='string' name='[Calculation_7570828154404546]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='If [a]&lt;=[Parameters].[Parameter 2] THEN&#13;&#10;  &apos;Centroid&apos;&#13;&#10;Elseif [b]&lt;=[Parameters].[Parameter 2] THEN&#13;&#10;  &apos;Centroid&apos;&#13;&#10;Elseif [ft]==6 THEN&#13;&#10;  &apos;Dummy&apos;&#13;&#10;Else&#13;&#10;  &apos;Roadway&apos;&#13;&#10;END' scope-isolation='false' />
              <aliases>
                <alias key='&quot;Dummy&quot;' value='Toll Plazas' />
              </aliases>
            </column>
            <column aggregation='Sum' caption='County' datatype='real' name='[gl]' role='dimension' type='ordinal'>
              <aliases>
                <alias key='1.0' value='San Francisco' />
                <alias key='2.0' value='San Mateo' />
                <alias key='3.0' value='Santa Clara' />
                <alias key='4.0' value='Alameda' />
                <alias key='5.0' value='Contra Costa' />
                <alias key='6.0' value='Solano' />
                <alias key='7.0' value='Napa' />
                <alias key='8.0' value='Sonoma' />
                <alias key='9.0' value='Marin' />
              </aliases>
            </column>
            <column-instance column='[Calculation_7570828154404546]' derivation='None' name='[none:Calculation_7570828154404546:nk]' pivot='key' type='nominal' />
            <column-instance column='[gl]' derivation='None' name='[none:gl:ok]' pivot='key' type='ordinal' />
            <column-instance column='[src]' derivation='None' name='[none:src:nk]' pivot='key' type='nominal' />
            <column-instance column='[timeperiod]' derivation='None' name='[none:timeperiod:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_4890829192148691]' derivation='Sum' name='[pcdf:sum:Calculation_4890829192148691:qk]' pivot='key' type='quantitative'>
              <table-calc diff-options='Relative' ordering-field='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:src:nk]' ordering-type='Field' type='PctDiff'>
                <address>
                  <value>-2</value>
                </address>
              </table-calc>
            </column-instance>
            <column caption='Scenario' datatype='string' name='[src]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;2010_04_ZZZ\\modelfiles\\avgload5period.csv&quot;' value='Year 2010 (v 0.4)' />
                <alias key='&quot;2040_03_116\\modelfiles\\avgload5period.csv&quot;' value='Year 2040 Plan (v 0.3)' />
                <alias key='&quot;2040_03_127\\modelfiles\\avgload5period.csv&quot;' value='Year 2040 TIP 2015 (v 0.3)' />
              </aliases>
            </column>
            <column caption='Time Period' datatype='string' name='[timeperiod]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;AM&quot;' value='AM Peak (6 am to 10 am)' />
                <alias key='&quot;EA&quot;' value='Early AM (3 am to 6 am)' />
                <alias key='&quot;EV&quot;' value='Evening (7 pm to 3 am)' />
                <alias key='&quot;MD&quot;' value='Midday (10 am to 3 pm)' />
                <alias key='&quot;PM&quot;' value='PM Peak (3 pm to 7 pm)' />
              </aliases>
            </column>
          </datasource-dependencies>
          <filter class='categorical' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:Calculation_7570828154404546:nk]'>
            <groupfilter function='member' level='[none:Calculation_7570828154404546:nk]' member='&quot;Roadway&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:gl:ok]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:gl:ok]' />
              <groupfilter function='member' level='[none:gl:ok]' member='10.0' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:gl:ok]' direction='ASC'>
            <dictionary>
              <bucket>4.0</bucket>
              <bucket>5.0</bucket>
              <bucket>9.0</bucket>
              <bucket>7.0</bucket>
              <bucket>1.0</bucket>
              <bucket>2.0</bucket>
              <bucket>3.0</bucket>
              <bucket>6.0</bucket>
              <bucket>8.0</bucket>
              <bucket>10.0</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:timeperiod:nk]'>
            <groupfilter function='member' level='[none:timeperiod:nk]' member='&quot;AM&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:timeperiod:nk]</column>
            <column>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:Calculation_7570828154404546:nk]</column>
            <column>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:gl:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[pcdf:sum:Calculation_4890829192148691:qk]' scope='rows' value='Growth in Roadway Lane Miles Relative to Base Scenario' />
            <format attr='subtitle' class='0' field='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[pcdf:sum:Calculation_4890829192148691:qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[pcdf:sum:Calculation_4890829192148691:qk]' scope='rows' value='true' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='text-format' field='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[pcdf:sum:Calculation_4890829192148691:qk]' value='p0.0%' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:src:nk]' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:src:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[pcdf:sum:Calculation_4890829192148691:qk]</rows>
        <cols>([C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:gl:ok] / [C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:src:nk])</cols>
      </table>
    </worksheet>
    <worksheet name='AcrossScen Miles Table' tab-color='#fff6be'>
      <table>
        <view>
          <datasources>
            <datasource caption='avgload5period Extract' name='C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde'>
            <column caption='Roadway Lane Miles' datatype='real' name='[Calculation_4890829192148691]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[distance]*[lanes]' scope-isolation='false' />
            </column>
            <column caption='Link Type' datatype='string' name='[Calculation_7570828154404546]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='If [a]&lt;=[Parameters].[Parameter 2] THEN&#13;&#10;  &apos;Centroid&apos;&#13;&#10;Elseif [b]&lt;=[Parameters].[Parameter 2] THEN&#13;&#10;  &apos;Centroid&apos;&#13;&#10;Elseif [ft]==6 THEN&#13;&#10;  &apos;Dummy&apos;&#13;&#10;Else&#13;&#10;  &apos;Roadway&apos;&#13;&#10;END' scope-isolation='false' />
              <aliases>
                <alias key='&quot;Dummy&quot;' value='Toll Plazas' />
              </aliases>
            </column>
            <column aggregation='Sum' caption='County' datatype='real' name='[gl]' role='dimension' type='ordinal'>
              <aliases>
                <alias key='1.0' value='San Francisco' />
                <alias key='2.0' value='San Mateo' />
                <alias key='3.0' value='Santa Clara' />
                <alias key='4.0' value='Alameda' />
                <alias key='5.0' value='Contra Costa' />
                <alias key='6.0' value='Solano' />
                <alias key='7.0' value='Napa' />
                <alias key='8.0' value='Sonoma' />
                <alias key='9.0' value='Marin' />
              </aliases>
            </column>
            <column-instance column='[Calculation_7570828154404546]' derivation='None' name='[none:Calculation_7570828154404546:nk]' pivot='key' type='nominal' />
            <column-instance column='[gl]' derivation='None' name='[none:gl:ok]' pivot='key' type='ordinal' />
            <column-instance column='[src]' derivation='None' name='[none:src:nk]' pivot='key' type='nominal' />
            <column-instance column='[timeperiod]' derivation='None' name='[none:timeperiod:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_4890829192148691]' derivation='Sum' name='[pcdf:sum:Calculation_4890829192148691:qk:1]' pivot='key' type='quantitative'>
              <table-calc diff-options='Relative' ordering-field='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:gl:ok]' ordering-type='Field' type='PctDiff'>
                <address>
                  <value>-2</value>
                </address>
              </table-calc>
            </column-instance>
            <column-instance column='[Calculation_4890829192148691]' derivation='Sum' name='[pcdf:sum:Calculation_4890829192148691:qk:2]' pivot='key' type='quantitative'>
              <table-calc diff-options='Relative' ordering-type='Columns' type='PctDiff'>
                <address>
                  <value>-2</value>
                </address>
              </table-calc>
            </column-instance>
            <column caption='Scenario' datatype='string' name='[src]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;2010_04_ZZZ\\modelfiles\\avgload5period.csv&quot;' value='Year 2010 (v 0.4)' />
                <alias key='&quot;2040_03_116\\modelfiles\\avgload5period.csv&quot;' value='Year 2040 Plan (v 0.3)' />
                <alias key='&quot;2040_03_127\\modelfiles\\avgload5period.csv&quot;' value='Year 2040 TIP 2015 (v 0.3)' />
              </aliases>
            </column>
            <column-instance column='[Calculation_4890829192148691]' derivation='Sum' name='[sum:Calculation_4890829192148691:qk]' pivot='key' type='quantitative' />
            <column caption='Time Period' datatype='string' name='[timeperiod]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;AM&quot;' value='AM Peak (6 am to 10 am)' />
                <alias key='&quot;EA&quot;' value='Early AM (3 am to 6 am)' />
                <alias key='&quot;EV&quot;' value='Evening (7 pm to 3 am)' />
                <alias key='&quot;MD&quot;' value='Midday (10 am to 3 pm)' />
                <alias key='&quot;PM&quot;' value='PM Peak (3 pm to 7 pm)' />
              </aliases>
            </column>
          </datasource-dependencies>
          <filter class='categorical' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\avgload5period.tde].[sum:Calculation_4890829192148691:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\avgload5period.tde].[pcdf:sum:Calculation_4890829192148691:qk:2]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\avgload5period.tde].[sum:Calculation_4890829192148691:qk]&quot;</bucket>
              <bucket>&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\avgload5period.tde].[pcdf:sum:Calculation_4890829192148691:qk:1]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:Calculation_7570828154404546:nk]'>
            <groupfilter function='member' level='[none:Calculation_7570828154404546:nk]' member='&quot;Roadway&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:gl:ok]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:gl:ok]' />
              <groupfilter function='member' level='[none:gl:ok]' member='10.0' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:gl:ok]' direction='ASC'>
            <dictionary>
              <bucket>4.0</bucket>
              <bucket>5.0</bucket>
              <bucket>9.0</bucket>
              <bucket>7.0</bucket>
              <bucket>1.0</bucket>
              <bucket>2.0</bucket>
              <bucket>3.0</bucket>
              <bucket>6.0</bucket>
              <bucket>8.0</bucket>
              <bucket>10.0</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:timeperiod:nk]'>
            <groupfilter function='member' level='[none:timeperiod:nk]' member='&quot;AM&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:timeperiod:nk]</column>
            <column>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:Calculation_7570828154404546:nk]</column>
            <column>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:gl:ok]</column>
            <column>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[pcdf:sum:Calculation_4890829192148691:qk:2]' value='p0.0%' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[:Measure Names] / [C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:src:nk])</rows>
        <cols>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:gl:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='Delay modelese'>
      <table>
        <view>
          <datasources>
            <datasource caption='avgload5period Extract' name='C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde' />
            <datasource name='Parameters' />
            <datasource caption='tableau.non-recurrent delay (Reference)' name='excel-direct.41880.749246307867' />
          </datasources>
          <datasource-dependencies datasource='C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde'>
            <column caption='Delay' datatype='real' name='[Calculation_2320829171401165]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([ctim]-[fft])*[vol_tot]/60' scope-isolation='false' />
            </column>
            <column caption='Facility Type' datatype='string' name='[Calculation_7550828155717668]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='If [ft]==1 THEN&#13;&#10;  &apos;Freeways&apos;&#13;&#10;Elseif [ft]==2 THEN&#13;&#10;  &apos;Freeways&apos;&#13;&#10;Elseif [ft]==3 THEN&#13;&#10;  &apos;Expressways&apos;&#13;&#10;Elseif [ft]==4 THEN&#13;&#10;  &apos;Collectors&apos;&#13;&#10;Elseif [ft]==5 THEN&#13;&#10;  &apos;Freeways&apos;&#13;&#10;Elseif [ft]==6 THEN&#13;&#10;  &apos;Other&apos;&#13;&#10;Elseif [ft]==7 THEN&#13;&#10;  &apos;Major Arterials&apos;&#13;&#10;Elseif [ft]==8 THEN&#13;&#10;  &apos;Freeways&apos;&#13;&#10;Elseif [ft]==8 THEN&#13;&#10;  &apos;Other&apos;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Link Type' datatype='string' name='[Calculation_7570828154404546]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='If [a]&lt;=[Parameters].[Parameter 2] THEN&#13;&#10;  &apos;Centroid&apos;&#13;&#10;Elseif [b]&lt;=[Parameters].[Parameter 2] THEN&#13;&#10;  &apos;Centroid&apos;&#13;&#10;Elseif [ft]==6 THEN&#13;&#10;  &apos;Dummy&apos;&#13;&#10;Else&#13;&#10;  &apos;Roadway&apos;&#13;&#10;END' scope-isolation='false' />
              <aliases>
                <alias key='&quot;Dummy&quot;' value='Toll Plazas' />
              </aliases>
            </column>
            <column caption='Vehicle Seconds of Delay per Mile' datatype='real' name='[Calculation_8200829171900729]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='Sum([Calculation_2320829171401165]*60*60)/Sum([Calculation_4420828151331817])' scope-isolation='false' />
            </column>
            <column-instance column='[Calculation_7550828155717668]' derivation='None' name='[none:Calculation_7550828155717668:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_7570828154404546]' derivation='None' name='[none:Calculation_7570828154404546:nk]' pivot='key' type='nominal' />
            <column-instance column='[src]' derivation='None' name='[none:src:nk]' pivot='key' type='nominal' />
            <column-instance column='[timeperiod]' derivation='None' name='[none:timeperiod:nk]' pivot='key' type='nominal' />
            <column caption='Scenario' datatype='string' name='[src]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;2010_04_ZZZ\\modelfiles\\avgload5period.csv&quot;' value='Year 2010 (v 0.4)' />
                <alias key='&quot;2040_03_116\\modelfiles\\avgload5period.csv&quot;' value='Year 2040 Plan (v 0.3)' />
                <alias key='&quot;2040_03_127\\modelfiles\\avgload5period.csv&quot;' value='Year 2040 TIP 2015 (v 0.3)' />
              </aliases>
            </column>
            <column-instance column='[Calculation_2320829171401165]' derivation='Sum' name='[sum:Calculation_2320829171401165:qk]' pivot='key' type='quantitative' />
            <column caption='Time Period' datatype='string' name='[timeperiod]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;AM&quot;' value='AM Peak (6 am to 10 am)' />
                <alias key='&quot;EA&quot;' value='Early AM (3 am to 6 am)' />
                <alias key='&quot;EV&quot;' value='Evening (7 pm to 3 am)' />
                <alias key='&quot;MD&quot;' value='Midday (10 am to 3 pm)' />
                <alias key='&quot;PM&quot;' value='PM Peak (3 pm to 7 pm)' />
              </aliases>
            </column>
            <column-instance column='[Calculation_8200829171900729]' derivation='User' name='[usr:Calculation_8200829171900729:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='excel-direct.41880.749246307867'>
            <column datatype='string' name='[Lanes]' role='dimension' type='nominal'>
            </column>
            <column aggregation='Sum' datatype='integer' name='[vcRatioTimes100]' role='dimension' type='ordinal'>
            </column>
          </datasource-dependencies>
          <filter class='categorical' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\avgload5period.tde].[sum:Calculation_2320829171401165:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\avgload5period.tde].[usr:Calculation_8200829171900729:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:Calculation_7550828155717668:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Freeways&quot;</bucket>
              <bucket>&quot;Expressways&quot;</bucket>
              <bucket>&quot;Major Arterials&quot;</bucket>
              <bucket>&quot;Collectors&quot;</bucket>
              <bucket>%null%</bucket>
              <bucket>&quot;Other&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:Calculation_7570828154404546:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Centroid&quot;</bucket>
              <bucket>&quot;Dummy&quot;</bucket>
              <bucket>&quot;Roadway&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:timeperiod:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;EA&quot;</bucket>
              <bucket>&quot;AM&quot;</bucket>
              <bucket>&quot;MD&quot;</bucket>
              <bucket>&quot;PM&quot;</bucket>
              <bucket>&quot;EV&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <slices>
            <column>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[usr:Calculation_8200829171900729:qk]' value='n#,##0.0;-#,##0.0' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[:Measure Names]' value='100' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows total='true'>([C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[:Measure Names] / [C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:timeperiod:nk])</rows>
        <cols>([C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:Calculation_7570828154404546:nk] / [C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:Calculation_7550828155717668:nk])</cols>
        <pages>
          <column>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:src:nk]</column>
        </pages>
        <join-lod-include-overrides>
          <column>[excel-direct.41880.749246307867].[Lanes]</column>
          <column>[excel-direct.41880.749246307867].[vcRatioTimes100]</column>
        </join-lod-include-overrides>
        <subtotals>
          <column>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:Calculation_7570828154404546:nk]</column>
        </subtotals>
      </table>
    </worksheet>
    <worksheet name='Roadway Lane Miles by County'>
      <table>
        <view>
          <datasources>
            <datasource caption='avgload5period Extract' name='C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde'>
            <column caption='Roadway Lane Miles' datatype='real' name='[Calculation_4890829192148691]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[distance]*[lanes]' scope-isolation='false' />
            </column>
            <column caption='Link Type' datatype='string' name='[Calculation_7570828154404546]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='If [a]&lt;=[Parameters].[Parameter 2] THEN&#13;&#10;  &apos;Centroid&apos;&#13;&#10;Elseif [b]&lt;=[Parameters].[Parameter 2] THEN&#13;&#10;  &apos;Centroid&apos;&#13;&#10;Elseif [ft]==6 THEN&#13;&#10;  &apos;Dummy&apos;&#13;&#10;Else&#13;&#10;  &apos;Roadway&apos;&#13;&#10;END' scope-isolation='false' />
              <aliases>
                <alias key='&quot;Dummy&quot;' value='Toll Plazas' />
              </aliases>
            </column>
            <column aggregation='Sum' caption='County' datatype='real' name='[gl]' role='dimension' type='ordinal'>
              <aliases>
                <alias key='1.0' value='San Francisco' />
                <alias key='2.0' value='San Mateo' />
                <alias key='3.0' value='Santa Clara' />
                <alias key='4.0' value='Alameda' />
                <alias key='5.0' value='Contra Costa' />
                <alias key='6.0' value='Solano' />
                <alias key='7.0' value='Napa' />
                <alias key='8.0' value='Sonoma' />
                <alias key='9.0' value='Marin' />
              </aliases>
            </column>
            <column-instance column='[Calculation_7570828154404546]' derivation='None' name='[none:Calculation_7570828154404546:nk]' pivot='key' type='nominal' />
            <column-instance column='[gl]' derivation='None' name='[none:gl:ok]' pivot='key' type='ordinal' />
            <column-instance column='[src]' derivation='None' name='[none:src:nk]' pivot='key' type='nominal' />
            <column-instance column='[timeperiod]' derivation='None' name='[none:timeperiod:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_4890829192148691]' derivation='Sum' name='[pcto:sum:Calculation_4890829192148691:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-field='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:gl:ok]' ordering-type='Field' type='PctTotal' />
            </column-instance>
            <column caption='Scenario' datatype='string' name='[src]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;2010_04_ZZZ\\modelfiles\\avgload5period.csv&quot;' value='Year 2010 (v 0.4)' />
                <alias key='&quot;2040_03_116\\modelfiles\\avgload5period.csv&quot;' value='Year 2040 Plan (v 0.3)' />
                <alias key='&quot;2040_03_127\\modelfiles\\avgload5period.csv&quot;' value='Year 2040 TIP 2015 (v 0.3)' />
              </aliases>
            </column>
            <column-instance column='[Calculation_4890829192148691]' derivation='Sum' name='[sum:Calculation_4890829192148691:qk]' pivot='key' type='quantitative' />
            <column caption='Time Period' datatype='string' name='[timeperiod]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;AM&quot;' value='AM Peak (6 am to 10 am)' />
                <alias key='&quot;EA&quot;' value='Early AM (3 am to 6 am)' />
                <alias key='&quot;EV&quot;' value='Evening (7 pm to 3 am)' />
                <alias key='&quot;MD&quot;' value='Midday (10 am to 3 pm)' />
                <alias key='&quot;PM&quot;' value='PM Peak (3 pm to 7 pm)' />
              </aliases>
            </column>
          </datasource-dependencies>
          <filter class='categorical' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\avgload5period.tde].[pcto:sum:Calculation_4890829192148691:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\avgload5period.tde].[sum:Calculation_4890829192148691:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\avgload5period.tde].[sum:Calculation_4890829192148691:qk]&quot;</bucket>
              <bucket>&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\avgload5period.tde].[pcto:sum:Calculation_4890829192148691:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:Calculation_7570828154404546:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Centroid&quot;</bucket>
              <bucket>&quot;Dummy&quot;</bucket>
              <bucket>&quot;Roadway&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:gl:ok]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:gl:ok]' />
              <groupfilter function='member' level='[none:gl:ok]' member='10.0' />
            </groupfilter>
          </filter>
          <sort class='alphabetic' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:gl:ok]' direction='ASC' />
          <filter class='categorical' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:timeperiod:nk]'>
            <groupfilter function='member' level='[none:timeperiod:nk]' member='&quot;AM&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:timeperiod:nk]</column>
            <column>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:gl:ok]</column>
            <column>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[pcto:sum:Calculation_4890829192148691:qk]' value='p0.0%' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows total='true'>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:gl:ok]</rows>
        <cols total='true'>([C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[:Measure Names] / [C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:Calculation_7570828154404546:nk])</cols>
        <pages>
          <column>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:src:nk]</column>
        </pages>
      </table>
    </worksheet>
    <worksheet name='Roadway Seat Miles by County'>
      <table>
        <view>
          <datasources>
            <datasource caption='avgload5period Extract' name='C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde'>
            <column caption='Roadway Seat Miles' datatype='real' name='[Calculation_6350905173822671]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[distance]*[lanes]*[cap]*[Parameters].[Parameter 1]*[Parameters].[Parameter 3]' scope-isolation='false' />
            </column>
            <column caption='Link Type' datatype='string' name='[Calculation_7570828154404546]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='If [a]&lt;=[Parameters].[Parameter 2] THEN&#13;&#10;  &apos;Centroid&apos;&#13;&#10;Elseif [b]&lt;=[Parameters].[Parameter 2] THEN&#13;&#10;  &apos;Centroid&apos;&#13;&#10;Elseif [ft]==6 THEN&#13;&#10;  &apos;Dummy&apos;&#13;&#10;Else&#13;&#10;  &apos;Roadway&apos;&#13;&#10;END' scope-isolation='false' />
              <aliases>
                <alias key='&quot;Dummy&quot;' value='Toll Plazas' />
              </aliases>
            </column>
            <column aggregation='Sum' caption='County' datatype='real' name='[gl]' role='dimension' type='ordinal'>
              <aliases>
                <alias key='1.0' value='San Francisco' />
                <alias key='2.0' value='San Mateo' />
                <alias key='3.0' value='Santa Clara' />
                <alias key='4.0' value='Alameda' />
                <alias key='5.0' value='Contra Costa' />
                <alias key='6.0' value='Solano' />
                <alias key='7.0' value='Napa' />
                <alias key='8.0' value='Sonoma' />
                <alias key='9.0' value='Marin' />
              </aliases>
            </column>
            <column-instance column='[Calculation_7570828154404546]' derivation='None' name='[none:Calculation_7570828154404546:nk]' pivot='key' type='nominal' />
            <column-instance column='[gl]' derivation='None' name='[none:gl:ok]' pivot='key' type='ordinal' />
            <column-instance column='[src]' derivation='None' name='[none:src:nk]' pivot='key' type='nominal' />
            <column-instance column='[timeperiod]' derivation='None' name='[none:timeperiod:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_6350905173822671]' derivation='Sum' name='[pcto:sum:Calculation_6350905173822671:qk:3]' pivot='key' type='quantitative'>
              <table-calc ordering-field='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:gl:ok]' ordering-type='Field' type='PctTotal' />
            </column-instance>
            <column caption='Scenario' datatype='string' name='[src]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;2010_04_ZZZ\\modelfiles\\avgload5period.csv&quot;' value='Year 2010 (v 0.4)' />
                <alias key='&quot;2040_03_116\\modelfiles\\avgload5period.csv&quot;' value='Year 2040 Plan (v 0.3)' />
                <alias key='&quot;2040_03_127\\modelfiles\\avgload5period.csv&quot;' value='Year 2040 TIP 2015 (v 0.3)' />
              </aliases>
            </column>
            <column-instance column='[Calculation_6350905173822671]' derivation='Sum' name='[sum:Calculation_6350905173822671:qk]' pivot='key' type='quantitative' />
            <column caption='Time Period' datatype='string' name='[timeperiod]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;AM&quot;' value='AM Peak (6 am to 10 am)' />
                <alias key='&quot;EA&quot;' value='Early AM (3 am to 6 am)' />
                <alias key='&quot;EV&quot;' value='Evening (7 pm to 3 am)' />
                <alias key='&quot;MD&quot;' value='Midday (10 am to 3 pm)' />
                <alias key='&quot;PM&quot;' value='PM Peak (3 pm to 7 pm)' />
              </aliases>
            </column>
          </datasource-dependencies>
          <filter class='categorical' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\avgload5period.tde].[sum:Calculation_6350905173822671:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\avgload5period.tde].[pcto:sum:Calculation_6350905173822671:qk:3]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\avgload5period.tde].[sum:Calculation_6350905173822671:qk]&quot;</bucket>
              <bucket>&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\avgload5period.tde].[pcto:sum:Calculation_6350905173822671:qk:3]&quot;</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:Calculation_7570828154404546:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Centroid&quot;</bucket>
              <bucket>&quot;Dummy&quot;</bucket>
              <bucket>&quot;Roadway&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:gl:ok]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:gl:ok]' />
              <groupfilter function='member' level='[none:gl:ok]' member='10.0' />
            </groupfilter>
          </filter>
          <sort class='alphabetic' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:gl:ok]' direction='ASC' />
          <filter class='categorical' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:timeperiod:nk]'>
            <groupfilter function='member' level='[none:timeperiod:nk]' member='&quot;AM&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:timeperiod:nk]</column>
            <column>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:gl:ok]</column>
            <column>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[pcto:sum:Calculation_6350905173822671:qk:3]' value='p0.0%' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows total='true'>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:gl:ok]</rows>
        <cols>([C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[:Measure Names] / [C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:Calculation_7570828154404546:nk])</cols>
        <pages>
          <column>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:src:nk]</column>
        </pages>
      </table>
    </worksheet>
    <worksheet name='VHT modelese'>
      <table>
        <view>
          <datasources>
            <datasource caption='avgload5period Extract' name='C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde'>
            <column caption='Average Travel Speed' datatype='real' name='[Calculation_4000829170355183]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='Sum([distance]*[vol_tot])/Sum([ctim]*[vol_tot]/60)' scope-isolation='false' />
            </column>
            <column caption='VHT' datatype='real' name='[Calculation_5810829165448827]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[ctim]*[vol_tot]/60' scope-isolation='false' />
            </column>
            <column caption='Facility Type' datatype='string' name='[Calculation_7550828155717668]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='If [ft]==1 THEN&#13;&#10;  &apos;Freeways&apos;&#13;&#10;Elseif [ft]==2 THEN&#13;&#10;  &apos;Freeways&apos;&#13;&#10;Elseif [ft]==3 THEN&#13;&#10;  &apos;Expressways&apos;&#13;&#10;Elseif [ft]==4 THEN&#13;&#10;  &apos;Collectors&apos;&#13;&#10;Elseif [ft]==5 THEN&#13;&#10;  &apos;Freeways&apos;&#13;&#10;Elseif [ft]==6 THEN&#13;&#10;  &apos;Other&apos;&#13;&#10;Elseif [ft]==7 THEN&#13;&#10;  &apos;Major Arterials&apos;&#13;&#10;Elseif [ft]==8 THEN&#13;&#10;  &apos;Freeways&apos;&#13;&#10;Elseif [ft]==8 THEN&#13;&#10;  &apos;Other&apos;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Link Type' datatype='string' name='[Calculation_7570828154404546]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='If [a]&lt;=[Parameters].[Parameter 2] THEN&#13;&#10;  &apos;Centroid&apos;&#13;&#10;Elseif [b]&lt;=[Parameters].[Parameter 2] THEN&#13;&#10;  &apos;Centroid&apos;&#13;&#10;Elseif [ft]==6 THEN&#13;&#10;  &apos;Dummy&apos;&#13;&#10;Else&#13;&#10;  &apos;Roadway&apos;&#13;&#10;END' scope-isolation='false' />
              <aliases>
                <alias key='&quot;Dummy&quot;' value='Toll Plazas' />
              </aliases>
            </column>
            <column-instance column='[Calculation_7550828155717668]' derivation='None' name='[none:Calculation_7550828155717668:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_7570828154404546]' derivation='None' name='[none:Calculation_7570828154404546:nk]' pivot='key' type='nominal' />
            <column-instance column='[src]' derivation='None' name='[none:src:nk]' pivot='key' type='nominal' />
            <column-instance column='[timeperiod]' derivation='None' name='[none:timeperiod:nk]' pivot='key' type='nominal' />
            <column caption='Scenario' datatype='string' name='[src]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;2010_04_ZZZ\\modelfiles\\avgload5period.csv&quot;' value='Year 2010 (v 0.4)' />
                <alias key='&quot;2040_03_116\\modelfiles\\avgload5period.csv&quot;' value='Year 2040 Plan (v 0.3)' />
                <alias key='&quot;2040_03_127\\modelfiles\\avgload5period.csv&quot;' value='Year 2040 TIP 2015 (v 0.3)' />
              </aliases>
            </column>
            <column-instance column='[Calculation_5810829165448827]' derivation='Sum' name='[sum:Calculation_5810829165448827:qk]' pivot='key' type='quantitative' />
            <column caption='Time Period' datatype='string' name='[timeperiod]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;AM&quot;' value='AM Peak (6 am to 10 am)' />
                <alias key='&quot;EA&quot;' value='Early AM (3 am to 6 am)' />
                <alias key='&quot;EV&quot;' value='Evening (7 pm to 3 am)' />
                <alias key='&quot;MD&quot;' value='Midday (10 am to 3 pm)' />
                <alias key='&quot;PM&quot;' value='PM Peak (3 pm to 7 pm)' />
              </aliases>
            </column>
            <column-instance column='[Calculation_4000829170355183]' derivation='User' name='[usr:Calculation_4000829170355183:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\avgload5period.tde].[usr:Calculation_4000829170355183:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\avgload5period.tde].[sum:Calculation_5810829165448827:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\avgload5period.tde].[sum:Calculation_5810829165448827:qk]&quot;</bucket>
              <bucket>&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\avgload5period.tde].[usr:Calculation_4000829170355183:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:Calculation_7550828155717668:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Freeways&quot;</bucket>
              <bucket>&quot;Expressways&quot;</bucket>
              <bucket>&quot;Collectors&quot;</bucket>
              <bucket>&quot;Major Arterials&quot;</bucket>
              <bucket>%null%</bucket>
              <bucket>&quot;Other&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:Calculation_7570828154404546:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Centroid&quot;</bucket>
              <bucket>&quot;Dummy&quot;</bucket>
              <bucket>&quot;Road&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:timeperiod:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;EA&quot;</bucket>
              <bucket>&quot;AM&quot;</bucket>
              <bucket>&quot;MD&quot;</bucket>
              <bucket>&quot;PM&quot;</bucket>
              <bucket>&quot;EV&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <slices>
            <column>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[usr:Calculation_4000829170355183:qk]' value='n#,##0.0;-#,##0.0' />
            <format attr='width' field='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:Calculation_7550828155717668:nk]' value='78' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:timeperiod:nk]' value='136' />
            <format attr='height' field='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:Calculation_7550828155717668:nk]' value='32' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[:Measure Names] / [C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:timeperiod:nk])</rows>
        <cols total='true'>([C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:Calculation_7570828154404546:nk] / [C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:Calculation_7550828155717668:nk])</cols>
        <pages>
          <column>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:src:nk]</column>
        </pages>
        <subtotals>
          <column>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:Calculation_7570828154404546:nk]</column>
        </subtotals>
      </table>
    </worksheet>
    <worksheet name='VMT by Congestion'>
      <table>
        <view>
          <datasources>
            <datasource caption='avgload5period Extract' name='C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde' />
          </datasources>
          <datasource-dependencies datasource='C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde'>
            <column caption='VMT' datatype='real' name='[Calculation_4420828151331817]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[vol_tot]*[distance]' scope-isolation='false' />
            </column>
            <column caption='Congestion (volume over capacity)' datatype='string' name='[Calculation_5010829191108792]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [vc] &lt;= 0.00001 THEN&#13;&#10;  &apos;0 (dummy)&apos;&#13;&#10;ELSEIF [vc] &lt;= 0.75 THEN&#13;&#10;  &apos;Light&#13;&#10;(v/c &lt; 0.75)&apos;&#13;&#10;ELSEIF [vc] &lt;= 1.0 THEN&#13;&#10;  &apos;Moderate&#13;&#10;(0.75 &lt; v/c &lt; 1.00)&apos;&#13;&#10;ELSE&#13;&#10;  &apos;Heavy&#13;&#10;(v/c &gt; 1.00)&apos;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='VMT (Congestion non-dummy)' datatype='real' name='[Calculation_7680829191605709]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF  [Calculation_5010829191108792]==&apos;0 (dummy)&apos; THEN&#13;&#10;  0&#13;&#10;ELSE&#13;&#10;  [Calculation_4420828151331817]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column-instance column='[Calculation_5010829191108792]' derivation='None' name='[none:Calculation_5010829191108792:nk]' pivot='key' type='nominal' />
            <column-instance column='[src]' derivation='None' name='[none:src:nk]' pivot='key' type='nominal' />
            <column-instance column='[timeperiod]' derivation='None' name='[none:timeperiod:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_7680829191605709]' derivation='Sum' name='[pcto:sum:Calculation_7680829191605709:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
            <column caption='Scenario' datatype='string' name='[src]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;2010_04_ZZZ\\modelfiles\\avgload5period.csv&quot;' value='Year 2010 (v 0.4)' />
                <alias key='&quot;2040_03_116\\modelfiles\\avgload5period.csv&quot;' value='Year 2040 Plan (v 0.3)' />
                <alias key='&quot;2040_03_127\\modelfiles\\avgload5period.csv&quot;' value='Year 2040 TIP 2015 (v 0.3)' />
              </aliases>
            </column>
            <column-instance column='[Calculation_4420828151331817]' derivation='Sum' name='[sum:Calculation_4420828151331817:qk]' pivot='key' type='quantitative' />
            <column caption='Time Period' datatype='string' name='[timeperiod]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;AM&quot;' value='AM Peak (6 am to 10 am)' />
                <alias key='&quot;EA&quot;' value='Early AM (3 am to 6 am)' />
                <alias key='&quot;EV&quot;' value='Evening (7 pm to 3 am)' />
                <alias key='&quot;MD&quot;' value='Midday (10 am to 3 pm)' />
                <alias key='&quot;PM&quot;' value='PM Peak (3 pm to 7 pm)' />
              </aliases>
            </column>
          </datasource-dependencies>
          <filter class='categorical' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\avgload5period.tde].[sum:Calculation_4420828151331817:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\avgload5period.tde].[pcto:sum:Calculation_7680829191605709:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\avgload5period.tde].[sum:Calculation_4420828151331817:qk]&quot;</bucket>
              <bucket>&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\avgload5period.tde].[pcto:sum:Calculation_7680829191605709:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:Calculation_5010829191108792:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;0 (dummy)&quot;</bucket>
              <bucket>&quot;Light&#13;&#10;(v/c &lt; 0.75)&quot;</bucket>
              <bucket>&quot;Moderate&#13;&#10;(0.75 &lt; v/c &lt; 1.00)&quot;</bucket>
              <bucket>&quot;Heavy&#13;&#10;(v/c &gt; 1.00)&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:timeperiod:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;EA&quot;</bucket>
              <bucket>&quot;AM&quot;</bucket>
              <bucket>&quot;MD&quot;</bucket>
              <bucket>&quot;PM&quot;</bucket>
              <bucket>&quot;EV&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <slices>
            <column>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[pcto:sum:Calculation_7680829191605709:qk]' value='p0.0%' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[:Measure Names] / [C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:timeperiod:nk])</rows>
        <cols total='true'>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:Calculation_5010829191108792:nk]</cols>
        <pages>
          <column>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:src:nk]</column>
        </pages>
      </table>
    </worksheet>
    <worksheet name='VMT by speed'>
      <table>
        <view>
          <datasources>
            <datasource caption='avgload5period Extract' name='C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde' />
          </datasources>
          <datasource-dependencies datasource='C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde'>
            <column caption='Share of Vehicle Miles Traveled' datatype='real' default-format='p0.00%' name='[Calculation1]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM(iif([ctim]&lt;0.1,[Calculation_4420828151331817],0)) / TOTAL(SUM(iif([ctim]&lt;0.1,[Calculation_4420828151331817],0)))' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='VMT (Speed Bin non-dummy)' datatype='real' name='[Calculation_1810829190347636]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Calculation_6500829184447940]==&apos;0 mph (dummy)&apos; THEN&#13;&#10;  0&#13;&#10;ELSE&#13;&#10;  [Calculation_4420828151331817]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='VMT' datatype='real' name='[Calculation_4420828151331817]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[vol_tot]*[distance]' scope-isolation='false' />
            </column>
            <column caption='Speed Bin' datatype='string' name='[Calculation_6500829184447940]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [cspd] &lt;= 0.1 THEN&#13;&#10;  &apos;0 mph (dummy)&apos;&#13;&#10;ELSEIF [cspd] &lt;= 7.5 THEN&#13;&#10;  &apos;1.0 to 7.5 mph&apos;&#13;&#10;ELSEIF [cspd] &lt;= 15 THEN&#13;&#10;  &apos;7.5 to 15 mph&apos;&#13;&#10;ELSEIF [cspd] &lt;= 30 THEN&#13;&#10;  &apos;15 to 30 mph&apos;&#13;&#10;ELSEIF [cspd] &lt;= 45 THEN&#13;&#10;  &apos;30 to 45 mph&apos;&#13;&#10;ELSEIF [cspd] &lt;= 60 THEN&#13;&#10;  &apos;45 to 60 mph&apos;&#13;&#10;ELSE&#13;&#10;  &apos;Faster than 60 mph&apos;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column-instance column='[Calculation_6500829184447940]' derivation='None' name='[none:Calculation_6500829184447940:nk]' pivot='key' type='nominal' />
            <column-instance column='[src]' derivation='None' name='[none:src:nk]' pivot='key' type='nominal' />
            <column-instance column='[timeperiod]' derivation='None' name='[none:timeperiod:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1810829190347636]' derivation='Sum' name='[pcto:sum:Calculation_1810829190347636:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
            <column caption='Scenario' datatype='string' name='[src]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;2010_04_ZZZ\\modelfiles\\avgload5period.csv&quot;' value='Year 2010 (v 0.4)' />
                <alias key='&quot;2040_03_116\\modelfiles\\avgload5period.csv&quot;' value='Year 2040 Plan (v 0.3)' />
                <alias key='&quot;2040_03_127\\modelfiles\\avgload5period.csv&quot;' value='Year 2040 TIP 2015 (v 0.3)' />
              </aliases>
            </column>
            <column-instance column='[Calculation_4420828151331817]' derivation='Sum' name='[sum:Calculation_4420828151331817:qk]' pivot='key' type='quantitative' />
            <column caption='Time Period' datatype='string' name='[timeperiod]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;AM&quot;' value='AM Peak (6 am to 10 am)' />
                <alias key='&quot;EA&quot;' value='Early AM (3 am to 6 am)' />
                <alias key='&quot;EV&quot;' value='Evening (7 pm to 3 am)' />
                <alias key='&quot;MD&quot;' value='Midday (10 am to 3 pm)' />
                <alias key='&quot;PM&quot;' value='PM Peak (3 pm to 7 pm)' />
              </aliases>
            </column>
            <column-instance column='[Calculation1]' derivation='User' name='[usr:Calculation1:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\avgload5period.tde].[sum:Calculation_4420828151331817:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\avgload5period.tde].[pcto:sum:Calculation_1810829190347636:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\avgload5period.tde].[sum:Calculation_4420828151331817:qk]&quot;</bucket>
              <bucket>&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\avgload5period.tde].[usr:Calculation1:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:timeperiod:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;EA&quot;</bucket>
              <bucket>&quot;AM&quot;</bucket>
              <bucket>&quot;MD&quot;</bucket>
              <bucket>&quot;PM&quot;</bucket>
              <bucket>&quot;EV&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <slices>
            <column>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[usr:Calculation1:qk]' value='p0.0%' />
            <format attr='text-format' field='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[pcto:sum:Calculation_1810829190347636:qk]' value='p0.0%' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[Multiple Values]' />
              <lod column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[sum:Calculation_4420828151331817:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[:Measure Names] / [C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:timeperiod:nk])</rows>
        <cols total='true'>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:Calculation_6500829184447940:nk]</cols>
        <pages>
          <column>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:src:nk]</column>
        </pages>
      </table>
    </worksheet>
    <worksheet name='VMT modelese'>
      <table>
        <view>
          <datasources>
            <datasource caption='avgload5period Extract' name='C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde'>
            <column caption='VMT' datatype='real' name='[Calculation_4420828151331817]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[vol_tot]*[distance]' scope-isolation='false' />
            </column>
            <column caption='Facility Type' datatype='string' name='[Calculation_7550828155717668]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='If [ft]==1 THEN&#13;&#10;  &apos;Freeways&apos;&#13;&#10;Elseif [ft]==2 THEN&#13;&#10;  &apos;Freeways&apos;&#13;&#10;Elseif [ft]==3 THEN&#13;&#10;  &apos;Expressways&apos;&#13;&#10;Elseif [ft]==4 THEN&#13;&#10;  &apos;Collectors&apos;&#13;&#10;Elseif [ft]==5 THEN&#13;&#10;  &apos;Freeways&apos;&#13;&#10;Elseif [ft]==6 THEN&#13;&#10;  &apos;Other&apos;&#13;&#10;Elseif [ft]==7 THEN&#13;&#10;  &apos;Major Arterials&apos;&#13;&#10;Elseif [ft]==8 THEN&#13;&#10;  &apos;Freeways&apos;&#13;&#10;Elseif [ft]==8 THEN&#13;&#10;  &apos;Other&apos;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Link Type' datatype='string' name='[Calculation_7570828154404546]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='If [a]&lt;=[Parameters].[Parameter 2] THEN&#13;&#10;  &apos;Centroid&apos;&#13;&#10;Elseif [b]&lt;=[Parameters].[Parameter 2] THEN&#13;&#10;  &apos;Centroid&apos;&#13;&#10;Elseif [ft]==6 THEN&#13;&#10;  &apos;Dummy&apos;&#13;&#10;Else&#13;&#10;  &apos;Roadway&apos;&#13;&#10;END' scope-isolation='false' />
              <aliases>
                <alias key='&quot;Dummy&quot;' value='Toll Plazas' />
              </aliases>
            </column>
            <column-instance column='[Calculation_7550828155717668]' derivation='None' name='[none:Calculation_7550828155717668:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_7570828154404546]' derivation='None' name='[none:Calculation_7570828154404546:nk]' pivot='key' type='nominal' />
            <column-instance column='[src]' derivation='None' name='[none:src:nk]' pivot='key' type='nominal' />
            <column-instance column='[timeperiod]' derivation='None' name='[none:timeperiod:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_4420828151331817]' derivation='Sum' name='[pcto:sum:Calculation_4420828151331817:qk:2]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Columns' type='PctTotal' />
            </column-instance>
            <column caption='Scenario' datatype='string' name='[src]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;2010_04_ZZZ\\modelfiles\\avgload5period.csv&quot;' value='Year 2010 (v 0.4)' />
                <alias key='&quot;2040_03_116\\modelfiles\\avgload5period.csv&quot;' value='Year 2040 Plan (v 0.3)' />
                <alias key='&quot;2040_03_127\\modelfiles\\avgload5period.csv&quot;' value='Year 2040 TIP 2015 (v 0.3)' />
              </aliases>
            </column>
            <column-instance column='[Calculation_4420828151331817]' derivation='Sum' name='[sum:Calculation_4420828151331817:qk]' pivot='key' type='quantitative' />
            <column caption='Time Period' datatype='string' name='[timeperiod]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;AM&quot;' value='AM Peak (6 am to 10 am)' />
                <alias key='&quot;EA&quot;' value='Early AM (3 am to 6 am)' />
                <alias key='&quot;EV&quot;' value='Evening (7 pm to 3 am)' />
                <alias key='&quot;MD&quot;' value='Midday (10 am to 3 pm)' />
                <alias key='&quot;PM&quot;' value='PM Peak (3 pm to 7 pm)' />
              </aliases>
            </column>
          </datasource-dependencies>
          <filter class='categorical' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\avgload5period.tde].[sum:Calculation_4420828151331817:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\avgload5period.tde].[pcto:sum:Calculation_4420828151331817:qk:2]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\avgload5period.tde].[sum:Calculation_4420828151331817:qk]&quot;</bucket>
              <bucket>&quot;[C:\\Users\\lzorn\\Documents\\2010_04_ZZZ\\summary\\avgload5period.tde].[pcto:sum:Calculation_4420828151331817:qk:2]&quot;</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:Calculation_7550828155717668:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Freeways&quot;</bucket>
              <bucket>&quot;Expressways&quot;</bucket>
              <bucket>&quot;Major Arterials&quot;</bucket>
              <bucket>&quot;Collectors&quot;</bucket>
              <bucket>%null%</bucket>
              <bucket>&quot;Other&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:Calculation_7570828154404546:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Centroid&quot;</bucket>
              <bucket>&quot;Dummy&quot;</bucket>
              <bucket>&quot;Roadway&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:timeperiod:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;EA&quot;</bucket>
              <bucket>&quot;AM&quot;</bucket>
              <bucket>&quot;MD&quot;</bucket>
              <bucket>&quot;PM&quot;</bucket>
              <bucket>&quot;EV&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <slices>
            <column>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[pcto:sum:Calculation_4420828151331817:qk:2]' value='p0.0%' />
            <format attr='height' field='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:timeperiod:nk]' value='22' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[:Measure Names]' value='80' />
            <format attr='width' field='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:timeperiod:nk]' value='144' />
            <format attr='height' field='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:Calculation_7550828155717668:nk]' value='32' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows total='true'>([C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[:Measure Names] / [C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:timeperiod:nk])</rows>
        <cols total='true'>([C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:Calculation_7570828154404546:nk] / [C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:Calculation_7550828155717668:nk])</cols>
        <pages>
          <column>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:src:nk]</column>
        </pages>
        <subtotals>
          <column>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:Calculation_7570828154404546:nk]</column>
        </subtotals>
      </table>
    </worksheet>
  </worksheets>
  <windows>
    <window class='schema' source-height='-1' />
    <window auto-hidden='0' class='worksheet' maximized='0' name='VMT modelese'>
      <cards>
        <edge name='left'>
          <strip size='202'>
            <card type='pages' />
            <card type='currpage' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='bottom'>
          <strip size='56'>
            <card type='caption' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[:Measure Names]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:Calculation_7550828155717668:nk]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:Calculation_7570828154404546:nk]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:ft:ok]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:src:nk]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:timeperiod:nk]</field>
          <field>[textscan.41879.461103888891].[none:Calculation_4320828142204452:nk]</field>
        </color-one-way>
      </highlight>
      <viewpoint>
      </viewpoint>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='VHT modelese'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='currpage' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='bottom'>
          <strip size='56'>
            <card type='caption' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[:Measure Names]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:Calculation_7550828155717668:nk]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:Calculation_7570828154404546:nk]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:src:nk]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:timeperiod:nk]</field>
        </color-one-way>
      </highlight>
      <viewpoint>
      </viewpoint>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Delay modelese'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='currpage' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='bottom'>
          <strip size='56'>
            <card type='caption' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[:Measure Names]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:Calculation_7550828155717668:nk]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:Calculation_7570828154404546:nk]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:src:nk]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:timeperiod:nk]</field>
        </color-one-way>
      </highlight>
      <viewpoint>
      </viewpoint>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='VMT by speed'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='currpage' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='bottom'>
          <strip size='56'>
            <card type='caption' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[:Measure Names]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:Calculation_6500829184447940:nk]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:src:nk]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:timeperiod:nk]</field>
        </color-one-way>
      </highlight>
      <viewpoint>
      </viewpoint>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='VMT by Congestion'>
      <cards>
        <edge name='left'>
          <strip size='195'>
            <card type='pages' />
            <card type='currpage' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[:Measure Names]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:Calculation_5010829191108792:nk]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:src:nk]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:timeperiod:nk]</field>
        </color-one-way>
      </highlight>
      <viewpoint>
      </viewpoint>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Roadway Lane Miles by County'>
      <cards>
        <edge name='left'>
          <strip size='185'>
            <card type='pages' />
            <card type='currpage' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='bottom'>
          <strip size='56'>
            <card type='caption' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[:Measure Names]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[Facility Type (group)]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:Calculation_7550828155717668:nk]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:Calculation_7570828154404546:nk]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:gl:ok]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:src:nk]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:timeperiod:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Roadway Seat Miles by County'>
      <cards>
        <edge name='left'>
          <strip size='185'>
            <card type='pages' />
            <card type='currpage' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='bottom'>
          <strip size='56'>
            <card type='caption' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[:Measure Names]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[Facility Type (group)]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:Calculation_7550828155717668:nk]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:Calculation_7570828154404546:nk]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:gl:ok]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:src:nk]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:timeperiod:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='AcrossScen Miles Table'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[:Measure Names]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:Calculation_7570828154404546:nk]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:gl:ok]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:src:nk]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:timeperiod:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='1' name='AcrossScen Miles Chart'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:src:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='bottom'>
          <strip size='56'>
            <card type='caption' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[:Measure Names]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:Calculation_7570828154404546:nk]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:src:nk]</field>
          <field>[C:\Users\lzorn\Documents\2010_04_ZZZ\summary\avgload5period.tde].[none:timeperiod:nk]</field>
        </color-one-way>
      </highlight>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='VMT modelese' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='VHT modelese' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Delay modelese' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='VMT by speed' width='192'>
      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
      6a0AAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='VMT by Congestion' width='192'>
      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
      X4L/D64pceVyBY9AAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Roadway Lane Miles by County' width='192'>
      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
      AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Roadway Seat Miles by County' width='192'>
      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
      RU5ErkJggg==
    </thumbnail>
    <thumbnail height='184' name='AcrossScen Miles Table' width='192'>
      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
      AElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='AcrossScen Miles Chart' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7EAAAOxAGVKw4b
      AAAQe0lEQVR4nO3daXAb533H8e/iWNwAAR6gCJAiKdGiJMdHZNmJ5MRNJ3GdpkmnaTvtTF50
      Jm3edNKZvPBMXnv6pm/6Jq/bTCae6auOx4mbNO6RpI6PkQ+dtCgptEgdvA8cBLC7wGK3L+SQ
      WlkwY4kELDz/z4zHK+yKzx8Qf3j2wT54VnNd10UIRfk6XYAQnSQBEEqTAIj7snhzjouXZ3Bc
      F/e2/zZWl7AaDp/2M+xApwsQD7abS2scnXyIt15/jfWFRaJDQxTn57F9AfYNZenPjnJkYqTT
      ZbakySBY3I/Fm3MUqjbRQBPb8bFRLJNOxnBcWF9b4+EnPkcy/Ol9n72nALiui6Zpe1GPtCvt
      trXNexoDGIax23VIu9JuR9rd00HwzQ8usVzYZO7adRzn1oDozv/Pzs5tbd87l9nfTvP+pRnc
      237+2vIClu3gurces60qZ957j8W10labrm2xsLy2CzX8jsUbr7/D6bfepNZs3qqlYVIo13ax
      jbu7cP4cV2Zmtp7v1nPcpTbnZqa5cvX2f0sXbJO3336bjVIVx/mwzd/td10KhYKnjvt5DdYW
      rnP6wvRHfofefON1pk6/RaHWxHEaLC6u/N7Pfc9OzlzX4dSptwj3jRKoF3nl5ZcZ3D9Go7xB
      OBxkqdwgl+3Dbdq89b8/49Fn/5qjI7332JrNtfkNnvnCMX7x81do1E0KBQvCAXz4Gd6XYals
      c2JigOTwQ9RXZ3j5N9dwbAN/IIzZsFle2eA73/k7YiH/fT7zBq/98lfoPof58hrFmzcZGJ5g
      9uo1Qj19fOuv/hT9PltoZWbqHS6vOhwbP838UgFfNEU6ncRydP7iT7583z/fMgw2aiVe+/lP
      SA7lwRfiz587ybX5ZYzSBugRLl6+TjJUBz3FxOGjlBamOfv+HA8/cpT8YB+zs9fYN/EYx4+O
      f+L2m3adQrHEf/77jyg2dKxGmG9+68945ze/Qgtq7Jsv4zaKWOublJp+RkeHCPiD/NFX/pBW
      J1Z7F4CmzWdPfhnXNrHNDLGeATLZfYQ1G8dxGCpWyKRi1MwGjWwvmdj9/FoEGc33cXHmBqP7
      RwhG4miOhtlsULc1UmFI1yE3McLU1DTJdJr88CjpZBjNH6Bc2CA3NIJvV/pDna999UtY6ATD
      LvlMlsH8fvp6+0mk03va5X725JcZL5bwuw182nVq4SzjQykcLbQrP18PR0n6Qxx97HHimX5i
      0TBaIMSTTx4n6Fg4rosejtOTCAM+rKbG+MFJUr3D9Pb10GjCcD7PcH7w3grwB8n0JPFFD5PT
      QkTjGXSfxnN//FU26y4EwoTDI2CZlGs22YEU9g5vN/c0CK7VakQikXt7EvehVqsRjUalXWl3
      19xTD+C6bkcGLJZldeTTCWm3e9u9pwBomtaRdwhA2pV2d5VMhRBKkwAIpUkAhNIkAEJpEgCh
      NAmAUJoEQChNAiCUJgEQSpMACKW1nArhNuu8/tYZDo9lmF+tUajZjOWz7B/Jt7M+IfZUyx5A
      8+sEA9DTk6CuxYhrBlNT01TrdUzTbGeNQuyZj50Md/ToEfzhEIcn0vi0IUY2K8R0HS0cbld9
      Quypjw1AIpEAIP7hBL1opDMzBIXYKzIIFkqTAAilSQCE0iQAQmkSAKE0CYBQmgRAKE0CIJQm
      ARBKkwAIpbWeDeo6XLp0hWjIh2E1qLshBvtSDAz0t7M+IfZU67lAbpOVtQ1SyShWpUS94bK2
      usbne1KYptmxlcOE2E0tA6D5gkwcGMPn1mkM5IgGNVZXVgnpOq7MBhVd4mNngw4N7fP8ubev
      b0+LEaLdZBAslCYBEEqTAAilSQCE0iQAQmkSAKE0CYBQmgRAKE0CIJQmARBK2/E2qXajjosP
      13Xx+334/f521CVEW+wYgHdPvUmlUqRk6kwePszhif04jtOO2oTYczsGoCcZR4v1sz+icf78
      GcbH89i23Y7ahNhzOwZg8pEntrYnJo8A4Or63lUkRBvJIFgoTQIglCYBEEqTAAilSQCE0iQA
      QmkSAKE0CYBQmgRAKE0CIJQmARBK23Eu0IXTb1OzTMpWkINjw4ztz7ejLiHaYscewLAsXH+M
      vqjGhfMXqNbrmKbZjtqE2HM79gBHH34Exx8i6IP9NYOYrqPJ4riiS+wYgFgitbUdll980WVk
      ECyUJgEQSpMACKVJAITSJABCaRIAoTQJgFCaBEAoTQIglCYBEErbcSrEwvUPWFkv4AQSDPX3
      MDiYbUddQrSFpwdwmg1mZ2dpNN2tx8J+jf7cKMbGIlPTMxgyG1R0EU8PUFqYY/rKb3H0DAdy
      H06Ci/QwlMkQDT7C+uo6IV3HlUlxokvcFgCXcs0iHI6TTmwvfpvJZABIpzOk05l21yfEnrrt
      FEgjk+mhXCxhNWT5c6EGzxjAqtZwMKkYzU7VI0RbeQKgR6JkB/fTl5JzfKEGTwB8fo3i+gZN
      1211vBBdxROAeq1KobRGsWx1qh4h2soTgFAsyfEnjhOPyi2QhBpuC4CLZTeZnpoiEJBboQo1
      eHqAq7NX2ZfNsLa22al6hGir2y6EaTw0eRRfQEePxDpXkRBt5OkBtLrBe2feY22j2ql6hGgr
      z1wgPRJms7RJOLI9CC6sLmHYLvWGSzoVI5VKfeSHCPGg8gSgWljHqBtsFKpk4rdCcHH6IpFo
      lEKxRiiR4fjjRzBNk2g02pGChdhNngD4giECPg1d3/4UKJfLYbo62X0BFm4s4Nd1WSJRdA3P
      bNC63SQRT6Lr2w+PHji0tZ3LDQNQb1t5QuwtzyB45oNpcH1srJQ6VY8QbeU5BTp05Bg1y6Zv
      oK9T9QjRVp7vA+jYXLsxR0HmAglFeKZC1Go1yptlHJkNKhThvRAWjPDw0UfpT8tHnEINnlOg
      VCrB+uoKhiXfCBNq8PQAteI6V65exTAbnapHiLbyfh8gkSQe0gkEZcE4oQbPIHhteZVkOo3T
      lFMgoQbvKVClxNLyCnXb6VQ9QrSVZxDcn+kjFNKw6hIAoQbPXKDVUgGrahOPBbcefffN10ik
      e/jgZpHJiXHGR/MdKFOIveHpAbLpNHWnTrW6/SlQ/2CW9bJFPhPh3JkzVGVxXNFFPD3AcqnC
      UHaInuT2F2KygzkGcmP4NRh7aJKYrqN10XToRrPBirHScn8mLOuhdjPPZLhisYxpmAT8298H
      CEfjW9u63n3LpcyV5/jmT7/Zcv8PvvQDnup7qo0ViXbyBODJk1/AdV18vi64DmCWYfqV1vtH
      n4b0/vbVIz6VPKtClBev8uvTF3j0s19iLPeAf/e3ugI/+fvW+//yRxIAccfiuNEY4UCYaCzU
      qXqEaCvPleDC6irzS/MYhnzpUajB0wMsLi+DA2hyIUyowXuTPCCRSBDSd7x5pBBd4Y67RDqg
      +dDQOlWPEG3leas/duIPOGKYxBKRTtUjRFt5pkJsLs3x6v/8gtl5WRZFqMFzChSOJ3GaGqlk
      90x1EOLjeE6B6pbJYG4YH9urQpRW5zk/fYmS4efwQwc4MDbc9iKF2CueHqBhWty4cYX10va6
      QAuLy1humP39cc6dOS2zQUVX8fQAvSPjfCPTQ3FzuweY/MzjHLBtNGD80OGumw0q1OaZDn19
      9gOKlQq9Awe2HtU0DT146wsywWDwzr8vxAPNMxkuNzzKoOYnrMsvulDDHWOATX79y18ydflq
      p+oRoq08ATDKZcxGjXiyt1P1CNFWngAEQzq9vYMk4zIdWqjBE4CAHqJaKtGwZWEsoQbPp0BL
      iwuUymWaTvuXR286TW5s3mi5vzfSix+5g73YXZ7rAGG/n57eFIZh714LtgVn/631/pHPw8Ak
      BavA11/+esvDXjjxAs/lntu9uoTgjo9BI/EkpeL7+AO7OB26YcB/fK/1/q/9MwxM7l57QnwC
      njFAJBYlHk0SCXff8idC3I0nAGZlEz2iYxhyfwChBs8geGG9iO4PkYxtP3xzboZypUqlESCX
      zZAb2teBMoXYG54eYLNcoVat4b9tZbhUT4riZo1mZY33p39LTWaDii7i+RTo+ImnMQ0DPbw9
      F8gy6xw8dISQHwobBSK6DjIbVHQJz6dA63PTvH7pBic//zQD6RgAfYO5rSNSqQd8tTgh7uBZ
      GMv2BYn4XFzkPsFCDZ5ToIHhMU5kBohEZVWIe9YwoHi99f7UMOhRDNtgsbLY8rCh+NAna3fh
      DLzxg9b7n/1HSOU5t3qOFy++2PKw7x//PjFin6ztB5gnANem3uXszRInTzxNNq3Oi7Crls7D
      vz7bev/fvAJjX2RqbYpvv/rtlof9+Ks/5lD80O/f7uYivP9S6/1ffB5SeZary7w692rLw777
      2HeJBdX5t/d8ClQs14hHfDTqMhlOqMGzLtCByUP4CRCNypVgoQZPD+DTNCqbFeymLI4r1OAJ
      gG2aJNIJLEtOgYQavN8IC4eJRpNkeqKdqkeItvIOgjcrXL/8PqWa1ep4IbqK50LYWqnGF048
      RrlQ61xFQrSR51OgXLaXxRIcGN1eFaJSKrBZrVIolrEs6RlEd/FcCOvfN0z/Pu/it/VGnSvn
      3mW94jKYH+HRIwdpNOT7AqI77HBDYJebszP0jX2Gw4fGWJ+/RtPn6477CAvBHT3AR2k8cvzk
      h9uDjB+YAKDpl9UZRHeQt3KhNAmAUJoEQChNAiCUJgEQSpMACKVJAITSdrgOIMSnVGEOrMrd
      9+lRyIwDcGPzBrXG3ee2RYNRCYB4QP3seZj577vvG34K/va/AHjhzRc4tXTqroc9OfiknAIJ
      tUkAhNJ2PAVavTHN1fkyC2tlHj4yycT48E5/RYgHxo49QDqTxh8d4NBIP2fffZuqLI4rusiO
      PYA/OsBjR0HD5cChw4R0HU0WxxVdYscAaJqPwIezn/0yDVp0GRkEC6VJAITSJABCaRIAoTQJ
      gFCaBEAoTQIglCYBEEqTAAilSQCE0nacCnH54nmq1SqmFmNksI98/hPevVCITzHNdd2PvSnw
      2XNnaRgGTbtB0XD44jMnMCsV9FCIqeXWs0L7Ixr7UmGchkXj0quEQiGazSZ20yak39puNm30
      /OM0E0MYdYPT66exbRvHcdB13bM9nhhnIDKA6wtwea31KtVDcR998RCNahHt2hsEAgHq9To+
      n29r2+/34c8fox7KYDomZ9fOYlkWgUAAv9/v2T4YP0g2kcW0XT4otF4UeCQVoCcSxCwsEVo5
      i6ZpGIZBOBJG49Z2JBKG/JMYWgTLZ3Fu9RyGYRCNRHFdF9M0iUQiuK7LZHKSbCpLyWhwrWS3
      bPdAOkgk6KNRmCe0fhHHadJoNAiFwh9u27de++HP0fRHKDVLXFi5QLPZJKSHPvJ6Hxs4Riqa
      Yq1isVBpfausQ30hfG6T6OIpgu/9y12PqYf7ML/yTwQCAX449UOmN6fvelwunuN7n/kelmWx
      ZGiUzLvfoSgWCpCLNAmFQmgLpzHXb9za1nyYpkEoFL71uhMiPPEMmqZx6vopTJ+JhkbNqBGJ
      3LoFsGEYDPUM7RyA4toyDX+EcECjWCyRH85j1GpEo+2/i0xN2v30tXv6Rfjpd+++r/cg/MN7
      ADz/f8+3vD3rRHqCl77xUkee746nQD192a3tRCKxp8UI0W4yCBZKkwAIpUkAhNIkAEJpEgCh
      NAmAUJoEQCjt/wHfGx+BAhfMfwAAAABJRU5ErkJggg==
    </thumbnail>
  </thumbnails>
</workbook>
