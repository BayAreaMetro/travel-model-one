<?xml version='1.0' encoding='utf-8' ?>

<workbook source-platform='win' version='8.3' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <!-- build 8200.14.0720.2105                                -->
  <preferences>
  </preferences>
  <datasources>
    <datasource caption='PerTripTravelTime Extract' inline='true' name='C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde' version='8.3'>
      <connection class='dataengine' dbname='C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde' schema='Extract' tablename='Extract'>
        <relation name='Extract (Extract.Extract)' table='[Extract].[Extract]' type='table' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>incQ</remote-name>
            <remote-type>4</remote-type>
            <local-name>[incQ]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>incQ</remote-alias>
            <ordinal>0</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>4</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>1.0</statistic>
              <statistic aggregation='Max' datatype='real'>4.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>incQ_label</remote-name>
            <remote-type>130</remote-type>
            <local-name>[incQ_label]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>incQ_label</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>4</approx-count>
            <scale>2</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='binary' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;$30k to $60k&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;More than $100k&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;wstr&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>trip_mode</remote-name>
            <remote-type>4</remote-type>
            <local-name>[trip_mode]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>trip_mode</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>17</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>1.0</statistic>
              <statistic aggregation='Max' datatype='real'>18.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>3</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>tour_purpose</remote-name>
            <remote-type>130</remote-type>
            <local-name>[tour_purpose]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>tour_purpose</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>17</approx-count>
            <scale>2</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='binary' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;atwork_business&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;work_very high&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>4</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;wstr&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>freq</remote-name>
            <remote-type>4</remote-type>
            <local-name>[freq]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>freq</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>1747</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>1.0</statistic>
              <statistic aggregation='Max' datatype='real'>1839412.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>num_participants</remote-name>
            <remote-type>4</remote-type>
            <local-name>[num_participants]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>num_participants</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>1741</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>1.0</statistic>
              <statistic aggregation='Max' datatype='real'>1839412.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>trvlTime</remote-name>
            <remote-type>5</remote-type>
            <local-name>[trvlTime]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>trvlTime</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>2503</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>7.1318681318681323</statistic>
              <statistic aggregation='Max' datatype='real'>114.015</statistic>
            </statistics>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>time_fail</remote-name>
            <remote-type>4</remote-type>
            <local-name>[time_fail]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>time_fail</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>65</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>0.0</statistic>
              <statistic aggregation='Max' datatype='real'>154.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>5</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>src</remote-name>
            <remote-type>130</remote-type>
            <local-name>[src]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>src</remote-alias>
            <ordinal>8</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>3</approx-count>
            <scale>2</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='binary' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;2010_04_ZZZ&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;2040_03_127&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>0</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;wstr&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[:Measure Names]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;[C:\\Users\\lzorn\\Documents\\AcrossScenarios\\PerTripTravelTime.tde].[pcto:sum:freq:qk]&quot;' value='Share' />
        </aliases>
      </column>
      <column caption='Simple Travel Mode' datatype='string' name='[Calculation_0180919155350154]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [trip_mode] &lt;=6 THEN&#13;&#10; &apos;Automobile&apos;&#13;&#10;ELSEIF [trip_mode]=7 THEN&#13;&#10; &apos;Walk&apos;&#13;&#10;ELSEIF [trip_mode]=8 THEN&#13;&#10; &apos;Bicycle&apos;&#13;&#10;ELSE &#13;&#10; &apos;Transit&apos;&#13;&#10;END' scope-isolation='false' />
      </column>
      <column caption='Tour Urgency' datatype='string' name='[Calculation_1210919154721266]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [Calculation_2800919154031518]&#13;&#10;WHEN &apos;At work&apos; THEN &apos;At work&apos;&#13;&#10;WHEN &apos;Work&apos;    THEN &apos;Mandatory&apos;&#13;&#10;WHEN &apos;College&apos; THEN &apos;Mandatory&apos;&#13;&#10;WHEN &apos;School&apos;  THEN &apos;Mandatory&apos;&#13;&#10;WHEN &apos;Eat out&apos; THEN &apos;Non-mandatory&apos;&#13;&#10;WHEN &apos;Escort&apos;  THEN &apos;Non-mandatory&apos;&#13;&#10;WHEN &apos;Shopping&apos; THEN &apos;Non-mandatory&apos;&#13;&#10;WHEN &apos;Social&apos;   THEN &apos;Non-mandatory&apos;&#13;&#10;WHEN &apos;Other&apos;    THEN &apos;Non-mandatory&apos;&#13;&#10;END' scope-isolation='false' />
      </column>
      <column caption='Travel Mode detail' datatype='string' name='[Calculation_1500919153120996]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [trip_mode]=1 Or [trip_mode]=3 Or [trip_mode]=5 THEN&#13;&#10; &apos;-- free&apos;&#13;&#10;ELSEIF [trip_mode]=2 Or [trip_mode]=4 Or [trip_mode]=6 THEN&#13;&#10; &apos;-- pay&apos;&#13;&#10;ELSEIF [trip_mode]=9 Or [trip_mode]=14 THEN&#13;&#10; &apos;-- local bus&apos;&#13;&#10;ELSEIF [trip_mode]=10 or [trip_mode]=15 THEN&#13;&#10; &apos;-- light rail/ferry&apos;&#13;&#10;ELSEIF [trip_mode]=11 or [trip_mode]=16 THEN&#13;&#10; &apos;-- express bus&apos;&#13;&#10;ELSEIF [trip_mode]=12 or [trip_mode]=17 THEN&#13;&#10; &apos;-- heavy rail&apos;&#13;&#10;ELSEIF [trip_mode]=13 or [trip_mode]=18 THEN&#13;&#10; &apos;-- commuter rail&apos;&#13;&#10;ELSE&#13;&#10; &apos;&apos;&#13;&#10;END' scope-isolation='false' />
      </column>
      <column caption='Tour Purpose' datatype='string' name='[Calculation_2800919154031518]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [tour_purpose]&#13;&#10;WHEN &apos;atwork_business&apos; THEN &apos;At work&apos;&#13;&#10;WHEN &apos;atwork_eat&apos;      THEN &apos;At work&apos;&#13;&#10;WHEN &apos;atwork_maint&apos;    THEN &apos;At work&apos;&#13;&#10;WHEN &apos;eatout&apos;          THEN &apos;Eat out&apos;&#13;&#10;WHEN &apos;escort_kids&apos;     THEN &apos;Escort&apos;&#13;&#10;WHEN &apos;escort_no kids&apos;  THEN &apos;Escort&apos;&#13;&#10;WHEN &apos;othdiscr&apos;        THEN &apos;Other&apos;&#13;&#10;WHEN &apos;othmaint&apos;        THEN &apos;Other&apos;&#13;&#10;WHEN &apos;school_grade&apos;    THEN &apos;School&apos;&#13;&#10;WHEN &apos;school_high&apos;     THEN &apos;School&apos;&#13;&#10;WHEN &apos;shopping&apos;        THEN &apos;Shopping&apos;&#13;&#10;WHEN &apos;social&apos;          THEN &apos;Social&apos;&#13;&#10;WHEN &apos;university&apos;      THEN &apos;College&apos;&#13;&#10;WHEN &apos;work_high&apos;       THEN &apos;Work&apos;&#13;&#10;WHEN &apos;work_low&apos;        THEN &apos;Work&apos;&#13;&#10;WHEN &apos;work_med&apos;        THEN &apos;Work&apos;&#13;&#10;WHEN &apos;work_very high&apos;  THEN &apos;Work&apos;&#13;&#10;END' scope-isolation='false' />
      </column>
      <column caption='Average Travel Time per trip' datatype='real' name='[Calculation_3100919153931806]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([trvlTime]*[freq])/SUM([freq])' scope-isolation='false' />
      </column>
      <column caption='Travel Mode' datatype='string' name='[Calculation_7130919152735054]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [trip_mode] &#13;&#10;WHEN 1 THEN &apos;Drive alone&apos;&#13;&#10;WHEN 2 THEN &apos;Drive alone&apos;&#13;&#10;WHEN 3 THEN &apos;Shared ride 2&apos;&#13;&#10;WHEN 4 THEN &apos;Shared ride 2&apos;&#13;&#10;WHEN 5 THEN &apos;Shared ride 3+&apos;&#13;&#10;WHEN 6 THEN &apos;Shared ride 3+&apos;&#13;&#10;WHEN 7 THEN &apos;Walk&apos;&#13;&#10;WHEN 8 THEN &apos;Bicycle&apos;&#13;&#10;WHEN 9 THEN &apos;Walk to transit&apos;&#13;&#10;WHEN 10 THEN &apos;Walk to transit&apos;&#13;&#10;WHEN 11 THEN &apos;Walk to transit&apos;&#13;&#10;WHEN 12 THEN &apos;Walk to transit&apos;&#13;&#10;WHEN 13 THEN &apos;Walk to transit&apos;&#13;&#10;WHEN 14 THEN &apos;Drive to transit&apos;&#13;&#10;WHEN 15 THEN &apos;Drive to transit&apos;&#13;&#10;WHEN 16 THEN &apos;Drive to transit&apos;&#13;&#10;WHEN 17 THEN &apos;Drive to transit&apos;&#13;&#10;WHEN 18 THEN &apos;Drive to transit&apos;&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Trips' datatype='real' name='[freq]' role='measure' type='quantitative'>
      </column>
      <column aggregation='Sum' datatype='real' name='[incQ]' role='dimension' type='ordinal'>
      </column>
      <column caption='Income Quartile' datatype='string' name='[incQ_label]' role='dimension' type='nominal'>
      </column>
      <column aggregation='Sum' datatype='real' name='[trip_mode]' role='dimension' type='ordinal'>
      </column>
      <column-instance column='[freq]' derivation='Sum' name='[pcto:sum:freq:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Columns' type='PctTotal' />
      </column-instance>
      <layout dim-ordering='alphabetic' dim-percentage='0.5' measure-ordering='alphabetic' measure-percentage='0.4' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='Income,Mode'>
      <table>
        <view>
          <datasources>
            <datasource caption='PerTripTravelTime Extract' name='C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde' />
          </datasources>
          <datasource-dependencies datasource='C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde'>
            <column caption='Travel Mode detail' datatype='string' name='[Calculation_1500919153120996]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [trip_mode]=1 Or [trip_mode]=3 Or [trip_mode]=5 THEN&#13;&#10; &apos;-- free&apos;&#13;&#10;ELSEIF [trip_mode]=2 Or [trip_mode]=4 Or [trip_mode]=6 THEN&#13;&#10; &apos;-- pay&apos;&#13;&#10;ELSEIF [trip_mode]=9 Or [trip_mode]=14 THEN&#13;&#10; &apos;-- local bus&apos;&#13;&#10;ELSEIF [trip_mode]=10 or [trip_mode]=15 THEN&#13;&#10; &apos;-- light rail/ferry&apos;&#13;&#10;ELSEIF [trip_mode]=11 or [trip_mode]=16 THEN&#13;&#10; &apos;-- express bus&apos;&#13;&#10;ELSEIF [trip_mode]=12 or [trip_mode]=17 THEN&#13;&#10; &apos;-- heavy rail&apos;&#13;&#10;ELSEIF [trip_mode]=13 or [trip_mode]=18 THEN&#13;&#10; &apos;-- commuter rail&apos;&#13;&#10;ELSE&#13;&#10; &apos;&apos;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Average Travel Time per trip' datatype='real' name='[Calculation_3100919153931806]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([trvlTime]*[freq])/SUM([freq])' scope-isolation='false' />
            </column>
            <column caption='Travel Mode' datatype='string' name='[Calculation_7130919152735054]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [trip_mode] &#13;&#10;WHEN 1 THEN &apos;Drive alone&apos;&#13;&#10;WHEN 2 THEN &apos;Drive alone&apos;&#13;&#10;WHEN 3 THEN &apos;Shared ride 2&apos;&#13;&#10;WHEN 4 THEN &apos;Shared ride 2&apos;&#13;&#10;WHEN 5 THEN &apos;Shared ride 3+&apos;&#13;&#10;WHEN 6 THEN &apos;Shared ride 3+&apos;&#13;&#10;WHEN 7 THEN &apos;Walk&apos;&#13;&#10;WHEN 8 THEN &apos;Bicycle&apos;&#13;&#10;WHEN 9 THEN &apos;Walk to transit&apos;&#13;&#10;WHEN 10 THEN &apos;Walk to transit&apos;&#13;&#10;WHEN 11 THEN &apos;Walk to transit&apos;&#13;&#10;WHEN 12 THEN &apos;Walk to transit&apos;&#13;&#10;WHEN 13 THEN &apos;Walk to transit&apos;&#13;&#10;WHEN 14 THEN &apos;Drive to transit&apos;&#13;&#10;WHEN 15 THEN &apos;Drive to transit&apos;&#13;&#10;WHEN 16 THEN &apos;Drive to transit&apos;&#13;&#10;WHEN 17 THEN &apos;Drive to transit&apos;&#13;&#10;WHEN 18 THEN &apos;Drive to transit&apos;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Trips' datatype='real' name='[freq]' role='measure' type='quantitative'>
            </column>
            <column caption='Income Quartile' datatype='string' name='[incQ_label]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Calculation_1500919153120996]' derivation='None' name='[none:Calculation_1500919153120996:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_7130919152735054]' derivation='None' name='[none:Calculation_7130919152735054:nk]' pivot='key' type='nominal' />
            <column-instance column='[incQ_label]' derivation='None' name='[none:incQ_label:nk]' pivot='key' type='nominal' />
            <column-instance column='[src]' derivation='None' name='[none:src:nk]' pivot='key' type='nominal' />
            <column-instance column='[freq]' derivation='Sum' name='[pcto:sum:freq:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Columns' type='PctTotal' />
            </column-instance>
            <column datatype='string' name='[src]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[freq]' derivation='Sum' name='[sum:freq:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_3100919153931806]' derivation='User' name='[usr:Calculation_3100919153931806:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[C:\\Users\\lzorn\\Documents\\AcrossScenarios\\PerTripTravelTime.tde].[usr:Calculation_3100919153931806:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[C:\\Users\\lzorn\\Documents\\AcrossScenarios\\PerTripTravelTime.tde].[pcto:sum:freq:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[C:\\Users\\lzorn\\Documents\\AcrossScenarios\\PerTripTravelTime.tde].[sum:freq:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[C:\\Users\\lzorn\\Documents\\AcrossScenarios\\PerTripTravelTime.tde].[sum:freq:qk]&quot;</bucket>
              <bucket>&quot;[C:\\Users\\lzorn\\Documents\\AcrossScenarios\\PerTripTravelTime.tde].[pcto:sum:freq:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_7130919152735054:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Drive alone&quot;</bucket>
              <bucket>&quot;Shared ride 2&quot;</bucket>
              <bucket>&quot;Shared ride 3+&quot;</bucket>
              <bucket>&quot;Walk&quot;</bucket>
              <bucket>&quot;Bicycle&quot;</bucket>
              <bucket>&quot;Walk to transit&quot;</bucket>
              <bucket>&quot;Drive to transit&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:incQ_label:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Less than $30k&quot;</bucket>
              <bucket>&quot;$30k to $60k&quot;</bucket>
              <bucket>&quot;$60k to $100k&quot;</bucket>
              <bucket>&quot;More than $100k&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <slices>
            <column>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:incQ_label:nk]' value='99' />
            <format attr='text-format' field='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[pcto:sum:freq:qk]' value='p0.0%' />
            <format attr='text-format' field='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[usr:Calculation_3100919153931806:qk]' value='n#,##0.00;-#,##0.00' />
            <format attr='width' field='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[:Measure Names]' value='73' />
          </style-rule>
          <style-rule element='header'>
            <format attr='height' field='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:incQ_label:nk]' value='32' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[Multiple Values]' />
              <lod column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[pcto:sum:freq:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows total='true'>([C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_7130919152735054:nk] / [C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_1500919153120996:nk])</rows>
        <cols total='true'>([C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:incQ_label:nk] / [C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[:Measure Names])</cols>
        <pages>
          <column>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:src:nk]</column>
        </pages>
      </table>
    </worksheet>
    <worksheet name='Income,Purpose'>
      <table>
        <view>
          <datasources>
            <datasource caption='PerTripTravelTime Extract' name='C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde' />
          </datasources>
          <datasource-dependencies datasource='C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde'>
            <column caption='Tour Urgency' datatype='string' name='[Calculation_1210919154721266]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Calculation_2800919154031518]&#13;&#10;WHEN &apos;At work&apos; THEN &apos;At work&apos;&#13;&#10;WHEN &apos;Work&apos;    THEN &apos;Mandatory&apos;&#13;&#10;WHEN &apos;College&apos; THEN &apos;Mandatory&apos;&#13;&#10;WHEN &apos;School&apos;  THEN &apos;Mandatory&apos;&#13;&#10;WHEN &apos;Eat out&apos; THEN &apos;Non-mandatory&apos;&#13;&#10;WHEN &apos;Escort&apos;  THEN &apos;Non-mandatory&apos;&#13;&#10;WHEN &apos;Shopping&apos; THEN &apos;Non-mandatory&apos;&#13;&#10;WHEN &apos;Social&apos;   THEN &apos;Non-mandatory&apos;&#13;&#10;WHEN &apos;Other&apos;    THEN &apos;Non-mandatory&apos;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Tour Purpose' datatype='string' name='[Calculation_2800919154031518]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [tour_purpose]&#13;&#10;WHEN &apos;atwork_business&apos; THEN &apos;At work&apos;&#13;&#10;WHEN &apos;atwork_eat&apos;      THEN &apos;At work&apos;&#13;&#10;WHEN &apos;atwork_maint&apos;    THEN &apos;At work&apos;&#13;&#10;WHEN &apos;eatout&apos;          THEN &apos;Eat out&apos;&#13;&#10;WHEN &apos;escort_kids&apos;     THEN &apos;Escort&apos;&#13;&#10;WHEN &apos;escort_no kids&apos;  THEN &apos;Escort&apos;&#13;&#10;WHEN &apos;othdiscr&apos;        THEN &apos;Other&apos;&#13;&#10;WHEN &apos;othmaint&apos;        THEN &apos;Other&apos;&#13;&#10;WHEN &apos;school_grade&apos;    THEN &apos;School&apos;&#13;&#10;WHEN &apos;school_high&apos;     THEN &apos;School&apos;&#13;&#10;WHEN &apos;shopping&apos;        THEN &apos;Shopping&apos;&#13;&#10;WHEN &apos;social&apos;          THEN &apos;Social&apos;&#13;&#10;WHEN &apos;university&apos;      THEN &apos;College&apos;&#13;&#10;WHEN &apos;work_high&apos;       THEN &apos;Work&apos;&#13;&#10;WHEN &apos;work_low&apos;        THEN &apos;Work&apos;&#13;&#10;WHEN &apos;work_med&apos;        THEN &apos;Work&apos;&#13;&#10;WHEN &apos;work_very high&apos;  THEN &apos;Work&apos;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Average Travel Time per trip' datatype='real' name='[Calculation_3100919153931806]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([trvlTime]*[freq])/SUM([freq])' scope-isolation='false' />
            </column>
            <column caption='Trips' datatype='real' name='[freq]' role='measure' type='quantitative'>
            </column>
            <column caption='Income Quartile' datatype='string' name='[incQ_label]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Calculation_1210919154721266]' derivation='None' name='[none:Calculation_1210919154721266:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_2800919154031518]' derivation='None' name='[none:Calculation_2800919154031518:nk]' pivot='key' type='nominal' />
            <column-instance column='[incQ_label]' derivation='None' name='[none:incQ_label:nk]' pivot='key' type='nominal' />
            <column-instance column='[freq]' derivation='Sum' name='[sum:freq:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_3100919153931806]' derivation='User' name='[usr:Calculation_3100919153931806:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[C:\\Users\\lzorn\\Documents\\AcrossScenarios\\PerTripTravelTime.tde].[usr:Calculation_3100919153931806:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[C:\\Users\\lzorn\\Documents\\AcrossScenarios\\PerTripTravelTime.tde].[sum:freq:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_1210919154721266:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Mandatory&quot;</bucket>
              <bucket>&quot;At work&quot;</bucket>
              <bucket>&quot;Non-mandatory&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_2800919154031518:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;At work&quot;</bucket>
              <bucket>&quot;Work&quot;</bucket>
              <bucket>&quot;College&quot;</bucket>
              <bucket>&quot;Eat out&quot;</bucket>
              <bucket>&quot;Escort&quot;</bucket>
              <bucket>&quot;School&quot;</bucket>
              <bucket>&quot;Shopping&quot;</bucket>
              <bucket>&quot;Social&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:incQ_label:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Less than $30k&quot;</bucket>
              <bucket>&quot;$30k to $60k&quot;</bucket>
              <bucket>&quot;$60k to $100k&quot;</bucket>
              <bucket>&quot;More than $100k&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <slices>
            <column>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[usr:Calculation_3100919153931806:qk]' value='n#,##0.0;-#,##0.0' />
            <format attr='width' field='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:incQ_label:nk]' value='101' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows total='true'>([C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[:Measure Names] / ([C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_1210919154721266:nk] / [C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_2800919154031518:nk]))</rows>
        <cols total='true'>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:incQ_label:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Income,SimpleMode'>
      <table>
        <view>
          <datasources>
            <datasource caption='PerTripTravelTime Extract' name='C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde' />
          </datasources>
          <datasource-dependencies datasource='C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde'>
            <column caption='Simple Travel Mode' datatype='string' name='[Calculation_0180919155350154]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [trip_mode] &lt;=6 THEN&#13;&#10; &apos;Automobile&apos;&#13;&#10;ELSEIF [trip_mode]=7 THEN&#13;&#10; &apos;Walk&apos;&#13;&#10;ELSEIF [trip_mode]=8 THEN&#13;&#10; &apos;Bicycle&apos;&#13;&#10;ELSE &#13;&#10; &apos;Transit&apos;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Average Travel Time per trip' datatype='real' name='[Calculation_3100919153931806]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([trvlTime]*[freq])/SUM([freq])' scope-isolation='false' />
            </column>
            <column caption='Trips' datatype='real' name='[freq]' role='measure' type='quantitative'>
            </column>
            <column caption='Income Quartile' datatype='string' name='[incQ_label]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Calculation_0180919155350154]' derivation='None' name='[none:Calculation_0180919155350154:nk]' pivot='key' type='nominal' />
            <column-instance column='[incQ_label]' derivation='None' name='[none:incQ_label:nk]' pivot='key' type='nominal' />
            <column-instance column='[src]' derivation='None' name='[none:src:nk]' pivot='key' type='nominal' />
            <column-instance column='[freq]' derivation='Sum' name='[pcto:sum:freq:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Columns' type='PctTotal' />
            </column-instance>
            <column datatype='string' name='[src]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[freq]' derivation='Sum' name='[sum:freq:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_3100919153931806]' derivation='User' name='[usr:Calculation_3100919153931806:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[C:\\Users\\lzorn\\Documents\\AcrossScenarios\\PerTripTravelTime.tde].[sum:freq:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[C:\\Users\\lzorn\\Documents\\AcrossScenarios\\PerTripTravelTime.tde].[pcto:sum:freq:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[C:\\Users\\lzorn\\Documents\\AcrossScenarios\\PerTripTravelTime.tde].[usr:Calculation_3100919153931806:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[C:\\Users\\lzorn\\Documents\\AcrossScenarios\\PerTripTravelTime.tde].[sum:freq:qk]&quot;</bucket>
              <bucket>&quot;[C:\\Users\\lzorn\\Documents\\AcrossScenarios\\PerTripTravelTime.tde].[pcto:sum:freq:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_0180919155350154:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Automobile&quot;</bucket>
              <bucket>&quot;Walk&quot;</bucket>
              <bucket>&quot;Bicycle&quot;</bucket>
              <bucket>&quot;Transit&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:incQ_label:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Less than $30k&quot;</bucket>
              <bucket>&quot;$30k to $60k&quot;</bucket>
              <bucket>&quot;$60k to $100k&quot;</bucket>
              <bucket>&quot;More than $100k&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <slices>
            <column>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:incQ_label:nk]' value='99' />
            <format attr='text-format' field='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[pcto:sum:freq:qk]' value='p0.0%' />
            <format attr='text-format' field='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[usr:Calculation_3100919153931806:qk]' value='n#,##0.00;-#,##0.00' />
            <format attr='width' field='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[:Measure Names]' value='73' />
          </style-rule>
          <style-rule element='header'>
            <format attr='height' field='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:incQ_label:nk]' value='32' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[Multiple Values]' />
              <lod column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[pcto:sum:freq:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows total='true'>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_0180919155350154:nk]</rows>
        <cols total='true'>([C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:incQ_label:nk] / [C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[:Measure Names])</cols>
        <pages>
          <column>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:src:nk]</column>
        </pages>
      </table>
    </worksheet>
    <worksheet name='Time by Purpose,Mode'>
      <table>
        <view>
          <datasources>
            <datasource caption='PerTripTravelTime Extract' name='C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde' />
          </datasources>
          <datasource-dependencies datasource='C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde'>
            <column caption='Tour Urgency' datatype='string' name='[Calculation_1210919154721266]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Calculation_2800919154031518]&#13;&#10;WHEN &apos;At work&apos; THEN &apos;At work&apos;&#13;&#10;WHEN &apos;Work&apos;    THEN &apos;Mandatory&apos;&#13;&#10;WHEN &apos;College&apos; THEN &apos;Mandatory&apos;&#13;&#10;WHEN &apos;School&apos;  THEN &apos;Mandatory&apos;&#13;&#10;WHEN &apos;Eat out&apos; THEN &apos;Non-mandatory&apos;&#13;&#10;WHEN &apos;Escort&apos;  THEN &apos;Non-mandatory&apos;&#13;&#10;WHEN &apos;Shopping&apos; THEN &apos;Non-mandatory&apos;&#13;&#10;WHEN &apos;Social&apos;   THEN &apos;Non-mandatory&apos;&#13;&#10;WHEN &apos;Other&apos;    THEN &apos;Non-mandatory&apos;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Travel Mode detail' datatype='string' name='[Calculation_1500919153120996]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [trip_mode]=1 Or [trip_mode]=3 Or [trip_mode]=5 THEN&#13;&#10; &apos;-- free&apos;&#13;&#10;ELSEIF [trip_mode]=2 Or [trip_mode]=4 Or [trip_mode]=6 THEN&#13;&#10; &apos;-- pay&apos;&#13;&#10;ELSEIF [trip_mode]=9 Or [trip_mode]=14 THEN&#13;&#10; &apos;-- local bus&apos;&#13;&#10;ELSEIF [trip_mode]=10 or [trip_mode]=15 THEN&#13;&#10; &apos;-- light rail/ferry&apos;&#13;&#10;ELSEIF [trip_mode]=11 or [trip_mode]=16 THEN&#13;&#10; &apos;-- express bus&apos;&#13;&#10;ELSEIF [trip_mode]=12 or [trip_mode]=17 THEN&#13;&#10; &apos;-- heavy rail&apos;&#13;&#10;ELSEIF [trip_mode]=13 or [trip_mode]=18 THEN&#13;&#10; &apos;-- commuter rail&apos;&#13;&#10;ELSE&#13;&#10; &apos;&apos;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Tour Purpose' datatype='string' name='[Calculation_2800919154031518]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [tour_purpose]&#13;&#10;WHEN &apos;atwork_business&apos; THEN &apos;At work&apos;&#13;&#10;WHEN &apos;atwork_eat&apos;      THEN &apos;At work&apos;&#13;&#10;WHEN &apos;atwork_maint&apos;    THEN &apos;At work&apos;&#13;&#10;WHEN &apos;eatout&apos;          THEN &apos;Eat out&apos;&#13;&#10;WHEN &apos;escort_kids&apos;     THEN &apos;Escort&apos;&#13;&#10;WHEN &apos;escort_no kids&apos;  THEN &apos;Escort&apos;&#13;&#10;WHEN &apos;othdiscr&apos;        THEN &apos;Other&apos;&#13;&#10;WHEN &apos;othmaint&apos;        THEN &apos;Other&apos;&#13;&#10;WHEN &apos;school_grade&apos;    THEN &apos;School&apos;&#13;&#10;WHEN &apos;school_high&apos;     THEN &apos;School&apos;&#13;&#10;WHEN &apos;shopping&apos;        THEN &apos;Shopping&apos;&#13;&#10;WHEN &apos;social&apos;          THEN &apos;Social&apos;&#13;&#10;WHEN &apos;university&apos;      THEN &apos;College&apos;&#13;&#10;WHEN &apos;work_high&apos;       THEN &apos;Work&apos;&#13;&#10;WHEN &apos;work_low&apos;        THEN &apos;Work&apos;&#13;&#10;WHEN &apos;work_med&apos;        THEN &apos;Work&apos;&#13;&#10;WHEN &apos;work_very high&apos;  THEN &apos;Work&apos;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Average Travel Time per trip' datatype='real' name='[Calculation_3100919153931806]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([trvlTime]*[freq])/SUM([freq])' scope-isolation='false' />
            </column>
            <column caption='Travel Mode' datatype='string' name='[Calculation_7130919152735054]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [trip_mode] &#13;&#10;WHEN 1 THEN &apos;Drive alone&apos;&#13;&#10;WHEN 2 THEN &apos;Drive alone&apos;&#13;&#10;WHEN 3 THEN &apos;Shared ride 2&apos;&#13;&#10;WHEN 4 THEN &apos;Shared ride 2&apos;&#13;&#10;WHEN 5 THEN &apos;Shared ride 3+&apos;&#13;&#10;WHEN 6 THEN &apos;Shared ride 3+&apos;&#13;&#10;WHEN 7 THEN &apos;Walk&apos;&#13;&#10;WHEN 8 THEN &apos;Bicycle&apos;&#13;&#10;WHEN 9 THEN &apos;Walk to transit&apos;&#13;&#10;WHEN 10 THEN &apos;Walk to transit&apos;&#13;&#10;WHEN 11 THEN &apos;Walk to transit&apos;&#13;&#10;WHEN 12 THEN &apos;Walk to transit&apos;&#13;&#10;WHEN 13 THEN &apos;Walk to transit&apos;&#13;&#10;WHEN 14 THEN &apos;Drive to transit&apos;&#13;&#10;WHEN 15 THEN &apos;Drive to transit&apos;&#13;&#10;WHEN 16 THEN &apos;Drive to transit&apos;&#13;&#10;WHEN 17 THEN &apos;Drive to transit&apos;&#13;&#10;WHEN 18 THEN &apos;Drive to transit&apos;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Trips' datatype='real' name='[freq]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[Calculation_1210919154721266]' derivation='None' name='[none:Calculation_1210919154721266:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1500919153120996]' derivation='None' name='[none:Calculation_1500919153120996:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_2800919154031518]' derivation='None' name='[none:Calculation_2800919154031518:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_7130919152735054]' derivation='None' name='[none:Calculation_7130919152735054:nk]' pivot='key' type='nominal' />
            <column-instance column='[src]' derivation='None' name='[none:src:nk]' pivot='key' type='nominal' />
            <column datatype='string' name='[src]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[freq]' derivation='Sum' name='[sum:freq:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_3100919153931806]' derivation='User' name='[usr:Calculation_3100919153931806:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[C:\\Users\\lzorn\\Documents\\AcrossScenarios\\PerTripTravelTime.tde].[usr:Calculation_3100919153931806:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[C:\\Users\\lzorn\\Documents\\AcrossScenarios\\PerTripTravelTime.tde].[sum:freq:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_1210919154721266:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Mandatory&quot;</bucket>
              <bucket>&quot;At work&quot;</bucket>
              <bucket>&quot;Non-mandatory&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_2800919154031518:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;At work&quot;</bucket>
              <bucket>&quot;Work&quot;</bucket>
              <bucket>&quot;College&quot;</bucket>
              <bucket>&quot;Eat out&quot;</bucket>
              <bucket>&quot;Escort&quot;</bucket>
              <bucket>&quot;School&quot;</bucket>
              <bucket>&quot;Shopping&quot;</bucket>
              <bucket>&quot;Social&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_7130919152735054:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Drive alone&quot;</bucket>
              <bucket>&quot;Shared ride 2&quot;</bucket>
              <bucket>&quot;Shared ride 3+&quot;</bucket>
              <bucket>&quot;Walk&quot;</bucket>
              <bucket>&quot;Bicycle&quot;</bucket>
              <bucket>&quot;Walk to transit&quot;</bucket>
              <bucket>&quot;Drive to transit&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <slices>
            <column>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[usr:Calculation_3100919153931806:qk]' value='n#,##0.0;-#,##0.0' />
          </style-rule>
          <style-rule element='header'>
            <format attr='height' field='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_2800919154031518:nk]' value='36' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[Multiple Values]' />
              <lod column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[sum:freq:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows total='true'>([C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[:Measure Names] / ([C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_7130919152735054:nk] / [C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_1500919153120996:nk]))</rows>
        <cols total='true'>([C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_1210919154721266:nk] / [C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_2800919154031518:nk])</cols>
        <pages>
          <column>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:src:nk]</column>
        </pages>
      </table>
    </worksheet>
  </worksheets>
  <windows>
    <window class='schema' source-height='-1' />
    <window auto-hidden='0' class='worksheet' maximized='0' name='Income,Mode'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='currpage' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='bottom'>
          <strip size='56'>
            <card type='caption' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_1500919153120996:nk]</field>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_7130919152735054:nk]</field>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:incQ_label:nk]</field>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:src:nk]</field>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:trip_mode:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Income,SimpleMode'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='currpage' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='bottom'>
          <strip size='56'>
            <card type='caption' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_0180919155350154:nk]</field>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_1500919153120996:nk]</field>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_7130919152735054:nk]</field>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:incQ_label:nk]</field>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:src:nk]</field>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:trip_mode:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Time by Purpose,Mode'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='currpage' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='bottom'>
          <strip size='56'>
            <card type='caption' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[:Measure Names]</field>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_1210919154721266:nk]</field>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_1500919153120996:nk]</field>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_2800919154031518:nk]</field>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_7130919152735054:nk]</field>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:src:nk]</field>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:tour_purpose:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='1' name='Income,Purpose'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[:Measure Names]</field>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_1210919154721266:nk]</field>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_2800919154031518:nk]</field>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:incQ_label:nk]</field>
        </color-one-way>
      </highlight>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Income,Mode' width='192'>
      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
      AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Income,SimpleMode' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Time by Purpose,Mode' width='192'>
      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
      TkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Income,Purpose' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
