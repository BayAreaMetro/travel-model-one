<?xml version='1.0' encoding='utf-8' ?>

<workbook source-platform='win' version='8.3' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <!-- build 8200.14.0720.2105                                -->
  <preferences>
  </preferences>
  <datasources>
    <datasource caption='PerTripTravelTime Extract' inline='true' name='C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde' version='8.3'>
      <connection class='dataengine' dbname='C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde' schema='Extract' tablename='Extract'>
        <relation name='Extract (Extract.Extract)' table='[Extract].[Extract]' type='table' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>incQ</remote-name>
            <remote-type>4</remote-type>
            <local-name>[incQ]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>incQ</remote-alias>
            <ordinal>0</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>4</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>1.0</statistic>
              <statistic aggregation='Max' datatype='real'>4.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>incQ_label</remote-name>
            <remote-type>130</remote-type>
            <local-name>[incQ_label]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>incQ_label</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>4</approx-count>
            <scale>2</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='binary' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;$30k to $60k&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;More than $100k&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>3</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;wstr&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>trip_mode</remote-name>
            <remote-type>4</remote-type>
            <local-name>[trip_mode]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>trip_mode</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>17</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>1.0</statistic>
              <statistic aggregation='Max' datatype='real'>18.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>4</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>tour_purpose</remote-name>
            <remote-type>130</remote-type>
            <local-name>[tour_purpose]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>tour_purpose</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>17</approx-count>
            <scale>2</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='binary' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;atwork_business&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;work_very high&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>5</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;wstr&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>freq</remote-name>
            <remote-type>4</remote-type>
            <local-name>[freq]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>freq</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>1747</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>1.0</statistic>
              <statistic aggregation='Max' datatype='real'>1839412.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>num_participants</remote-name>
            <remote-type>4</remote-type>
            <local-name>[num_participants]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>num_participants</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>1741</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>1.0</statistic>
              <statistic aggregation='Max' datatype='real'>1839412.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>trvlTime</remote-name>
            <remote-type>5</remote-type>
            <local-name>[trvlTime]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>trvlTime</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>2503</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>7.1318681318681323</statistic>
              <statistic aggregation='Max' datatype='real'>114.015</statistic>
            </statistics>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>time_fail</remote-name>
            <remote-type>4</remote-type>
            <local-name>[time_fail]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>time_fail</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>65</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>0.0</statistic>
              <statistic aggregation='Max' datatype='real'>154.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>6</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>src</remote-name>
            <remote-type>130</remote-type>
            <local-name>[src]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>src</remote-alias>
            <ordinal>8</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>3</approx-count>
            <scale>2</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='binary' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;2010_04_ZZZ&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;2040_03_127&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>0</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;wstr&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Scenario</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Scenario]</local-name>
            <parent-name>[Extract (Extract.Extract)]</parent-name>
            <remote-alias>Scenario</remote-alias>
            <ordinal>9</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>3</approx-count>
            <scale>2</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='binary' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;2010 Base (v0.4)&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;2040 Holy Moly!&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;wstr&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[:Measure Names]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;[C:\\Users\\lzorn\\Documents\\AcrossScenarios\\PerTripTravelTime.tde].[pcto:sum:freq:qk]&quot;' value='Share' />
        </aliases>
      </column>
      <column caption='Simple Travel Mode' datatype='string' name='[Calculation_0180919155350154]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [trip_mode] &lt;=6 THEN&#13;&#10; &apos;Automobile&apos;&#13;&#10;ELSEIF [trip_mode]=7 THEN&#13;&#10; &apos;Walk&apos;&#13;&#10;ELSEIF [trip_mode]=8 THEN&#13;&#10; &apos;Bicycle&apos;&#13;&#10;ELSE &#13;&#10; &apos;Transit&apos;&#13;&#10;END' scope-isolation='false' />
      </column>
      <column caption='Tour Urgency' datatype='string' name='[Calculation_1210919154721266]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [Calculation_2800919154031518]&#13;&#10;WHEN &apos;At work&apos; THEN &apos;At work&apos;&#13;&#10;WHEN &apos;Work&apos;    THEN &apos;Mandatory&apos;&#13;&#10;WHEN &apos;College&apos; THEN &apos;Mandatory&apos;&#13;&#10;WHEN &apos;School&apos;  THEN &apos;Mandatory&apos;&#13;&#10;WHEN &apos;Eat out&apos; THEN &apos;Non-mandatory&apos;&#13;&#10;WHEN &apos;Escort&apos;  THEN &apos;Non-mandatory&apos;&#13;&#10;WHEN &apos;Shopping&apos; THEN &apos;Non-mandatory&apos;&#13;&#10;WHEN &apos;Social&apos;   THEN &apos;Non-mandatory&apos;&#13;&#10;WHEN &apos;Other&apos;    THEN &apos;Non-mandatory&apos;&#13;&#10;END' scope-isolation='false' />
      </column>
      <column caption='Travel Mode detail' datatype='string' name='[Calculation_1500919153120996]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [trip_mode]=1 Or [trip_mode]=3 Or [trip_mode]=5 THEN&#13;&#10; &apos;-- free&apos;&#13;&#10;ELSEIF [trip_mode]=2 Or [trip_mode]=4 Or [trip_mode]=6 THEN&#13;&#10; &apos;-- pay&apos;&#13;&#10;ELSEIF [trip_mode]=9 Or [trip_mode]=14 THEN&#13;&#10; &apos;-- local bus&apos;&#13;&#10;ELSEIF [trip_mode]=10 or [trip_mode]=15 THEN&#13;&#10; &apos;-- light rail/ferry&apos;&#13;&#10;ELSEIF [trip_mode]=11 or [trip_mode]=16 THEN&#13;&#10; &apos;-- express bus&apos;&#13;&#10;ELSEIF [trip_mode]=12 or [trip_mode]=17 THEN&#13;&#10; &apos;-- heavy rail&apos;&#13;&#10;ELSEIF [trip_mode]=13 or [trip_mode]=18 THEN&#13;&#10; &apos;-- commuter rail&apos;&#13;&#10;ELSE&#13;&#10; &apos;&apos;&#13;&#10;END' scope-isolation='false' />
      </column>
      <column caption='Tour Purpose' datatype='string' name='[Calculation_2800919154031518]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [tour_purpose]&#13;&#10;WHEN &apos;atwork_business&apos; THEN &apos;At work&apos;&#13;&#10;WHEN &apos;atwork_eat&apos;      THEN &apos;At work&apos;&#13;&#10;WHEN &apos;atwork_maint&apos;    THEN &apos;At work&apos;&#13;&#10;WHEN &apos;eatout&apos;          THEN &apos;Eat out&apos;&#13;&#10;WHEN &apos;escort_kids&apos;     THEN &apos;Escort&apos;&#13;&#10;WHEN &apos;escort_no kids&apos;  THEN &apos;Escort&apos;&#13;&#10;WHEN &apos;othdiscr&apos;        THEN &apos;Other&apos;&#13;&#10;WHEN &apos;othmaint&apos;        THEN &apos;Other&apos;&#13;&#10;WHEN &apos;school_grade&apos;    THEN &apos;School&apos;&#13;&#10;WHEN &apos;school_high&apos;     THEN &apos;School&apos;&#13;&#10;WHEN &apos;shopping&apos;        THEN &apos;Shopping&apos;&#13;&#10;WHEN &apos;social&apos;          THEN &apos;Social&apos;&#13;&#10;WHEN &apos;university&apos;      THEN &apos;College&apos;&#13;&#10;WHEN &apos;work_high&apos;       THEN &apos;Work&apos;&#13;&#10;WHEN &apos;work_low&apos;        THEN &apos;Work&apos;&#13;&#10;WHEN &apos;work_med&apos;        THEN &apos;Work&apos;&#13;&#10;WHEN &apos;work_very high&apos;  THEN &apos;Work&apos;&#13;&#10;END' scope-isolation='false' />
      </column>
      <column caption='Average Travel Time per trip' datatype='real' name='[Calculation_3100919153931806]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([trvlTime]*[freq])/SUM([freq])' scope-isolation='false' />
      </column>
      <column caption='Travel Mode' datatype='string' name='[Calculation_7130919152735054]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='CASE [trip_mode] &#13;&#10;WHEN 1 THEN &apos;Drive alone&apos;&#13;&#10;WHEN 2 THEN &apos;Drive alone&apos;&#13;&#10;WHEN 3 THEN &apos;Shared ride 2&apos;&#13;&#10;WHEN 4 THEN &apos;Shared ride 2&apos;&#13;&#10;WHEN 5 THEN &apos;Shared ride 3+&apos;&#13;&#10;WHEN 6 THEN &apos;Shared ride 3+&apos;&#13;&#10;WHEN 7 THEN &apos;Walk&apos;&#13;&#10;WHEN 8 THEN &apos;Bicycle&apos;&#13;&#10;WHEN 9 THEN &apos;Walk to transit&apos;&#13;&#10;WHEN 10 THEN &apos;Walk to transit&apos;&#13;&#10;WHEN 11 THEN &apos;Walk to transit&apos;&#13;&#10;WHEN 12 THEN &apos;Walk to transit&apos;&#13;&#10;WHEN 13 THEN &apos;Walk to transit&apos;&#13;&#10;WHEN 14 THEN &apos;Drive to transit&apos;&#13;&#10;WHEN 15 THEN &apos;Drive to transit&apos;&#13;&#10;WHEN 16 THEN &apos;Drive to transit&apos;&#13;&#10;WHEN 17 THEN &apos;Drive to transit&apos;&#13;&#10;WHEN 18 THEN &apos;Drive to transit&apos;&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Trips' datatype='real' name='[freq]' role='measure' type='quantitative'>
      </column>
      <column aggregation='Sum' datatype='real' name='[incQ]' role='dimension' type='ordinal'>
      </column>
      <column caption='Income Quartile' datatype='string' name='[incQ_label]' role='dimension' type='nominal'>
      </column>
      <column aggregation='Sum' datatype='real' name='[trip_mode]' role='dimension' type='ordinal'>
      </column>
      <column-instance column='[freq]' derivation='Sum' name='[pcto:sum:freq:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Columns' type='PctTotal' />
      </column-instance>
      <layout dim-ordering='alphabetic' dim-percentage='0.5' measure-ordering='alphabetic' measure-percentage='0.4' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='Income,Mode'>
      <table>
        <view>
          <datasources>
            <datasource caption='PerTripTravelTime Extract' name='C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde' />
          </datasources>
          <datasource-dependencies datasource='C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde'>
            <column caption='Travel Mode detail' datatype='string' name='[Calculation_1500919153120996]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [trip_mode]=1 Or [trip_mode]=3 Or [trip_mode]=5 THEN&#13;&#10; &apos;-- free&apos;&#13;&#10;ELSEIF [trip_mode]=2 Or [trip_mode]=4 Or [trip_mode]=6 THEN&#13;&#10; &apos;-- pay&apos;&#13;&#10;ELSEIF [trip_mode]=9 Or [trip_mode]=14 THEN&#13;&#10; &apos;-- local bus&apos;&#13;&#10;ELSEIF [trip_mode]=10 or [trip_mode]=15 THEN&#13;&#10; &apos;-- light rail/ferry&apos;&#13;&#10;ELSEIF [trip_mode]=11 or [trip_mode]=16 THEN&#13;&#10; &apos;-- express bus&apos;&#13;&#10;ELSEIF [trip_mode]=12 or [trip_mode]=17 THEN&#13;&#10; &apos;-- heavy rail&apos;&#13;&#10;ELSEIF [trip_mode]=13 or [trip_mode]=18 THEN&#13;&#10; &apos;-- commuter rail&apos;&#13;&#10;ELSE&#13;&#10; &apos;&apos;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Average Travel Time per trip' datatype='real' name='[Calculation_3100919153931806]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([trvlTime]*[freq])/SUM([freq])' scope-isolation='false' />
            </column>
            <column caption='Travel Mode' datatype='string' name='[Calculation_7130919152735054]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [trip_mode] &#13;&#10;WHEN 1 THEN &apos;Drive alone&apos;&#13;&#10;WHEN 2 THEN &apos;Drive alone&apos;&#13;&#10;WHEN 3 THEN &apos;Shared ride 2&apos;&#13;&#10;WHEN 4 THEN &apos;Shared ride 2&apos;&#13;&#10;WHEN 5 THEN &apos;Shared ride 3+&apos;&#13;&#10;WHEN 6 THEN &apos;Shared ride 3+&apos;&#13;&#10;WHEN 7 THEN &apos;Walk&apos;&#13;&#10;WHEN 8 THEN &apos;Bicycle&apos;&#13;&#10;WHEN 9 THEN &apos;Walk to transit&apos;&#13;&#10;WHEN 10 THEN &apos;Walk to transit&apos;&#13;&#10;WHEN 11 THEN &apos;Walk to transit&apos;&#13;&#10;WHEN 12 THEN &apos;Walk to transit&apos;&#13;&#10;WHEN 13 THEN &apos;Walk to transit&apos;&#13;&#10;WHEN 14 THEN &apos;Drive to transit&apos;&#13;&#10;WHEN 15 THEN &apos;Drive to transit&apos;&#13;&#10;WHEN 16 THEN &apos;Drive to transit&apos;&#13;&#10;WHEN 17 THEN &apos;Drive to transit&apos;&#13;&#10;WHEN 18 THEN &apos;Drive to transit&apos;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Scenario]' role='dimension' type='nominal'>
            </column>
            <column caption='Trips' datatype='real' name='[freq]' role='measure' type='quantitative'>
            </column>
            <column caption='Income Quartile' datatype='string' name='[incQ_label]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Calculation_1500919153120996]' derivation='None' name='[none:Calculation_1500919153120996:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_7130919152735054]' derivation='None' name='[none:Calculation_7130919152735054:nk]' pivot='key' type='nominal' />
            <column-instance column='[Scenario]' derivation='None' name='[none:Scenario:nk]' pivot='key' type='nominal' />
            <column-instance column='[incQ_label]' derivation='None' name='[none:incQ_label:nk]' pivot='key' type='nominal' />
            <column-instance column='[freq]' derivation='Sum' name='[pcto:sum:freq:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Columns' type='PctTotal' />
            </column-instance>
            <column-instance column='[freq]' derivation='Sum' name='[sum:freq:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_3100919153931806]' derivation='User' name='[usr:Calculation_3100919153931806:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[C:\\Users\\lzorn\\Documents\\AcrossScenarios\\PerTripTravelTime.tde].[sum:freq:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[C:\\Users\\lzorn\\Documents\\AcrossScenarios\\PerTripTravelTime.tde].[pcto:sum:freq:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[C:\\Users\\lzorn\\Documents\\AcrossScenarios\\PerTripTravelTime.tde].[usr:Calculation_3100919153931806:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[C:\\Users\\lzorn\\Documents\\AcrossScenarios\\PerTripTravelTime.tde].[sum:freq:qk]&quot;</bucket>
              <bucket>&quot;[C:\\Users\\lzorn\\Documents\\AcrossScenarios\\PerTripTravelTime.tde].[pcto:sum:freq:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_7130919152735054:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Drive alone&quot;</bucket>
              <bucket>&quot;Shared ride 2&quot;</bucket>
              <bucket>&quot;Shared ride 3+&quot;</bucket>
              <bucket>&quot;Walk&quot;</bucket>
              <bucket>&quot;Bicycle&quot;</bucket>
              <bucket>&quot;Walk to transit&quot;</bucket>
              <bucket>&quot;Drive to transit&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:incQ_label:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Less than $30k&quot;</bucket>
              <bucket>&quot;$30k to $60k&quot;</bucket>
              <bucket>&quot;$60k to $100k&quot;</bucket>
              <bucket>&quot;More than $100k&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <slices>
            <column>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:incQ_label:nk]' value='99' />
            <format attr='text-format' field='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[pcto:sum:freq:qk]' value='p0.0%' />
            <format attr='text-format' field='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[usr:Calculation_3100919153931806:qk]' value='n#,##0.00;-#,##0.00' />
            <format attr='width' field='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[:Measure Names]' value='73' />
          </style-rule>
          <style-rule element='header'>
            <format attr='height' field='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:incQ_label:nk]' value='32' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[Multiple Values]' />
              <lod column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[pcto:sum:freq:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows total='true'>([C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_7130919152735054:nk] / [C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_1500919153120996:nk])</rows>
        <cols total='true'>([C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:incQ_label:nk] / [C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[:Measure Names])</cols>
        <pages>
          <column>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Scenario:nk]</column>
        </pages>
      </table>
    </worksheet>
    <worksheet name='Income,Purpose'>
      <table>
        <view>
          <datasources>
            <datasource caption='PerTripTravelTime Extract' name='C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde' />
          </datasources>
          <datasource-dependencies datasource='C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde'>
            <column caption='Tour Urgency' datatype='string' name='[Calculation_1210919154721266]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Calculation_2800919154031518]&#13;&#10;WHEN &apos;At work&apos; THEN &apos;At work&apos;&#13;&#10;WHEN &apos;Work&apos;    THEN &apos;Mandatory&apos;&#13;&#10;WHEN &apos;College&apos; THEN &apos;Mandatory&apos;&#13;&#10;WHEN &apos;School&apos;  THEN &apos;Mandatory&apos;&#13;&#10;WHEN &apos;Eat out&apos; THEN &apos;Non-mandatory&apos;&#13;&#10;WHEN &apos;Escort&apos;  THEN &apos;Non-mandatory&apos;&#13;&#10;WHEN &apos;Shopping&apos; THEN &apos;Non-mandatory&apos;&#13;&#10;WHEN &apos;Social&apos;   THEN &apos;Non-mandatory&apos;&#13;&#10;WHEN &apos;Other&apos;    THEN &apos;Non-mandatory&apos;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Tour Purpose' datatype='string' name='[Calculation_2800919154031518]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [tour_purpose]&#13;&#10;WHEN &apos;atwork_business&apos; THEN &apos;At work&apos;&#13;&#10;WHEN &apos;atwork_eat&apos;      THEN &apos;At work&apos;&#13;&#10;WHEN &apos;atwork_maint&apos;    THEN &apos;At work&apos;&#13;&#10;WHEN &apos;eatout&apos;          THEN &apos;Eat out&apos;&#13;&#10;WHEN &apos;escort_kids&apos;     THEN &apos;Escort&apos;&#13;&#10;WHEN &apos;escort_no kids&apos;  THEN &apos;Escort&apos;&#13;&#10;WHEN &apos;othdiscr&apos;        THEN &apos;Other&apos;&#13;&#10;WHEN &apos;othmaint&apos;        THEN &apos;Other&apos;&#13;&#10;WHEN &apos;school_grade&apos;    THEN &apos;School&apos;&#13;&#10;WHEN &apos;school_high&apos;     THEN &apos;School&apos;&#13;&#10;WHEN &apos;shopping&apos;        THEN &apos;Shopping&apos;&#13;&#10;WHEN &apos;social&apos;          THEN &apos;Social&apos;&#13;&#10;WHEN &apos;university&apos;      THEN &apos;College&apos;&#13;&#10;WHEN &apos;work_high&apos;       THEN &apos;Work&apos;&#13;&#10;WHEN &apos;work_low&apos;        THEN &apos;Work&apos;&#13;&#10;WHEN &apos;work_med&apos;        THEN &apos;Work&apos;&#13;&#10;WHEN &apos;work_very high&apos;  THEN &apos;Work&apos;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Average Travel Time per trip' datatype='real' name='[Calculation_3100919153931806]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([trvlTime]*[freq])/SUM([freq])' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Scenario]' role='dimension' type='nominal'>
            </column>
            <column caption='Trips' datatype='real' name='[freq]' role='measure' type='quantitative'>
            </column>
            <column caption='Income Quartile' datatype='string' name='[incQ_label]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Calculation_1210919154721266]' derivation='None' name='[none:Calculation_1210919154721266:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_2800919154031518]' derivation='None' name='[none:Calculation_2800919154031518:nk]' pivot='key' type='nominal' />
            <column-instance column='[Scenario]' derivation='None' name='[none:Scenario:nk]' pivot='key' type='nominal' />
            <column-instance column='[incQ_label]' derivation='None' name='[none:incQ_label:nk]' pivot='key' type='nominal' />
            <column-instance column='[freq]' derivation='Sum' name='[sum:freq:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_3100919153931806]' derivation='User' name='[usr:Calculation_3100919153931806:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[C:\\Users\\lzorn\\Documents\\AcrossScenarios\\PerTripTravelTime.tde].[usr:Calculation_3100919153931806:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[C:\\Users\\lzorn\\Documents\\AcrossScenarios\\PerTripTravelTime.tde].[sum:freq:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_1210919154721266:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Mandatory&quot;</bucket>
              <bucket>&quot;At work&quot;</bucket>
              <bucket>&quot;Non-mandatory&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_2800919154031518:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;At work&quot;</bucket>
              <bucket>&quot;Work&quot;</bucket>
              <bucket>&quot;College&quot;</bucket>
              <bucket>&quot;Eat out&quot;</bucket>
              <bucket>&quot;Escort&quot;</bucket>
              <bucket>&quot;School&quot;</bucket>
              <bucket>&quot;Shopping&quot;</bucket>
              <bucket>&quot;Social&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:incQ_label:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Less than $30k&quot;</bucket>
              <bucket>&quot;$30k to $60k&quot;</bucket>
              <bucket>&quot;$60k to $100k&quot;</bucket>
              <bucket>&quot;More than $100k&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <slices>
            <column>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[usr:Calculation_3100919153931806:qk]' value='n#,##0.0;-#,##0.0' />
            <format attr='width' field='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:incQ_label:nk]' value='101' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows total='true'>([C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[:Measure Names] / ([C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_1210919154721266:nk] / [C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_2800919154031518:nk]))</rows>
        <cols total='true'>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:incQ_label:nk]</cols>
        <pages>
          <column>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Scenario:nk]</column>
        </pages>
      </table>
    </worksheet>
    <worksheet name='Income,SimpleMode'>
      <table>
        <view>
          <datasources>
            <datasource caption='PerTripTravelTime Extract' name='C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde' />
          </datasources>
          <datasource-dependencies datasource='C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde'>
            <column caption='Simple Travel Mode' datatype='string' name='[Calculation_0180919155350154]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [trip_mode] &lt;=6 THEN&#13;&#10; &apos;Automobile&apos;&#13;&#10;ELSEIF [trip_mode]=7 THEN&#13;&#10; &apos;Walk&apos;&#13;&#10;ELSEIF [trip_mode]=8 THEN&#13;&#10; &apos;Bicycle&apos;&#13;&#10;ELSE &#13;&#10; &apos;Transit&apos;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Average Travel Time per trip' datatype='real' name='[Calculation_3100919153931806]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([trvlTime]*[freq])/SUM([freq])' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Scenario]' role='dimension' type='nominal'>
            </column>
            <column caption='Trips' datatype='real' name='[freq]' role='measure' type='quantitative'>
            </column>
            <column caption='Income Quartile' datatype='string' name='[incQ_label]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Calculation_0180919155350154]' derivation='None' name='[none:Calculation_0180919155350154:nk]' pivot='key' type='nominal' />
            <column-instance column='[Scenario]' derivation='None' name='[none:Scenario:nk]' pivot='key' type='nominal' />
            <column-instance column='[incQ_label]' derivation='None' name='[none:incQ_label:nk]' pivot='key' type='nominal' />
            <column-instance column='[freq]' derivation='Sum' name='[pcto:sum:freq:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Columns' type='PctTotal' />
            </column-instance>
            <column-instance column='[freq]' derivation='Sum' name='[sum:freq:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_3100919153931806]' derivation='User' name='[usr:Calculation_3100919153931806:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[C:\\Users\\lzorn\\Documents\\AcrossScenarios\\PerTripTravelTime.tde].[sum:freq:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[C:\\Users\\lzorn\\Documents\\AcrossScenarios\\PerTripTravelTime.tde].[pcto:sum:freq:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[C:\\Users\\lzorn\\Documents\\AcrossScenarios\\PerTripTravelTime.tde].[usr:Calculation_3100919153931806:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[C:\\Users\\lzorn\\Documents\\AcrossScenarios\\PerTripTravelTime.tde].[sum:freq:qk]&quot;</bucket>
              <bucket>&quot;[C:\\Users\\lzorn\\Documents\\AcrossScenarios\\PerTripTravelTime.tde].[pcto:sum:freq:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_0180919155350154:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Automobile&quot;</bucket>
              <bucket>&quot;Walk&quot;</bucket>
              <bucket>&quot;Bicycle&quot;</bucket>
              <bucket>&quot;Transit&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:incQ_label:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Less than $30k&quot;</bucket>
              <bucket>&quot;$30k to $60k&quot;</bucket>
              <bucket>&quot;$60k to $100k&quot;</bucket>
              <bucket>&quot;More than $100k&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <slices>
            <column>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:incQ_label:nk]' value='99' />
            <format attr='text-format' field='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[pcto:sum:freq:qk]' value='p0.0%' />
            <format attr='text-format' field='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[usr:Calculation_3100919153931806:qk]' value='n#,##0.00;-#,##0.00' />
            <format attr='width' field='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[:Measure Names]' value='73' />
          </style-rule>
          <style-rule element='header'>
            <format attr='height' field='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:incQ_label:nk]' value='32' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[Multiple Values]' />
              <lod column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[pcto:sum:freq:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows total='true'>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_0180919155350154:nk]</rows>
        <cols total='true'>([C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:incQ_label:nk] / [C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[:Measure Names])</cols>
        <pages>
          <column>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Scenario:nk]</column>
        </pages>
      </table>
    </worksheet>
    <worksheet name='Time by Purpose,Mode'>
      <table>
        <view>
          <datasources>
            <datasource caption='PerTripTravelTime Extract' name='C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde' />
          </datasources>
          <datasource-dependencies datasource='C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde'>
            <column caption='Tour Urgency' datatype='string' name='[Calculation_1210919154721266]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [Calculation_2800919154031518]&#13;&#10;WHEN &apos;At work&apos; THEN &apos;At work&apos;&#13;&#10;WHEN &apos;Work&apos;    THEN &apos;Mandatory&apos;&#13;&#10;WHEN &apos;College&apos; THEN &apos;Mandatory&apos;&#13;&#10;WHEN &apos;School&apos;  THEN &apos;Mandatory&apos;&#13;&#10;WHEN &apos;Eat out&apos; THEN &apos;Non-mandatory&apos;&#13;&#10;WHEN &apos;Escort&apos;  THEN &apos;Non-mandatory&apos;&#13;&#10;WHEN &apos;Shopping&apos; THEN &apos;Non-mandatory&apos;&#13;&#10;WHEN &apos;Social&apos;   THEN &apos;Non-mandatory&apos;&#13;&#10;WHEN &apos;Other&apos;    THEN &apos;Non-mandatory&apos;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Travel Mode detail' datatype='string' name='[Calculation_1500919153120996]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [trip_mode]=1 Or [trip_mode]=3 Or [trip_mode]=5 THEN&#13;&#10; &apos;-- free&apos;&#13;&#10;ELSEIF [trip_mode]=2 Or [trip_mode]=4 Or [trip_mode]=6 THEN&#13;&#10; &apos;-- pay&apos;&#13;&#10;ELSEIF [trip_mode]=9 Or [trip_mode]=14 THEN&#13;&#10; &apos;-- local bus&apos;&#13;&#10;ELSEIF [trip_mode]=10 or [trip_mode]=15 THEN&#13;&#10; &apos;-- light rail/ferry&apos;&#13;&#10;ELSEIF [trip_mode]=11 or [trip_mode]=16 THEN&#13;&#10; &apos;-- express bus&apos;&#13;&#10;ELSEIF [trip_mode]=12 or [trip_mode]=17 THEN&#13;&#10; &apos;-- heavy rail&apos;&#13;&#10;ELSEIF [trip_mode]=13 or [trip_mode]=18 THEN&#13;&#10; &apos;-- commuter rail&apos;&#13;&#10;ELSE&#13;&#10; &apos;&apos;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Tour Purpose' datatype='string' name='[Calculation_2800919154031518]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [tour_purpose]&#13;&#10;WHEN &apos;atwork_business&apos; THEN &apos;At work&apos;&#13;&#10;WHEN &apos;atwork_eat&apos;      THEN &apos;At work&apos;&#13;&#10;WHEN &apos;atwork_maint&apos;    THEN &apos;At work&apos;&#13;&#10;WHEN &apos;eatout&apos;          THEN &apos;Eat out&apos;&#13;&#10;WHEN &apos;escort_kids&apos;     THEN &apos;Escort&apos;&#13;&#10;WHEN &apos;escort_no kids&apos;  THEN &apos;Escort&apos;&#13;&#10;WHEN &apos;othdiscr&apos;        THEN &apos;Other&apos;&#13;&#10;WHEN &apos;othmaint&apos;        THEN &apos;Other&apos;&#13;&#10;WHEN &apos;school_grade&apos;    THEN &apos;School&apos;&#13;&#10;WHEN &apos;school_high&apos;     THEN &apos;School&apos;&#13;&#10;WHEN &apos;shopping&apos;        THEN &apos;Shopping&apos;&#13;&#10;WHEN &apos;social&apos;          THEN &apos;Social&apos;&#13;&#10;WHEN &apos;university&apos;      THEN &apos;College&apos;&#13;&#10;WHEN &apos;work_high&apos;       THEN &apos;Work&apos;&#13;&#10;WHEN &apos;work_low&apos;        THEN &apos;Work&apos;&#13;&#10;WHEN &apos;work_med&apos;        THEN &apos;Work&apos;&#13;&#10;WHEN &apos;work_very high&apos;  THEN &apos;Work&apos;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column caption='Average Travel Time per trip' datatype='real' name='[Calculation_3100919153931806]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([trvlTime]*[freq])/SUM([freq])' scope-isolation='false' />
            </column>
            <column caption='Travel Mode' datatype='string' name='[Calculation_7130919152735054]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='CASE [trip_mode] &#13;&#10;WHEN 1 THEN &apos;Drive alone&apos;&#13;&#10;WHEN 2 THEN &apos;Drive alone&apos;&#13;&#10;WHEN 3 THEN &apos;Shared ride 2&apos;&#13;&#10;WHEN 4 THEN &apos;Shared ride 2&apos;&#13;&#10;WHEN 5 THEN &apos;Shared ride 3+&apos;&#13;&#10;WHEN 6 THEN &apos;Shared ride 3+&apos;&#13;&#10;WHEN 7 THEN &apos;Walk&apos;&#13;&#10;WHEN 8 THEN &apos;Bicycle&apos;&#13;&#10;WHEN 9 THEN &apos;Walk to transit&apos;&#13;&#10;WHEN 10 THEN &apos;Walk to transit&apos;&#13;&#10;WHEN 11 THEN &apos;Walk to transit&apos;&#13;&#10;WHEN 12 THEN &apos;Walk to transit&apos;&#13;&#10;WHEN 13 THEN &apos;Walk to transit&apos;&#13;&#10;WHEN 14 THEN &apos;Drive to transit&apos;&#13;&#10;WHEN 15 THEN &apos;Drive to transit&apos;&#13;&#10;WHEN 16 THEN &apos;Drive to transit&apos;&#13;&#10;WHEN 17 THEN &apos;Drive to transit&apos;&#13;&#10;WHEN 18 THEN &apos;Drive to transit&apos;&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Scenario]' role='dimension' type='nominal'>
            </column>
            <column caption='Trips' datatype='real' name='[freq]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[Calculation_1210919154721266]' derivation='None' name='[none:Calculation_1210919154721266:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1500919153120996]' derivation='None' name='[none:Calculation_1500919153120996:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_2800919154031518]' derivation='None' name='[none:Calculation_2800919154031518:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_7130919152735054]' derivation='None' name='[none:Calculation_7130919152735054:nk]' pivot='key' type='nominal' />
            <column-instance column='[Scenario]' derivation='None' name='[none:Scenario:nk]' pivot='key' type='nominal' />
            <column-instance column='[freq]' derivation='Sum' name='[sum:freq:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_3100919153931806]' derivation='User' name='[usr:Calculation_3100919153931806:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[C:\\Users\\lzorn\\Documents\\AcrossScenarios\\PerTripTravelTime.tde].[usr:Calculation_3100919153931806:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[C:\\Users\\lzorn\\Documents\\AcrossScenarios\\PerTripTravelTime.tde].[sum:freq:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_1210919154721266:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Mandatory&quot;</bucket>
              <bucket>&quot;At work&quot;</bucket>
              <bucket>&quot;Non-mandatory&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_2800919154031518:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;At work&quot;</bucket>
              <bucket>&quot;Work&quot;</bucket>
              <bucket>&quot;College&quot;</bucket>
              <bucket>&quot;Eat out&quot;</bucket>
              <bucket>&quot;Escort&quot;</bucket>
              <bucket>&quot;School&quot;</bucket>
              <bucket>&quot;Shopping&quot;</bucket>
              <bucket>&quot;Social&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <sort class='manual' column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_7130919152735054:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Drive alone&quot;</bucket>
              <bucket>&quot;Shared ride 2&quot;</bucket>
              <bucket>&quot;Shared ride 3+&quot;</bucket>
              <bucket>&quot;Walk&quot;</bucket>
              <bucket>&quot;Bicycle&quot;</bucket>
              <bucket>&quot;Walk to transit&quot;</bucket>
              <bucket>&quot;Drive to transit&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <slices>
            <column>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[usr:Calculation_3100919153931806:qk]' value='n#,##0.0;-#,##0.0' />
          </style-rule>
          <style-rule element='header'>
            <format attr='height' field='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_2800919154031518:nk]' value='36' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[Multiple Values]' />
              <lod column='[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[sum:freq:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows total='true'>([C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[:Measure Names] / ([C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_7130919152735054:nk] / [C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_1500919153120996:nk]))</rows>
        <cols total='true'>([C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_1210919154721266:nk] / [C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_2800919154031518:nk])</cols>
        <pages>
          <column>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Scenario:nk]</column>
        </pages>
      </table>
    </worksheet>
  </worksheets>
  <windows>
    <window class='schema' source-height='-1' />
    <window auto-hidden='0' class='worksheet' maximized='0' name='Income,Mode'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='currpage' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='bottom'>
          <strip size='56'>
            <card type='caption' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_1500919153120996:nk]</field>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_7130919152735054:nk]</field>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Scenario:nk]</field>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:incQ_label:nk]</field>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:src:nk]</field>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:trip_mode:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Income,SimpleMode'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='currpage' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='bottom'>
          <strip size='56'>
            <card type='caption' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_0180919155350154:nk]</field>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_1500919153120996:nk]</field>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_7130919152735054:nk]</field>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Scenario:nk]</field>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:incQ_label:nk]</field>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:src:nk]</field>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:trip_mode:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Time by Purpose,Mode'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='currpage' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='bottom'>
          <strip size='56'>
            <card type='caption' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[:Measure Names]</field>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_1210919154721266:nk]</field>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_1500919153120996:nk]</field>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_2800919154031518:nk]</field>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_7130919152735054:nk]</field>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Scenario:nk]</field>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:src:nk]</field>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:tour_purpose:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='1' name='Income,Purpose'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='currpage' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[:Measure Names]</field>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_1210919154721266:nk]</field>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Calculation_2800919154031518:nk]</field>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:Scenario:nk]</field>
          <field>[C:\Users\lzorn\Documents\AcrossScenarios\PerTripTravelTime.tde].[none:incQ_label:nk]</field>
        </color-one-way>
      </highlight>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Income,Mode' width='192'>
      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
      AABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Income,SimpleMode' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7EAAAOxAGVKw4b
      AAAgAElEQVR4nO3dZ3wb14Hv/d+gNwJgAdib2EUVqvduFUuy7MRFTrHi2LFTniTem+KU3ezm
      3rt3936yN8mNn8S7yW6cjROXWO62eq9UpygWsVeRYgUIEB2YmftCli05suylLYky5vtCHwkY
      TcP8Z+acOWeOIMuyjEIRp1S3egUUiltJCYAirikBUMQ1JQCKuKYEQBHXlAAo4poSAEVcUwKg
      iGtKABRxTQmAIq4pAVDENSUAirimBEAR15QAKOKaEgBFXFMCoIhrSgAUcU0JgCKuKQFQxDUl
      AIq4pgRAEdeUACjimhIARVxTAqCIa0oAFHFNCYAirikBuEGGh4eJxWK3ejUUH0IJwA3i8XiQ
      JOlWr4biQygBUMQ1JQCKuKYEQBHXlAAo4poSAEVcUwKgiGtKABRxTQmAIq4pAVDENSUAirim
      BEBxk4zSXbOVZ37xe7bVeW7KEgPdh/nT9joiURHq/8IPf/h/2T9w9TRKABQ3iUg44Gagt5+R
      oHgTljfEiVde5kCzG1EGAkN0dPTiiV49leYmrIlCcX1SkP7zR9m5bS9nekQcpfNZtWYJU3MF
      ug7vYNuuE7R4ZBLLVvCZ9QuZmBmjadtrvH2ojt6gipSpG/jC3bPITTS8e0Y///IveaX6Il7x
      jzw56uWHyyWQA9S/8jOOdPQgmvJY+cg3lCuA4tYL9dRy5HAtnuyVPPb4neSHqzlw4DRtdXVU
      Hj9Br2M+965fgO3iCY7WdDLUcJpdlWfwFd3FprumEqvdxaHGYXyR9+ZZsPohFmea0E68m+8/
      upBUjQoEF6Opa/n2E/eS5zrHlu2nlSuA4lYLM9jbRfv5E1S5q6neDZFgCPPkAobFIqx6A64T
      b/FcSxo5E+eyqDSDRGuIRI2Wmv3P8fuUNHInL2b2BDumK45mXYIds1aFoLeSkmhG0w3gZOqs
      UtLSgpRP+B1nhz1KABS3mowoiUimfOYtvZt7lhVjAVQaPXq9mlhqEo7cPew/cpaWo6/yqtaG
      bf1sPvvo42Qf3cmBo/XU73uOoCWNb6yZiMOivs6ydBj0GgRBg0YNSFElAIpbTY89MZkkvZ8L
      Qy6Gexs4uns3PSmLWFMuc2zbPgZylvGZb0zn3PObqfYH8ddv4Xe7z6KZdz+PfHcmO556nnZf
      CFGSgPcFQBaRRJFrFrtlSQmA4ubyd5/jzV98m61qAYC0qSu5+74NLFkxzBuvv8LPD8ukTLmD
      e+dMoTBXh9Hby0tvPcc/bw1jyJzHZ9dPpbDUgik4xJ+2PcXfvSBizl/BphVFJFmuPJxTKJmS
      ifG13/P1f/Twz3ddo3eeoEWQZVm+OZseX9ra2sjKykKn093qVRknZGRJQpJkrjrgBAGVSoUg
      y0iSdOk7QYVKJSAIgHTF5wio1CoEAPmKeV2eB+/8nyuWJ0oyoEKtkhElGZVag4CMLIlIqJQr
      gOJmERBUatQfVO8oCKhV1/hS9QGfC9eZ1xXL01wxzXt/FxDUGlQoD8IUcU4JgCKuKQFQxDUl
      AIq4pgRAEdeUACjimhIARVxTAqCIa0oAFHFNCYAirikBUMQ1JQCKuKYEQBHXlAAo4poSAEVc
      UwKgiGtKABRxTQmAIq4pAVDENSUAirimBEAR15QAKOKaEgBFXFMCoIhrSgAUcU0JgCKuKQFQ
      xDUlAIq4pgRAEdeUACjimhIARVxTAqCIa0oAFHFNCYAirikBUMQ1JQCKuKYEQBHXlAAo4poy
      TKoC2nfz682H6Rz0v++Lch74yUamWY3vHihS7Qv87d50vvPtpThu9nreAMpA2TfIbTVQdtjL
      gNtHJCbR/Pa/sFuzjs8tLsZuspCYnoTp8uDUgBx00ePVkpqagPaWrvQnQ7kCKEBvxZlmBWAk
      QYtem0JaRhYpFg0MHuCpnzdgLenm7MV5fHfdML/clc53v5nMnr/bg2Gpg3P7aiBtOp95+EGm
      mNw07Huel/a3EdCnM3HeWj6zdjJJ4/Rme5yulmLciPkZ7jtFX+omvvfoIlLDHvqGfETlIMO9
      9ZzqL+TL33qMOxKbeGnzfjpG6jhxeITyjd/mKxuKiZ7bzpGWyK3eig+kBEDxESSSV5BNmiPh
      ilsGAY02ldlLZ5Ofmc3EaSUYW3vw6JwkJ/Sw9y9/Yl+HjdkPbGJ5/vi9WVICoPgI1Kg1AoIg
      vO9zDXqDDpUgoNZqUYmgTy5izf/3U558YCa6rj385Y9/ZHvD+wvX44cSAMUYycRiPZw41kYw
      4qerto6hHAfGnkr+8tQevCXLuOvudUxJ9ODxR2/1yn4gpRCsGCMZlRxG27mF73/zDELmbO57
      fAV5SV7CFcd5+m++hk/joHDenWyaZL/VK/uBlGrQG+S2qga9gizGkAQVKuGdWx5ZQhQlBLUa
      AQFkEVGSEaPH+Lev/h7T3/wHX54iAwKqy9WlsoQoXTqsBEGFSqXir+6exgnlCqC4iqDWoL7q
      AxVqjerKCdCoJKSogEqlRqVSo3n/USSo0dwmN9fXvQLIsoxygRibjo4OMjIybrsrQLy5bgDC
      4TCdnZ03c30+NSRJQqW6TU6DcUwpA9wgt2sZIN4opyhFXFMCoIhrSi3QbUFGikUIjHrxRyQE
      jQGzxYJJr0a4cppoGL/fRyAsImiNWMxmjHoVUiSIz+cnFJVQ6cwkWIzotWoQw/i8owQjIrJK
      T4ItAYNWjerKKktZJOR14w3GkAQNJnsSVp2ALIXxuj0EYzKCSoshwYbVqEKKhvAOewkDCGq0
      Bgt2m/HqmqVx5OMFQIoS9Hlx+0QMCVbsCYYPv6TIIpFAgIhKh16vR3tDrkEyYizE6PAIYa2V
      5CTzFRsqEgn68HqjaK1WDFKAUb+IzmrHahifP5MsRXB3VbH79bc40RNEm1TArOUbWDsnG+Pl
      /SdFGGo5zp6dezjT5UVImsiS1WtYMtWB59xetu2tpKHfj9o5k3V3r2ZWURJS5zFee30/tRc8
      RLSZLHlwIysnZWC54kcRR9vZ9+JzHGj0EBXMFG34Oo8sTiXcdYhn/30L7UEBQW8jf9Hn+fKd
      2QQv7Oc//uEVupOt6HRJ5E5fy5c2ziDx1uy6D6X+6U9/+tOx/mfJ28Wpbc/wL7/bS6+QysTS
      jPd+kA8SHqRmzy6qR3TYnA4Sbkg7KRHfQA2v/PznvNGZzIw5eZjf/c5Pb+Nhtr52AndyCnLT
      Np577gSjaRMpSzN8YmvgdruxWq2o1Z9AqIIuLjTX06ydy2OPrCQj0MG5cx6SK0pxXt5/kX4a
      azoJ2mdz76ZlOAZqaekHe6qW7tp+TBPv4IH7Z6Kpr6Q96iAj20L79heoMixi06MPMtGzh21d
      VqYUZmIzXj5diPTt+h0vhlbx/b95mHWTguzfPkTB3HSan/85lZlf4398ZyPzslwcerEGy7xy
      zJ1nOTFczlf/93/j8yuXMHdSBsaPvwdumLFfAWQR73AfHW1dRGJq3J0ttLqnMjNFA1E/brcb
      n2wiKdGGKuDC5RMxJuiR2o6y6+gZQsUJZOdnk6TSEPa68PhCxFBjsCaTYjOhjY5wYSCAxqgi
      Gggjyjqsdj0h7yhhEQxJGaTbdSCLBN2DDHqCiLIKrclGisPyzjrKxMKjDF5oxxdTo7ckkpJk
      xJk/h3UPRNAlqegbeG+TpFgIv8eN2xskptJjsdmxJ5jQqW/tY0zB5KR4wWcoiAQY6alh0Cei
      t1kxX3ny0GcyfWUmFeFRhvvOMxTQYEiyYLIVsPS+AsTgCAO9NbijRiwWA3qNieR0J+YeL33d
      nQQiJtKc9ku3Ru8aob52lCkrHHh7O/EKFTz6rTQS6efMYITMKXkY1SpEuxVT5Cw9PVESLnYz
      bCoj0N5Gh9aELSkFu0nDOH0QPPYAyOII/ReaaBmxUzDFid7dxvnGfqamZKIdamDf5hc5Is3i
      wQdWYzzzMi8e8DD5jmmYLjbS1duH37OTI6np6DICnN2/h/P9AURZRpe7gA3rljBpZDu/+NdT
      JE7KRz/YTluHmvIlJUR7LtDT04lmxrf4u0enYXQ3c/Cll9jTGkSr1aAy57H8gQ1MTQCkMKMX
      zrJz80n6+6Pos+Zy78b5mNp3sfkv7eQ8+AAV725RjNHeOg7v3sfJFjchwUDm5AWsXD6PYqdx
      XNQWhN09nDu4ncoLNgpnpWCIiqC9+goTHWrl5P79nOo3MqnQjlGIARoiF2vYv+sQ9eEU5liN
      6IUo2gmTcDYcZs+rJ5ETJ7J4XgZmg4pLDRsARnANaxiu28JfOvrxB8C5/BEeXZlJbmk6h87s
      45yjCKH/Am7NKIk+CIkySWIT2/54ioDeQcncu1i/qADrOC1tjvF3lYmODNHb2kkweTKLF80n
      z+ajt7WV/uv1fUgoYvmSWZROyGPymk3cszCZniPbOTuSw+qvfI8fPL6CxI7dvHm0DVcgBviI
      OJfz2LfvY7JuiGO1BtY/8UMem2ema9chGmWJgSPP89wpkbmP/i0/+f4mZgpn2fzCfrojgAQG
      SwbzHvouX984HW1rJfuqeolda92igzRXVXKmHYqW3sMdk6z0VVVysr6bwNh20ifOlFrEsod+
      wFfXlRCp38nhptG/mkafWcHah/6Gb6xwMnD+BFWtLkTAOGERn3v8O3xlpkjNqTM0d9Zz8PUj
      +ArW8vgP/4GvV7jZu+MEbe4g4rtzixKN9HBRWMzjP/oHfvhgLvV/2UpDTEf5ui+zWFPDm6++
      xdGRVAqSjFhTUphx/9/y33/8A578u+/z5RVpXNy9i5qRm7iT/ovGFgA5gqu/m/r6fmSVFp3k
      QVLH6OtqorknjCwIIPDhl73Ri/QM+0gqnkR2cjK2CRMpdejo7ewmFIoAyRQXOTFYzRgFASE9
      myydBpvdemnmskxHawuCcwZzSxMwmNKZPiWdSH8z7W5Aa8CYWsCEFANGq5NETRBXTx9/fdgA
      o26GB/vpuNjGmQPbONrsQW9OwaoTuNX9meRYCO9QD52DfiRBh85gRqcJ4/cH35so5sc10E/f
      kI+YoMVoNqGTowRHh+jp7WfIE0QU9FgsJlSREAHvMK6gGVuSBYNeQ2JSIrH+AYYikSsC4CQ7
      V0+S04FRrcZgs2KKDuPyygT9UL7xe/zkx0+wscJAIJZPVmKQ4e4Wer0xUKlQ6TWoxQDB4DU2
      apwY04VJCrkZ7G6kyy0jm9s4vB8iozGi0V7aWruYM1WDTqNFFZEQoyHCkSjR9512ZVlG1hgx
      6bWEvSP4w2EioyN4QjKmJPNHLjxaEqzQNcygJ0qqJsCwO4jamIZFD25JJBb04g3FMEeDRGQ1
      epPx2p25NVp0Oh0pedNZvXEjM+0j9I+IWB1p3OrGvHLYQ8/5I+zttjNvYiKjF/tR24sozLMx
      OjSAL6TGnhiktfoMLW4d+UVOQl1ujGnZ5CVFaTp+BI/GRnZWIt6uII4Jk8nKy8JQ0ExVUx1n
      cSN0DJNYNoVcsxFpqI2WmINcRyKlcys4dLqSM44cVK0X0JbPpiRJon/by7w0MJeVU0y4W5qI
      ViygSOemefer1BiXMCMjylCnF13hNIrSbvEOvI4xBEAi6Bqgvb4DuWQJX3x8I1NsMp6WI7z1
      lzdoa22hq6KcFIcTY00PjTVVGHpc+KPv1LDojZgNMNzbQsfobPKLi2iurub0cRiQWmiMpTJn
      WhFWfd+Hr4pKRcHMZUw4f5o9OyvxpbioapIonTOPErtMtxghMNBM1Qkb5r4WPKY8KspzsAQu
      /PW8LMlk5hfiaOug/sQeXJEuWr1JzF2zhhT7J1c7NBYqcwp5E2cxY3An+3dXo02eQMX8ZUzL
      jNJ1uI6mXg2THlhI+RQfoaOHOb6nFpJLmLtoFhMLkohaRI4cPs6R3X406RUsWziJnBQbWatX
      ENp/lOrKZkRrMavunEamzUCwah9bLizg4ZWFOOfex13Db7Jv3z6i2kzWP7SEHJWa2OKNzHh5
      Cwf2gSWngg13TiHJEmPi4lUMbt3H3iYZS1oJc9fPJ3f89ogcS1ugGJ7eRo7tOY43Yz6rVpRi
      A+TRC9ScPMwZt5OZC+eS5qmm8shp2mJ2UowxQjErpXMXMCNP5PzBw5w834Nt+jqWlJrpOXuE
      qoYefJKJtGnLWDkzn6ShY/znti7yV93FvBwXh/99CzUZS/nanaUEzr7Ifx6ys+E7a5kg+uk+
      tpNdZzrxxPQk5U9j1ZrZJAY7qHxzG42kkyb00OWxkDl5AasXZxFoPcPRowM4FswnL3SeE2f9
      ZC1czowkF3WnKjlW00tQn8qkOfOZNSkX2xh+wJvTFijCYFMbvSNR0mdPxvkJzVXsO8iW1kJW
      zEjFPE6fjXxSlMZwN8jNCUCQwf5h/AEjWfnJn9hj/Wj7WRospRQnGdB/uo9/JQA3itIa9PYw
      Hqq3FYpbRgmAIq4pAVDEteuWm2RZRhTF602i+ACX910sds3nzopx4kMDoPyAYxeLxa7xNjXF
      eKLcAinimhIARVxTAqCIa+O0lbZiLGKBATrqa6lrHSRmyaBkyiSKsqwEu2qorm3moldCbcuh
      YkY5eU4r6lAf50+fpbHHg2jOomJuBXlJ5iu6qUp4245z9Fw37qCE1p7H7IWzyDL1UPnSEbre
      XbIKnSmdihXzyYh0UnX0DN1+AUtaIVNnTCHLMn7Ps9ftEnntWqAInr4mju87SUfUSpZTi7uz
      jsqde6kbjGBIyiAh2EXNiWPU9IskJKdgvkbMhhsPc+h0J6JFx0h9JQer+tElJ5Jg0n0qLkuj
      o6OYzR+9VevHJvvoravibF0P0QQ7sruTwaCA1a6mu/I4DUMxTHaR3nP1jOgyyEi34KrazanO
      ENoEK3JfHS0xB/mpdoyXExBsZc/Lx3DZHCRZNLjqj3DKk0ZFsQXfRS+i0YhBK+BrP0lNKJ8Z
      ZUn0HX+V/W1a0pI1DLfX0ymmU5prG7dn2jGsl0DU56a96iADnhQmFwv0NZ9iz/aDBAqDmLIm
      kii3c+74Cdz5Vsoqrj0Xb3cNx0/KqLKT0J0/yeEmJykTi8lKtny8LYpX/kHae0eIpExm+Ypy
      dMMd9Ad1JPgvcsotkFg6h+WzTZwb/hN1rhF8nh4a633Ypi5i3tRcNP2ZtETs6K/s/qk2kzVt
      IdOmFJNqlBkS6nnyWDv+u8uYujqNqVKMUH81b7QVsXjNLNLVAU4P9BFMXcqihWbObnmByl43
      Ejm3br98iDEEQIPZkkh6io724T4uDtoZvujCr7Ohll0M9PcypHPjjuhJTE4hIdhNdWUVtW1D
      RFRW8ipmU1Gafe1Zy6M0HzzCuV4Dk5ctoNhhQfdpuBzcBKLPw2jUz4C7icMvn2VUn82kGRVk
      CxfwC2oSDTp0OhNmk5ZIOEDU3UOfqCOh7TjbGg8T0+cwa/EEdFd2sdSlM2Ve+jv/kJAlkZTc
      TC6domTEWICO0wcZyLiTNbkJ6GKQPXEqtv27ePEVMypNIfPm5TCeW0ON4fAS0JvMpKRaEX19
      dLaPMOAJ4ygoocgiM3yxlS6Xm6BgIzlZw2DtKWpbPRjSUtGONHOk8iwdA75rzDfCxao9bN97
      in5MGLSaq99Po7iuaDhMcKAPXxhMGRkYR5s5d7aWLlcUZLiyxaMoisi+UUZHergYMeHIzMQ4
      fJo9p1oYCVxrMAuJYPtBtvUVc9+KQkwAskQs2E5VlZ4piwqxqSSiYQ+9nf1o00ooK8gl3RSj
      v9fFOO4QNrbbbZXRjDXVgSnQR1NzM8M+PfkTyylMVOPvaqCxYwTZnEhykoPE1DxyshJRB4YY
      cg1yYdCNLxD+65l6mzl26CQtmhLmzZlMjl2PRgnAR6bRaFFrErBnFDFtwRJmFCbgGeyg1xNB
      r9aguSIEFrMZrdmCIWzEWTyZGQsXM7dAR29jOwOBMFeX+iTc53fw+iE3OXOXMiPLBIAsSQTb
      z9GYPI2pDg0QIxS4QHP1KOlzlrFo/nRKnRE6TlbTNX5HSBpjeVNjwpKYTiIXaa2twaVKIbus
      kNRUG3J3Cw2No+iSnTgS/FzsauZ8Sz9hXQqpjkQsH9S5JOQDnRHZM8hQIEJMUo7+/wqNPZEU
      uwVDKEAgGiUSEdGo9eic6Tg1MWJeLz7fCG6PBpPZjCE9h5wkiVggTCwaIxyKoDKZMFwxJjCE
      6Dn6Gm/Vqpgwcy5zipO5/IITWRLpbajDUlqMTQBQoRL0aHUBvJ4gkiwRjYhIaNGO4x5hYyuc
      C3rMlhQcVonRixGEkiyyMp3oR9Kw6o/Q4EtlssNJijjIodYGOoKFrJmQR2y4HsHzAfO0lbBg
      3SQ8Rw9zorKO8gwrOYkf4U1zikuM6ZSWT8BVWcUrvz1ODBMTpk+nIHcCEW8n+07t4NkzEYJy
      JgvnO0m0JjFjSSm7j+/j+bNhQjED05aW4rTouXDoWZpTNjDffI7Xth2gzp9EX3c9lTsFhJT5
      PPTFWVglDz0XJLKn2d+JhBpjQg7TFhaz48Af+M1hFWpjChXLZ5E1jgsBY6ydUmEyW0lNc0K3
      GmtGJul6LVJiCimOBDRqG0kpyZhNMhkZ6Vg6a9m7xYU95kEMGPH4gyS/f5Z6O86cKczQ9PPM
      1qMcbyklpSINi1a5EnwkKgNJ+ZOZb3ZS4AogG2w4U1NJNhqQJs1lWcoERnwxVJYUMtNTMKi1
      GEvmsjQhl2FvGNmQSGZWGmadGilBwOMHKa2IOzY+xiJRem85xjRMgEprZeo9jyJnXi40C6gN
      dvJnrWFDeh/eiIA+IYm0DOe4fjPcdXuESZJEJHLtl4LI0SDe4T4ueGRsjjQyk0zIIS9DA30M
      RU04namkWAQCI0MMDLrwizoMOhlR0mF3OjGKwwyOyNiciai8gwwGdDgyHSRII3T3jKBJySbN
      bkB7m5aEe3p6cDqdaMfz9f8DDBzfTkfWQqamWeK7S+T1AqC4vts5AKERFzGzDZNG/amviRuv
      D+gUt5DBnnSrV+GmUcqYirimBEAR15QAKOLadcsAgiAo77UZo8v77nYsBMeTDw2A0qd17ARB
      UMYKHueUX0cR15QAKOKaEgBFXFMehMWB7sPP8vwbu6ntk4Fk5n3xK3x2yUQ051/nzy/v5lxv
      hOSZG3n8wYVMSL56TN/B3T/j716oIxC51B5o3hN/5BszIOqq5+XfPMXO1iiWvPk8+LVHmJ8S
      YqBuO//xzBYaPALJ+bNZ96WHWJlvuiXb/VGMMQAjtJ3azp9+/gYNlz9SG3FMXMTd936GZRmD
      7H/tZY6NFLHq/vuYmX69eX1UfWz7nz/hRdvD/O7rc983mqHig7kZ7BshZcYmfrR8KcVJIKhU
      qDyn+eObjSQs+yb/NDXIjl9tZt/ZIpIX5JH07nggIt3tLTjX/pgfrMvHoFEhqAQkKUzNa0/T
      UP4jfv09O337/8DTW05Teo+FQ1sPYlz7U/51DjTse4utW04w+ZtLGa+DxIx9lEhZQp8xifUP
      fo3Pz7TjbjrEmy+8xZH9GWQ/tIqlX3ySJbKAoJIvDYckye90yBAQVAKCLCPJXPq7AEgSkiyg
      UgnA1dNf/kwSRWKShPzO8iXpcjOmS9MoNVbXEBlmYFCN2pmA2SS8V7NnMpOg0+B/598CRox6
      FVdVWsldtLdCelkqapX6Uq2WAJLYxNlThaz6eQ4GPeStfoJ/UUXx9B5hoC+TyVOzMZvdJKXY
      0VX3MhiGNP0t2wPX9fFugWQJMRolEokQjcaQdBYsdju2WDP7nn2JoyPFrLn/HvJG9vPma1s4
      2uRGnTabuz63Ekfb27xeY2Llxs+yqFTF8X//Fa+4pvDopjvIHDnIM3/cSe1FP4JjFl/69kPM
      v6pftcxI3Ws8/fRbnB9Vk5A/ny99fRNz0nXjdjzaW8blYjg4xOndv+fwtt+iyVjAxs+vZ25R
      EUvXTuCZ557iB3+QKdzwCF+anIZV+94gqXh7uOA10vbyk3zjtxHUE1bwxBOfo0wzzEBUgud/
      yDOHBjFkz+K+rz3CTEMyicm91FR1Mme2zFB3O/3RFLyjwKcxAIGeOrY//SR71JfO0JbMKSzN
      zcYkvtfnVxqoZu/+g3SmrOSJTYX073ydw4fOs7Y8hzSxgeYLg5SZhqnrCZE7YxIOuZHNz+5i
      uOxh/vnHDqp++//z8qvHKX285L0FR8/xl1++jPpzv+WZhREOPP33/PnFQkr+21ISP84GfQrJ
      zunc/80KHlBr0DDKmZf/jQMna0gdDbNjay959/+AxyepOPKb/+DtY1buX1RMiumdACTM4au/
      mI1Wr0VFhOp//xa/emUKv1nrwxepQ8j5Z379Ox2NL/+C3716imlfr2Dxmtn89tn/xQ/2pTJh
      8gRKNAK6cXy3+rECYMqazPoHv87nZyUi+9o58tZLvLntDSyqOe++CcDvcjHi0eOckE5KRhFl
      X/w28yUVOr1AYqiX/zy1ixcPtNGXtoovz84l1budrqCFvOJ0TKZMVn77f7BI0mIyut5bcFsN
      VX6ZMrMJjd7C4q/+jHkqA+aPszGfUrGuo7xw6CJJRTOYX6xhNKTClGBGp5PRaAVi4QA+nw50
      EuFIFFkSiQRCyDoDur49/Mtv+1j11fWUmCO4QzpSsm1oU5eyZs4O9gW8BEYNhEQ1JqOW0Ggf
      1cfOU/jFn/KNtH7OHDpEy4K7mTGOz0ofKwCyGCXk8+ByyUT7e+jt92FwlJDusDD8zjQWRxpp
      qVDV3U57s57ao29zyJPPXfesYcbEMlIrX6eyKcSseQUk2swI5gmUpRyhrqaZi5kxOt/8v7zh
      X86T35z63psNcsuosO+l6uhBunKT2P+r33Cu5Bv80yPTubXjOY4/2pzZ3FG6gze3P81Pno1g
      L1vFA8vLycvWcm/Ez6tbfs8/vRAhueIeNs0rJMns4fBTf8C18hFWF6/gkVV/5ve//Hv+4FOT
      NPmzfPOuXFRqmTmff4zOX/+Gn+yIkZC7kC98dRapCWFmLZ/FH//8v/mfETslC9Zx7+K8cV3X
      PsYxwrx0Vu/j5d/uoPXyRyot9rzpLF+zjkX5o5za+janvRNYsv5O8v3H2LF1O1o7RxIAABI6
      SURBVJUNbmTHJFZtWMvCSdlYVM28/cs/sLUxmQ3f+TxLytIxAYH23Tz3/B5qe32oksq565HP
      sTA3zOFf/Yw3rBv52aYZRFtf4+lnDtHhB1vBUr781XsoHkeXgNt3jDCZkaNvcjprOfMzEzCO
      49uXT8ItGyRPDI0yMljN289uocVxB5s+s4Aix6fn/H37BiBM7YHT2GdWkG428Sk//m/dgzBf
      ywFe3nqMNrmQVQvLyUj69Bz8tzc9k5bMv9UrcdMow6TeILfvFSC+jOfyiUJxwykBUMS1Dx0k
      T7lDGjtJkpAk6cMnVNwyHxoA5b1AYyPLMtHotd60rBhPlFsgRVxTAqCIa0oAFHFN6RH2aSFH
      8bv66bnQhzskojGlkJGVgcNufHegkYi7m/aBKLa0dByqEZraexnxX1HGM6VTWpyJzah978wY
      89HT0kTPSAT0dnKKi0kzv/OtLBELD9PR0I0mbzp5dgAZKRrC23+BC2E7RQWO8doSGhhTAESC
      nkG6mlsYDF39jTExney8Apw3qk2Oq5VjjaNkTJ5MtlkgNNzGhWgGRenjt8vdzSL6+2mqPsap
      8wOIqhiBsJbMSQtYNLecDIsaIm5aT+7gpRMw7561LHYM0d5cT/dQAOQQ/S3thCasxZGTitV4
      +V1GMp7WQ+w60E5YFpCCQc4F7Dy8IA0NMpIYoq9mBy+9cIrcL08nzyYjRn0MNJ/h8P5KarUL
      +danLwASkaCb3pYGGgfcXOzowqV2UlCSTmaWgDX9BgbA30dT4wDaoklkmYc59/ZLHEv/Mk8o
      AUAKR8CSScWa5UzNFmjc/TIHOpvoLiwiw6LG1VZDY0sf7lDapVa1qVNYe+8UAEL9p9myNYmk
      uRVkJBiuaP/joW73SSJTv8ymeRnIrfvY3OVD4lKPvPDgeY4ebyd4+XIhRghcbOTUuSbaLo4g
      j9/BId81hgBosaWVsezBMub21rL31Tc4p5vHZ76ynFwgMNxN/YkO3FEVqA0kZ+aQavDT29HN
      wGgMlclBfmEe6ZYgHQ1tjGJACgXwh2KYM4sozXFg1vjprm+gc9hHFD2JuWWU59jRGlPIy9OS
      qA/SdXIb2/Y14p1xgoO5C1hcmvKJ75zbiTZ5AtOSJ1z6hxzCaLaRZDWg1wuEh9uoaXJjS03H
      EX3f2UkcoaWympGMGSzIsmO8cmC22AVaO1PImtvF8YPNoHewYu4EdLKMGBqgrrKK0YL5lI+8
      dWlcMVlCkDVYC+cwTxpk9zgeG+yyT7wMMNpTz+G3XqdFU0hByUQma2FosJWGDhcIAXr7YnT5
      17O6LMipXa9TG8ulMCuB0dZqBixzuPcLKymMVrHz9R30WnJJifRyscaLedNyCi5U8tyfW1id
      N4HCARcBGSLeAXpHQh++YvFCjuHrb6F3VEdqTilZZh+tZ5oZMWcxJVFP/cDIVZOLQ/Wc7rdR
      vjILu/l9XUqDHkaiLvxNHZhjMQL9x6kN2PjK8jRcNYeo9hexbEka1achAKA1YsmrYJ69hzPN
      N3GbP4YbVAukJSmvgmXrVzG3yIFem4Azp4DCHAfG8AW6e4fxXB4705LDzBXruXNWBlJXBz2+
      ACHXBbpcQQRzMg6nHaMYISJd+UTayqR1i8kXBFKmrefBuVk3ZjNuN3IET08LNWfbCCYXUDox
      D4unkbPn2+hqa6TmfDN9ve2cr22lZ9hPDJHBxgYCGblkJCagf//RoFKhio5A9gru+/wXeGCa
      hlM7T3FRusipLZX0RNzUHT5OszvEhXMHaBi6JVv9sdygAJgwmyxYLGpEUUKQ/Yy6Bugb8hER
      5avOMklOJ1aTlcTEBLQaNbIMxpxpLJxbhuHCCY7U9yGpfPh9MkqrjOsQAwx21FN9rgmPJY/S
      kiIyEjSgTSK/KBenVU3QHyIajRAKhYmKEuCmtSlEemoiFpP2r18oYM4mz6lDrQIVAiq1GpUk
      IQoaHBPnUmIJMTrqJxyTiAR9hMVrrNc4d8OrQf29DVRVVuHOW8aaaRmELnbQd8X3giCAICAI
      72XR7/ESU6VQviSPsovV7D54iDMz1zLlGtUJsiwjSVLcv4Q2MNjOmf3bqOxWk14QIzzcznln
      IeWlRcy7o4x5AO17Gd4+QMHMieQ5E9CEOun12HAkmNBfMRjhYN0eeqxzKctIpeKOMrrq9rK1
      34C/K0rFHTPIUmdTuHEj85AI+5rZ2tFIYM46pqbess0fsxt+1GjMVmwJesJ9TZytaWPQFyEQ
      8BMKf3AbI1nyM9DWRHPnIL6IQEJuBaWpOjRXra0dZ4aekbo9bDnbf6M3Y/xTG3FOKKdiSjGp
      ZtW1GzIm5jNr1mQKnQnvnPkSKV44jYJU61W3P5K7kaaLYaIxLZkz72RJaTIaQYW1bDn3LMq7
      ot+1gFqXQtniO5lyxcGvNljJmryY5TNzGO/1cx9rkLzo6CBdTc0MqDOZWJGLDfAPtNHc0EXM
      WUxJaQaWsJuulkZauoaJmayYpAiiJYvSHCOujjZ81lJKJqShGzrHqYYw6dPKyLULDNSfo6Hb
      RVBUYcmewsyJaZjd9ew45SZ/wQKKrREunD7Mub4omtyZrJ7svBH7Z8xu50Hy3Ge3UWdbxMxs
      C4ZP+aNSZZTIG+R2DsBodwehlAySDDrUn/I3jX3K860Yi4TsPBJu9UrcJPFdclTEPSUAirim
      BEAR165bBhBFkcHBwZu1Lp8qsVgMt9utvLJ9nLtuAFQqFXa7/Waty6dKOBwmISEBjUapZxjP
      rvvrqNVqEhLipT7gkzU4OIjZbFZejDXOKWUARVxTAqCIa8oN6m0mPNxO1bFjdBqms3ZFyRUP
      rKK426o5euAgZ7t9qJMKmLV4CbPLslB1HWLr3krqegIA5Cx4gDVzJ5KRABCj/8RrvNKTzT1L
      p5KRaLzGUkX81a/w1LE0Hn1sEU4BxEgvxze/xL6WUTSJ+cy95z6WZKsZ7atl56vbqXerSC6Y
      wfI7V1CaOM7Os7JExNfKnufe+BgBkCN4eho4tms3JzpcRDBgSy9l1qIFzCpLx/SJb/MwR3//
      b+y0rOfH905Gp1EhSyIX9z/N03vf1xhOn4Bz9n18e3XBB8wrhn+wlba2AchZxOQPGMVyoGYn
      u05exDFjBYumZnGtQ+OmCrvorj/Mll31JMwpInbld55OztW20G+azJ33JjFUfYwzRysxmleS
      3dPCAMlMX7GGEqceY1IGSUYg5qXt6FZe27qPs/Z1rJ5/jbfYiX46j73Oiy/vo1q9hjAgyyL9
      RzfzcksS9967HLlmO1s2HyL7q1NxHdlBl2MpG+ZGaTlzkm2HssjZUDZuGsXJskSov4o3/vQC
      B5s8Yw1AFFdnNXte20qbYRLL7l+HUxqg/mQle7cFELV3s7zY9smuORHc3a00271Il5svCSqS
      K+7h4Ww/wa69PPPsGXI/90PWF2vQ2a7TOC7sorv2MDtPxai4b9EHL3F0iN4LPQhFIW59U/cI
      w73ttFR3Y8lJ568acJkzmLrgDiaqTSRadbjD3TSc9uLx9WMY8KI1T6SwdBIljvfOTCO1Jzkf
      zSQnw0KL+AFNwtqOsmc4hxkTbZy9opeXVgwxItnJLSxE7FHhbQihMiZSsvSLZOmc2GMXcNUd
      pdYfGUf32TKyNMDJvXXYFswkq27PGAPgH6Kn7jhn3RbmbFzJrNIEdOSRkV3MrJAKi12g4/ib
      7DxQzWBUQDbnMW/5bLL99ezbd4p2j4SpYCF3r11AuVTNs6+dI2LVEezvZWDUwKR1G1k/PReb
      3MWeFzdzqMmFmFmC0x9BuqJWVhAE9EnZFNoj+MQq9Go19vRCCidc2thY0EXb8bd4fXcDw5KR
      jLLZ3LF2DtaeY2x58TBnA9AjG5BWLiBz5CTb9p9jIKIjY+oSVi5fiPUT2emfBJnwcA9t5+tw
      Z85iWrSDqvcnUmPCnnz5PBsh4I+SZLPhtEQZGArQ3rCNlnP70KWUcse61cwuSsWSP5MFeTq6
      hndxuO/9y3xH1izWO/WE9u9AaH7nmYagwlaxjjtP/ZH/8/eVmKx5bPjCIjI0OnQOJ2JvFX/5
      9Ss0GHKYd18O46keTFAlUbFqDVH1eZoZYyE47PfS39WPaM4hPz8BvVpAUOuxJKaSme7AZhQI
      +1z0tfYjpE1j1WdWUS50cKTOhXXmPWxaOxFt10mON/Tg8nrpv1jPeW8q89atZrJxgMqdx+n0
      jNKy/yW2VkUou2cTmxZacLtB/qjvmo36GKrfwXNvN6Cdfh8PfXY+tu6DvP7aKUJpZcxeXExm
      ZgnzV6wiN9ZMdfMQ2Su+yGcX5hJsOEHV+W7GS59uOeymp72eelc282blYLnusC0i3pYTnBvW
      klE2h4nZhSx44Cs88eR3eeJbX2VDgZdTJ07T2u9DbbZhtxjRqq7zsM5ox2kzXtUXQ5aitOzb
      zOmEO/jaNx7jc/P1nHnzEF1hAC2WlEmse+xhNkw307bzAI3jZUciIAg6rCnJmN7p/D+mK8Cl
      XljipS6KskCwt4YDWzez9dwIWCYwd+ViSgDMyaRm51Oc7cAamcFS2cT5uiq21NXS3CliCkeJ
      yQBWcosKyCsoxJD/NkdrfYTEIQYaexjJWMH84nwyLXrKHFto+IgPVmOhAD3153GrSli/agpl
      8gCx7irqT52jfbicVLsJvV7AlphGnmM6gqClunYfu87X0uJJxxGOII2TlsxR3wjd1QfYe3iE
      E5VqosEgQeNFNtuMPLi2/IorVYSh80c4cOYi+uKFzCxxYtCpEJIM7xSWZfTpNna2DjDg9RPN
      tIzh7Cwjy4O01HSRvuoHFOVp8Rsz0G/eS3XnBgqLVWh0FpJzcwj5GjhxsJGOASjL/8R2xydq
      TAHQG40kOqyIg0MMuyXK04pZdP9jOLJ28/bOVjz+MJIRUKtRq9WoVTJD9YfZvr0Kf+Ysliw1
      E9tdf8UctRj0OtRqPTrdpdHIkUWiUQlZo0WrFhC0egwa+KgtC2RZJhaNgVqP0ahFHdagN2iQ
      xRCRK0uPspfu2kNs2VqLunwJ8xckoDnTMZbdcsNo7dnMvv8HlN0lgqeTM5XHOBmbwpolhe8N
      DSv56D59mCMNXlKmL2NekROTToXgruXtHc1oJ1Qwf3oaIyNeNIk5JFvMjC3fAgKJOFO17G1q
      IjCnjMiQi1GNE6umm0N/eh7XrO+woUAk6heRTJmkj6++SlcZUwAESypZZdPIP7ONQzv2k/Pg
      QjLlCAH3EO4Q/PX2hhkZ7KffBRPm5WLVVCGFg++b6aU/hHe7ZieRmWVBe6SeWvc8ErznOHcx
      hvgRx5zV6A2kFWQhnKrl2LFeMnMHqK/pRe1YQFEmhLreuZKFR3EP9tIXNFGRnUayr52Adyx7
      5cYR1FqM1mSMVkDrxWo2oIuYSTD7aD54kKYeC5MWaak6uostpwbR7N/NZo0AOfPZuGE504t1
      bNn+NG//wY/aMYXV91ZQkG76607w7xg89K8871vOw0sLsV1jmEhBbWTK3Y/S9Ofn+NE3/Whs
      uczZ9DALsqyMzpjM5me/yzddMglZU1n+uc9SPl6qgK5hbIVglZ7U0gV85iEde7fs4FffexFf
      DPTmVIrnL2PxzHyEusYr/oOBzLJyCs81c+jPT1Gdm4Y6EkAa9OBP+aD6FQ3Fqx9kWfsfeeUf
      f8BrueXkJkgf+Qog6KykVdzFFwZfYPOf/jtPynpSi2dz9wOrKbTFuJCajWXoDd54SWZWeS5F
      ll3sfOZfqXGaichaRlwuPONx3D5bPrPWZ1IhazCgQnJkElT7UKdPZd1jJdzx8BWFJLUOg16H
      VnDyxZLFRGMyqLUYDHq06vdu6ovuepJ/FDWYDJduiJInTyK9Uov6is6Cqat+yL8t02IWLp2m
      jBkzeeBb5dwTk0ClQWc0olcLGEru4JEfLSQmXQqu3mhAO+7aA6owmOfylaemfYxB8t4pB8Si
      EaKijAwIggq1RotWowIxSiQqodLq0GnVIMWIRi5NK6hUCPKlH0OnlolGRQSN7tJrUaJBwqIK
      nV6HWpCIhsNERRlUatSyiKjSY9Krr25lKcvIUpRQKIZKb0KvgUv3qjJSNEI4KiIDKrUWrU6L
      RgBJjBKJRBEFNRq1CsQYMUl+9+0UKo0WjSARi0motFq0GvUHnjGv5eYMkjdKZ0s3Lo+ZiTNy
      P7F3cIbObudgwnwW5ia8W1j8tFJGibxBbk4AZCTp0vuSVGrVfymg152rGEMS1KgE4SNfcW9X
      SlOI25qA6npVmGOdq1rzqR8g+7L/BznQFNXvy5mIAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Time by Purpose,Mode' width='192'>
      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
      78IAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Income,Purpose' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7EAAAOxAGVKw4b
      AAAgAElEQVR4nO3d53dcZ57g9++9t3JCoapQhZwBggQJ5iRRaqqlzjs7PZqdnZ2wZ8+x1/ba
      6z9CPj4+x69sn9kXttfeWc/OTM90bkndaokKFHMGkYmcU+Ucbt3kF9R0S9OiRIwokSjczyuJ
      qFt4bqF+9/fkRzAMw8Bk2qPEp10Ak+lpMgPAtKeZAWDa08wAMO1pZgCY9jQzAEx7mhkApj3N
      DADTnmYGgGlPMwPAtKeZAWDa08wAMO1pZgCY9jQzAExPRTkbYztVfOzXG7pCOpMntrFEofo5
      rzUM1maGuXRrHFWrMj0+ylaqQLWQYmx8ikKxyNLqBroBli94HybTP0liYZh75R6+/3wf1UKC
      6zdH6D16hurmFEs5Ky+c7Gf4xnXcrQc52N3E2vhV/ubdJfqCKfSG4xw5MoRf2WJ0OcuZowNM
      Tc9SrsKpM6dxWfL84K9fp3FwiIE2DxuxONdHl2mypHA2NjC9sEI0keFrR7vNADA9fVff/DHz
      mpPJ19/CXV4jXrbQHLFw+do9vB0Kg92N+INhWnt03IU8/uYgly9epSukszm3yH27yvWJOM+H
      i4yv9nK6J8jZE+1cGFvl5e98l6HODOvJClvJMl8/1cDcwiKJ+eu8hdcMANPTE12bZ3xKx+ry
      EbDW0xBoo7KlknwwT65ipak5yFIsimGAJFkoJJP47AI+rw9RlJkcXSIUcKOqOh63F6dDRTMM
      MCokMuARymwtTxLdSKDLJZobfIyMLRNpCZMp7CdQXUMwV4SZngalUiCWyIBkIej3kU5nqAuG
      0StZcmWDSLiedDyG4PAR8LlBV4jH01gdEk6Xl0pZBrVERQG3x42igVPSMGxunFaJ5OYi2wWJ
      /b0tJGJxHL4AHotOLJUnEKynWCxjl3QzAEx72yeqQNVqFVVVn1ZZTKav3CcCQBAERNHsGTXt
      HY+uAhkG5XIZq92BRfpiQWEYBuViAVU3QLTg87ge4xoduVLF7nSgymXKsgII2O1WEK3YrdIX
      KhOGgaKqWK1WACrlMnaHA0EQHnmJIpfRRRs2CcqVKk6nk0e9XJZl7Hb7R7/KQFFUbDbrFyuz
      aWcMg4pcxW6zUioVEa0OHDYrGBrFYhHBYkd67bXXXvu0a1U5y1/8L/8TavgATS6NvAKFTBrR
      UFld38bhtBPd3CRfUSllYmTKOi6rzsr6BoViFYdFZ3VtC5vLg1U0mB+/zl/94HUsdY24hRLJ
      XBVNzrEVzyKhUNYsFNMxdHTW17ewWUV+/IOf0nf8CPnNJX7x93/NXFKjzlJiI2eglTIks3mK
      6SSG1YVSSLIZz+H1ehAFnc3VNZLpLDaXh3x8g0S+isWQ2dyMIjk9aOlF/upnF2lsqCOVKzIz
      MY7L5yIWjVHRJNxO++98uW+89V+4vgodriz/4S9/ytChA2ysrSNYrOSScRKpAm6Pjc21DX71
      3kUGuppZWV1HU8r8+M13Gehpf3hvDjuJ6CbpYhWXXaRQUnDYn2xwbM2PkBECrNx5i4yjjcTC
      KLb6JuyW397U8KXLuDs7sD/R3/ysMNhaHOavfn6VvpDOr6+MMDW7xIH9fZSiM/z8wk1sbv+j
      u0GTy2P4eo6yNDnGIW+YX96OYZRz+I0EC7kKzR0HmB2b4c//7DtM3LnNnaUyf3Cing2hgemx
      BQ5FqkxulWgePM+ffuckB4aOcWtsk1OHevnRf/xf2ffyn1FauM/o1AzHTh0nVnWRW5wi7BdY
      3EgSHDj3m7I0tPcz0NWK/dAxLLHrjG9tkdlMIOXmaTtygsLIPNnFEQpVledf/a852+/mB//x
      P3P0/BHujo6xODmJJlo4PBBhpRTmz/6gFaolUvky77/+A1pO/QHLo6MUUzPELO1k1qL82//u
      z3H848xnC0Npk81tJ4FQA5V8mqn71yjZ60luZukKGSzNN1GyeCgWZYrZBA9uv0/WN4Asy9z6
      8F3s9XXcGx4nWy7SF3QRa21GlRo5M/j5WXEn7DaJxcVZytkKyuQDxGqGfP491qIF+g70MDky
      TzEZJ+exMtB7lMY6xxP9/c8CX6QRv20FDANDtJKKR9E0A0UDn8PKxlb0UVMhDO5cv4vT6yG2
      9ICKvw95+TrejgOopTKnXniJgc4Idm+AgJBjS3bgknTKpQr+YANWSSRfKHPs+fPs72r6nXe3
      2By0hdyMLyVpDXupaztAYextPP2nUcoaJ557gf0dkc++uXALQZeT5q429GKeAj5eeukczQE3
      AIJkJRiso5RJode18tILp6l32Who6cLntOBye3D56nDZ7bS1tWERAQS89UEEpYL+iL6xbr/O
      lYUqLQE7K+N3UDxh0BRcdQ10NNWRz5fxBkJYJYG5yRFsvnp0rHg9ThRFJRwJIpdKeIKNnHnu
      IKM3p+nqbt7Bn/Xx+EItxOaH8fScQstO4wm42dis8uLRNkZGZ3A0tBOyl5hfKxDw1mIOEHB7
      PIgCOP1hDg700NrUCIaGYPVy4rnnyW4uPqoKpKNJfr720gvsbw8iOEP0dXbS29fD4IE+trYz
      DAwMEAkFaO3sQqrKdPV0U+8TuHxrBEP08C//6PdIJrL0D/TitEqAiMdXRzAUwOero6G5nbBL
      x9nQSWtrO90dzQwMHmKgt4VovMCBwX0E6/0EQwEkwO5yUx8M4fN4CIQaaWsK09bWSripjYaG
      Vk4MNJCsOOjvbkUSFG5cuU24ax/nXvoGPX4NxRGhr7udYDCE3+MAmwtHNUewa5C2pjDBQB3l
      1AaxooVz51+isd7zO1Ugu8NFa1cXoUCEjuYwze2tyBWBvv5u2pqbaGyM0N6/n1J0nfbefXS3
      N1MSPQy0t9EYcNJ/YJCV5SRnzp0mFPDjsIhECyrH9nfx6JbHP41osbCxsEz3wSNYcuv4us7g
      qq4zMhdjYLAPRCcuw6B3IEyh6iHoq70MACJut5eGSIjo6iK9QycRikkkn5/VmQl6jzz3ZMcB
      qqUsSyubeEPNNIXqHtlA/PJprK9u09Tewk6ayrnENrozgN9t+9JK9nH55DaqPUC956v5fabf
      ZQ6EmfY0cy5QDTEMwxzI3CEzAGqIYRhomva0i7GrmAFgql2GwvzCOmGPwY3ROQR3iJefO0Zu
      e4Hb4wtY3WEzAGqVXIhz4Z1LWBxWQj0nOdzhI1dSseUWeHsyRiTSw7G+IJrkxOuQSOeK2B0O
      rKgUZINgve8zR8WffTqLkzd56/oW/+N/8y954YTE3fkigiBQ39zLCzaR20tVMwBqVXp1Fm//
      Gc4faqZcKHD1/feoGhpubx0AleQif3vvAwSLm772ILrdxvZmEYcSI5Ytcf6P/lsONDqf8l18
      ESLdB4doGEkDOvNzy/QdOIsoABhMTC1z+NSL5prgWuX0+cnHoyjlLPdGpyipFvZ1BEnnywAo
      xSye5gGOH+ylUCzT29eNpMlULD7OnT2O01pDXw21QqIoEvTaSG+tU6wWyMsOvHbJ7AatJbqu
      U60+XDFuGBor02PMbxU5efYMSmKR8eUMxw60spWp4HZ5yaxNU/W00RvUuXjlJlVXB8/1eZmL
      q5w7cxSruJurQAAGmqYjiiKGYSCIIoauIwjCb/7fDIAa8vEA2IlsbI35tQQ9+w/id+2tGatm
      ANSQf2oA7GVmANQQ80+5c2YvUA3Z3d2WT0cNNfVNH2doCrPj97g1PEX1Y3O7VxYXeeRkCV1h
      Y22LWhlLLiRX+NHr71JMrvHGz37C+zen0A2Q0+v86Ec/5PronJkBalU+OsPYconDnQaxVIHY
      zB2MQA/TV9+iYeUgR0+cJjk3TNIIcKy/gVu3hunYf5DJuxO80ta0o1m0zyadQrlANpHFXtfI
      od4wN1fSgEEmvk6uqON2uc0MUKs84T76IwYTU/NEN6bZkv0E7AaGIdEcsjF17yb3NgSs6Qe8
      /uYHNOw7xLUP33vaxX6CRBpbW7FLIppSJdx/Cqm0hqoZ+FsP8md/+odM3b5oZoBaVUyssZKQ
      8XuslA07xdgs00YFLE7cThsZmw0xv8R6Rae1OcD8xAh2b4iaqf8AYKG9oxlNznPj5jAt/UfJ
      ba+iWi2M3x+j7cAJsxeoVhm6RiGfQzUk6uo8lPM5DIsT0VCx2a1ouoheLaFgweOykcvmcbi9
      GJqKw+l44ivUnlVmAJj2NLMK9DkURUGW5addDNOXxMwAn0PTtF2zyMQwDHMkeIfMDPA5JElC
      knZHp6Cu6+Zo8McZOoViGbfbjaZUUAwLTrsFQ1PJZNJYnD6zG3Sn7l/+JQuxCrmtWSaWEp9/
      QXaV927PfvkF+xQbM7e482ATVc5yb/TB519QLXD16l1qI4fobC7c569++BaqUuLKL/+W65Nb
      AGzPj3D13gS/uvCBmQF2RE6wVbSRmp6krM0xXO7jQJOFi7dncZbiNOzrIBotE1tfQfJFqFc2
      kQULswkRBwpnTw4ifVXdK5rM8laenLpIxuXh2u1ZDh7cz+0P36c57KPscBGNKRipeXLU0R9S
      mYmL5LIZKobOi+dOYtvVUysEAi2t1Ns3ECUb7V3trOkPfyJJIuVShVw8bmaAnViZGmYzmWV+
      ahTNHaQpEkK0u5Hyy8ho3Lo2jaEUaNx/Fmt8lWhV40B/D9vLs9gD4a/uyw8UMxvMzq8Tnxtn
      Q/fSHA5hl6DBVmJys8DK5BSeoESZFrqcKqvxOC19g6ipVWSrj90/KVr4TXeuIFp+s/eqIlew
      +cIcPtBHY2uLmQEen05K9fGnf/wKhc0ZVjbi6GoeBCstYT+5wCFKlfscHRrg0qVbiC19tEs5
      7E4PZ85/EyO+TLW7AdtX9MjJJjO8/Oqf0OJIc3N0C69dR9agrbeHpUUNr6TS19ZNdfUD1jUv
      /S1taC47vYfP4TFSFHXw7I6mz2dwce7FEwhAoHWQQc1NOZ/F6guiR2c5+9wT3hnO9HSZ6wF2
      zqwCmfY0swr0OWRZplh8/AOdn7bdMmbxrDCrQKY9zawC7cD2whgL23nysXXW47kn8p7R1VlS
      xX9YomKwsbpIqfrFn+KGrlIulSiVSqjab59xuqaiPerwA0DTVPQaeSbqapnxiWmUSp5rFy/w
      YCWOYTz897tXLzIyu2FWgXZia26Ka6l1vncwwLbUSHT6NindS1u9wNJGjGD7YU4NtiHH53lv
      ePnhjEqlyvEXzrE4fJ281EC9mCGRr9B36CTxufssr60xdM7F6MI4gifM4p0POPnt77M+O0tj
      /wHkjRmqgpXmvkPkYwmGjhx4rO7U9Mowf/P2LIcGWth35Aw2OUUFO7Hxd5E7vsXZ/gDlfIpE
      XiFc76GsiUhKmTtX3iVy/FsMtvi/7I/zS6azPHOXdy+v09MWJNwY4t7wJP3t54kuTJHFS72c
      NwNgZywc7o9wf2qBpk6V2byXAfc2t2+lGfzW15i7NoxH3UaU06SEAPXpRRojVha3cpSrKvOr
      U4QMmYOvHGNu+AYpaxP9zXnkchHNEJmbm6OjpZXkg/s0H3uJhRuXSZVK/NE/f5mb129ii/Sy
      k616VKVKuVxGEAzWFh7w7vAyxyIqtjYdUHn37bep83mYNkSK7g7cWzMktQIBTf/SPsGvjkj3
      4BChO3EcvgYa5BKGto6uG5SySbIlBxtrq2YVaCcEUaSuuQ8/BRR3EEt6ngcbFcL1Pmx2O3a7
      ldaOHoJ1LpxOBy6nC7vdhlbOMLcYRbJIiJINu92G3R9GSEzzYDVFMbnB8nYGi2TDhoI91MDI
      pfcR6xtw22w4vCEMOU9bW9sO5ukLdB04zje+8Q38YpaZlSReh4Tb68XldAI6ZVWiJexDVQ0U
      uUK+WMHjrcPl3P3DYP9AEkXysQUu3RzB5vKR3lzB3dKNkY0hOjxmI3g3qBaifHB1lpe++QL2
      x3xkybko126NoQHt/UOUt+fRHQFaww5SioeB9gZSG3NMrhU4cXQfU/eGET1hmoICJTFMd1Pd
      l3pPzwozAEx7mlkFMu1pZiO4hphTIXbOzACmPc3MADVKzse4eWcCDRg4+hzN9Z99DrChldmM
      FmlpDn01BfwKVTKbvPP+VayBHr59/jj5rTku3p7EUtdkBkCtKiXXiJYdnD/Zi9tW5eoHl3A3
      76dBSjO9UeL40X4mh+/jb+/HiK+Rzca4t2Hj3/9X36u5L4WuVymXZYyqgoFBJh4l0HGAldFb
      ZhWodhlkk1FWVlbI57Nsx1JsbUa5OTrL8YPdLI/ewt46yNK9a4wurjN4ZJBwKFRzX36A7PYG
      TUPn0PIbaJpBuKMPRzWDxes3A6CWqdWHI8GZXAmnw0oimaTObnDt5j1w17E8cZeq04dTsiDa
      7ZQz6draGO4jwfYBiM3S2n+Y9MY6sgClfIZDR0+a4wC15BNHJOkaFfnhf1usNnRVQZAsSIKB
      ourY7FYUuYposYKhY7FIKFUVq922Z3aFA3MgrKaY3aA7V4tVvj1LEARE0azV7oSZAUx7mvm4
      MNUuQyOdzmAYoFQK5Eu/rR4aaoVUtmgGQK2qFuO89Ytf8LOf/ozFjXk+vDLxWNetr8xTVmph
      PYDO6vRt/r8f/hq1WuSDX/wXrk9tf/Qzg7m7F3jjgzGzDVCrlHKedFHh8Ilj+KwyIzeusLg2
      y8tHmrlyf5mWffvZHr2Fze2jtaOJqYUtnA43Ib8F7dZtkpKFYGMvxvYsmVKJ/nOvcqxrN60S
      E2js6SVwcwvR4qBvXw9LH608zW0vEq06cEqCmQFqld0T4Tvfe4XS/A1uzqdo6T9CxCeyPLPM
      6ZfPk1xbRXOFeP5kL9srWzT2HaPTU2YrXaZSKnP4zNeoJmZJGiFO7G+hqu62rCBgs9kQBBBE
      Cav14bNeLhaQNYNKPs36yqrZCK5V5fQGH1y5h2Cxc+BIL+srCnYpQ3ukjhvDM7QfGOTOhbfo
      6OqjtcnN5dF1ujq6CdcZKJkiTUdPEF1dhkyUuaVF+s7/Kae6d1MGAFDY3EzR1BRBLqYoak7s
      ehGLL4SDCtGUbAbA3lXl9u0JTp06RimxwnzWxlBP0ydfoiuM3bnBVlHi+RfO4rHWXoXBDADT
      nmY2gmuIYRgoivK0i7GrmAFQQwzDQNd3W2P16aq9Sp0JAMPQKeaypLP5T9/pTVcpy7/NFqpc
      RqmxqaBqNc/wyCTVcpZrF99lYnEbw4BqIcXVi+/yYCVuZoBaVUou8asPpgj6RPpOvYxLjlEW
      PTTWWVlZj9MccjGX0GlyyuRVO+raTdT+VxkMP+2SPyk6G0tT3Ly7xoGeZiKNQe5PzrO/qxFV
      h5aWAHfHZswAqFU2V5BwvYWSakFS4ly7NYmkysw4DeyNHejFGAtpJzZvnvfvznKqy437aRf6
      iRLp2DdA/Z0oNk89jY0yTN9B13VcvgAhtYoxfscMgFpVLeaob99Pe2GOyZUEgsWJTa9QqaqE
      6/1IhSiaWmRkchm/24b+GRvm7l4CdoeNQnyJK3emcNWFyGytU9GrTE7O4Q40mN2gteTj6wF0
      VWZ2aoK87uLwoX6iiw/IS/X0RFxMTC3T09dBToZKfAXVWkfQI2IPduL/7LXzNccMgBpiLojZ
      ObMXyLSnmRnAtKeZGcC0p5m9QDXKMHTW58aYWk5x7OzzUIxRLZfQPK20N9RWh+enM8hszfHT
      D6Z49fwAH9ycQLWF+Bff+xrV7CbvXbqN7m00A6BWFbbnuD1f5HsvHuKHr7+Bo7KG6AqSNfzs
      27ePvqDO6INV9h06zOKD+3QefL7GzgQwUEUBQdapax7g+7/Xyrsf3MQAtlcXKWsSLcHa3AjM
      BMj5DO5QIw5PCK/FwNPUig0BT2A/seVxNsa2kbwhJicfkM4ZvNDoe9pFfsJEQpEwFhFUOc/o
      vVGGTp/FIgqIuk6k9yDLYzfMNkCtqmvdh7p2lzd//hPsLfvxSRrxbBG7w44k2WlubgQE6uvr
      kSxWBKEWt8OyMbC/h1x0hZXtOJNTM8TXlvH3HcWaWqD36HNmL5BpbzMzgGlP+0QboFwuU6lU
      nlZZTKav3CeqQIZhYNaIdi/DMMypEDv0iQwgCMJHjSGN1fk5ClUdq6uO7vYWJFS2Y0kawhGk
      PVpxysY3qNqDBJ0CG9EEzc0tj/ws4vE4DQ0NwMOdmtO5AgH/l9vNqOt6jTZmP110fZF0oYov
      1IRYilNQbbS3NxFdW8ERaKahzkUuscVmIovd5Sfst7CVKNLe0Y5NVInF80ivvfbaa5/25sVM
      gl+9+S49R4+QmJ9gLZYilkijFOLMLa5SFV1omTWGp5YJRhqxSbX/wd+9+Avursi0ufP85x++
      w+BAJ/fu3EOwO9hammd+NU4o5GF0eJRLd0fob/Zz6+59dFXmh2+8y0BXM/fvT+L2eZl7MMpa
      skTAKxFNlfB5nF+4fIZhoGkPl3WtP7hJzAgyd/mHJBydbE/exhlux2H57d/p2q9+ja+/j906
      AbRaKbE+N0nR4mL8zhid3V0Uowus5nTKxSJN4RCqIpOJrTAfVVifuUclFyUpRTDiE7x+ZfpR
      4wAikZY2fF4fzU0N/N1f/gde/nf/npHXL7Air9J86g+58NYv8crbxHDja+lmqL3+q737p8FS
      j6WUYGUzT7ixkWq5QrUY49qtJJmkxtFWnffeWcHXNQDKHNWqjJZe5WrOSn2dhztXL9F9sJ9f
      v/k2utPD8UiG22MJPIFeWiJPtqi++gCry5PI9jDZmUlEUSd/6Q1imQrN3R1Mj68gynlyVz7k
      2OEzRHy7Lwz8gSAV0ce5zhDlTR+3bt2g3iUQL4PVFeTIwX2460IUcmXOnD3D1MVlkkUdTyXK
      TLyC36o/Xi+QIDjwee2/OTghk0pisTto7urBrZXZjGe+xNt8tvRFJG4s6zT5JFbGbhCV7YiG
      jtPlxedxYLXbyCcTKDrMjt4mq1sQDQNRV7BYLMSiSexOJzaXm/5jh5gbWaCro+GJl9Pjj7A9
      P0Fd+yG04iLeQB2ZgpUXj/ewsrJNQ9c+Qg6FdF7D67Q98d//VajmNhA9rUiGjtMfps5u4PGF
      CDe3opay5PMZVL1MRrYTsOsUZIG2iJd4qozPBslk/NHjAIaukYinCEQaSG5sUN8UIZNIc+2N
      /wffiT/ncHcIp1FiK1mkpa0NRw1umvSP5TNprA4ruZKGTdCwWwWiyQIerxtDF3HbDbA6SUZj
      SE43fgckchXcLi9atYDH6yEaTRFujFCpKhi5dW7O5/ne108/kVNZPrEewFC5d+MGHUOnyS7e
      xdpyDGVzjNmNLAP7u8kULYipdXwdDQi2Rjoju28kWJOLFDUbPqdEYnsDWXTT3OBlc30DZ30j
      2c05GroGUEtV/H435VyKaLpEc2sLNkknlcrvfCBMrpSQbC4stf99/9IpcgVDsmF7Qh+muSDm
      kzRNQxQlPqtfwBwJriFmAOycGQA1xBzH2TkzAEy7lq5raJqBZJEwNA1DEJBEAU3VECULoiiA
      oaOoGoIoIWKg6TqSZMHQNQxBNKdD1ypdqzJ57xbrqQqHTj1Pa8AFQCWxzNhGDp8vwkDXE+57
      /YqNXH+ftWgSb6STYipBLpfj8NAgi8szGO4Bfv/lw5RWbvOfLm3xtedPkZy6TMER5vC+Lq5c
      uU5ZcJsBUKvSK+MsV/x856V2ljbTTM3f5sFGnqEuP/MrGcL1FdZn7qLZgww02RlZWMfuChGx
      lVlJlnnhG98h6Hy2ezqOPf8NmuZH2NBCvPTcCW5efJ+mviHsWoqxuAxAtqgR8dnI5QuINgdi
      pUyhWkUSRZx2lzkbtFapcgWntw6L3YeTAjMbBZ47EOD+XBSA7NoDJleTlPMpboxOc/L0cTJr
      i9wanQKlRCJbfsp38Pm2FydYLjg50tvA3atXaRp6DiOzSWTfWZTUEhoguZv55itn2Vycpqnv
      KKcHw9y5OUKg6ygB+TPGAUy7m1rJ8t7b76KIFpr3nUDfGGF2K8fQgW6WEiUCLhcbq0vYPUH6
      mlxMra6Tq7jp9MrEixovfPcPafE92xWE8Vvvs5aUaWxpJbm9jmZxc+LIIFMj92kfOktla5JI
      ex/3bw/Tc/Q0zuIaY8tZzp49xsLILVR/lxkAJkisTnNnbJpI/xmO9Tc+7eI8MeViAZvLw2dN
      UzMDwLSnPds5zrQjhmGgqurTLsauYgZADfn4dGjT4zEDwLSrpaMb6O4gxY1p0gQ41Bth8v4I
      3rYBOiN16HKWO8MP6BocJDH3gERRpq2nn1J0BdXTZHaD1qpyZo0f/92P+OkPf8hKqkKlVKQs
      K/zi7/+ORLGIpuvIlRKlsoyhaxQLeRQ5x7tvXUJ+2oV/TGolyzuvv87q9io3R9fZmrzFyP0R
      yo4A+VQMgEwsQV29gzt3p+kdHMKlFSlkt9iSHczfuWZmgFolCFbcHhf1kVY8Woxfvnkbb7iN
      YjbO1Xd/RUvPQZanHmC1CjRHAmxnyxiCFZsqsFt6RUauXsQWCJKOZ5CsBprVSTq2RV7MI1cN
      Bvf3EWjrITd5G13XEIUcKSHCCY9ARvbgFM1tUWqWYQgcOH6aBn2dGxPLeJr62d/ThNUV4OhQ
      L0o6geFroy1gYWUjRf/hY1Ry0add7B3pHDxGg9sCGOi6gapUCTe1YhFAFEVS8S3WZyZYSZWR
      JInU4izB7j68/jDp9SlSFo/ZDVpLPj4dWq3kuHv7LkXDzalTQyyM3Eb1tWNXcrS1N5CTHZS2
      pknqdRzpD3Pv7igt/UNohTzdAz27pmqgqQqGIKFVy2hYcDqslIslJLuT+No89S09GNUyNqcL
      ydAwJCsWASrlErpoNQOglpjrAXbOrAKZ9rTdkumeGlmWKRaLT7sYj81M6DtjVoFMe5pZBdqh
      5OYKOVlHKedI5R9jH1U5z1r06WwbU8xEiaVL6JpCIpn+/Au0Khsb2+y2sWRDyXPhl6/z5q/f
      J1+RufXOj1n86HZTiyP88Kc/49rYEqBy6Y2fsxbd4sJbv+TNt6+aVaCdqXLr2gf4el6iPn+H
      4VI3f/byfpa201jlMnWROnIFg/jyFM6WA3jkTbY3VhnNBvn6oRY6ujs/c2bikye17gYAABWT
      SURBVKUzc/8ay0oH5wck/ubX0/z3//Zfsbo0T9jnpGKxk0/LiOVNYpqfvqDB7OImk2tZXjh1
      gK7eXmy7ZJtFNb1O0tpCmzbH7NIWyegmjo/6AmbHljjxtbPcvTbKuiXB4maSTkeAF1/+Fh++
      +aYZADuRXxlHCQ0RXx6nqSdAoyeEKBnMjdzHpmWprIQRdQ17qI+Vy++gOuDU0AGWPnyb9OH/
      ge6v8PukFJOsFtzYq0uUHCdobAhilyAxPca6w40mqiiuBvJrOVqc69xeyuBof4Hq+iVmevbT
      37s7vvwA1lA3vc6rrEXhUDCCGPztHkdWiwXDAKtQ4ea9KUq5BJvRFNXKKq3HXzCrQI/PYHJh
      i5BTx2NXWY0WKRQKILkI2lNoLYfYmtlgoKeJzNYSssWFw2LBKkm09R8ksTiD+hW2tmKrs4h2
      Dw0hB6NT2yiVAooO3V0+FgsOcqtx+rtbEapJokUNl9WC3WHH39yPnlhC1ndR01BTyJcq+CK9
      tIeceEPNeG06S9MP6Djaz8jlW3TuO8m/+Nf/hq+/+DxhW46b9+fZmJ8zG8GPz6BYKOJ0u9EV
      mYpcRdYEgn4vlWIWzeJGKReoq/OSiseRXHVYjCp2u52irGNBw+nxfmVVILmUR7B7sIk6+XwZ
      RZWpqw8iqGVyFQPJUHB5vJSyKcqGFZ9dQLc4USoVrKKB1e3FKu6eLPC7DBLRGP5wBIu5IMZk
      +nRmG+BzqKpqjq7WMDMAPocgCIji7mgqmSfE7JwZAJ9DkiQkSQJArVbQRRsSGjoiVov0hd9f
      VWQEyYYkCoCBoihIFiviP6ELcq+dEKMqMmVZwel0oVQeTm5z2iVKxTJWuxO7zQK6Sr5QwmK3
      g6qgaAY2hwNDkTEkmxkAOzH+wU8YMwZ4pU1lVWxjIAQF3UG9UyCVzuIJNhHwOtAqebaTOQxB
      QlcUGlsaiW+sYTj8OEWFQrFMqKmFSnqb0XvXaTn6LRyVJHafn1vv/ZKjr7wK+Ti+cBN6IUWx
      qlHf0IhSKlFX7+dx2qbF+AJvX5rA43UwePJrtAYeHoARX56g4uujLWD/1OtWZ6ZwtfQQ8nz6
      z58lU/dvEktmkHwRtHKJbCpOT2cbS4k05aqDP/3+yxRX7/Hju1nOnRrESG8zNT6Kr2s/2ViS
      qqyaAbAzDrx6gsW4HYsvytsfblBvr1AsVHC0t5AbXuFPXj1PeXOC128l8RSj1PssJE//MyoL
      U9xdyBERsvh72pldXGE7nsNPCaVcYHthkoktmQa9wur9S2StQSrjM+Sia5w4eZDF5XUKVYlv
      f/30Y5W0WkyTyCs0t4RxWAyGr3/AbFzBX5zDMlhPW6CZ+1cvsJ7W6O1uIqnV4UgsM7s2Tc/z
      IUK94S/5s/zihk6+yOb8CHGhkaHuELcuX6KcLbP/xDmGL74FQKEqEnTobMfznDu6n7XtIsd6
      grwfTUEhYY4D7FTXwWNsTo+i6VV0mxefQ0SuSrT178NSTXHz0gXmNtOEmjtoDjbQ0RIgH19l
      fruK0wIYTrr72jHkAti9+Fw24stTJDUPNjQ8Pi+GIuNviGBUKwhOL30Dh8lszNPa2bGDblSB
      hpYuBgcH8VgVUuk829ubBEINBAP1gMxStMrJgQbmZ5ZIF8pk03nqw02E6l1f3gf4BK3PDrOQ
      sdHf4uX6xYs07DtOS9hFKZvC4fCjqSqCLciZM0dIbqySW5vC0TmIy1XPgcF+fKFGMwPsRPvB
      EwiBejp//w+ouEJ01M0TV9p55YCExefHd+YUnZ2tKPkY/qIVu1yHwykQsdXh1qrY64O4DINQ
      fQjX8Tb6k4ukqiHaW8LMza0yuL8Xn1FC8IVZn3nA6fMvoWRTSIKB01VPW/PjH6Uk2Rzktye5
      cSNBW08fpUqVpkAQd8BNNp8FGmlvsHBrKsqh40e4d3sE2bDRGXCTz1cg6PnyPsgnpCQrGOUi
      SytWRIeTrZV5Dg0eJDE1zsnnX2BpZpRQWy8zE1OcPvc8Vj3HwYgfm1WD8jIDp583xwF2A1Uu
      EE1XaW4MfOZRSuaCmE+Sy2WsDudntpnMAKghZgDsnFkFqiGCIGCxmH/SnTAzgGlPMx8Xpl0t
      sbGE7mmkwWtjbnYej11h5MEqzvpWXjw7hASkt5epOgNsjN1jO18h0tJMamMD3eI2u0FrVWrp
      Nv/bX/wlb731FquJIulEjHxJplouEE+m0TSNdCJOoSxTyGaIr47xg59dQX/aBd8BpZTkrV+8
      wWqqyMbUTd744B6BroO8cKQTweZGApTsFr/4xc9ZSWgce+E8TW6RSNd+vn7+JJpkNzPAXqAV
      Nvm7N9+mdeA0ltwcNl8jAZ/EUlxBrxYoJxPs29dKMrt7doUDuH3xXSRfHfHVGaZW1/CIJfIl
      mYmxFc588zsAWOuaODnYRQkwyttsa2GO+mxM3ZjgwNEzZgaoXQK9h07z3e9+l+agj8NDB8gk
      o2RlkcMH+6nmszT1DCBV8oguH/sGevDX+fjis5u+OoOnz9MTqcNZF+GVl87icjqxCTnK+HGK
      ENtcRf7YbvHxhRkaevsAje28TKPPYTaCa1Uls8mHV++jiwKd+49QXJ/CGhmg1VFgdCnD6ZMH
      Gb99i/ruA4iFLB19bYzdm+fomcO7qlpg6DqGICACmq4jiiK6YSCJIpvLc/hb+nBIGggigmE8
      fK0Aum4gPPw3MwBMe5dZBTLtabsp25k+hzkSvHNmBjDtaWYGqFGGprAwPUFacXBwoIVEskpb
      S+hzr4ttr1MXasZuefafjdPDV5ld3sTXOYQjvUJatTJ0oI1796eoaxrgayf3Udie5p3rszT2
      9OPMbbCRKtB7aIilyTGKeM0AqFX5+BwTKyUOdRhsbK9y+e1R9p04wrF9EW7fGad76Ai51VlS
      BZ19/W0sr6xiOBsI2iukYxni+QRN3YeR0ouspmR6B4/SXO982rf1CfuOnCVfuERHROTdBZnW
      lhCiUqRYrmApPjzpXq0UyJcr+EpVTpx6gfa1UW7OzOBrOYgxc8esAtUqT6iX3rDB5PQixaqK
      K9hCanOG+5cv0tDTw52btxieWKYjLHHrxm22q17U9RHuPVhibuwWzkgXU3cvcuNBigZrlvXU
      Y+yD+hVTKykKgp+gU0RwNuAsLXNrZIVDz32dYnwBDViZWePUS+cpxLbIZ7eYTth5bqgd0DEs
      FjMAalUpucZaqorfYyFfruJwOLFZrdQF6pibmMTu8aFUsswvbuHzuUltLRErWXDZACw4XU4s
      DicONcPieuJp386n0uUy4bZOpPoOBuorZKRGzp4ZYnPqHp2Dx1ifnyRyYIiV0ft09HUxevMu
      2UyUtF6HmFnC1txjjgPUko/3Ahm6RiGfR0XC53FQrRoIgobVaqGQL+JwW/jpj97ie//s26jJ
      Oa6swssnB7FJBrquY7E70KplJu9cY3xhm5e+/6/oqH/2F8p/XCaZwF0fwvoZj3kzAGqI2Q26
      c2YjuIbspk28nhVmBjDtaebjwrRrVcsFYvEEVVUjn06SzpcwAEOVKZQenndv6CqJeJySrCAX
      c8TiCRTNAEMjny+aVaBapZRSfPjBVYqqwNmXv03Ea/3kCypp5uIafW0PB8c2Jq+itJyj0/8U
      CvtPND1xn3Qmg+IMI1VLRLdTfO+PX2XtxpuMFvv4k28fJj59lQsPiri8fjzldXRNwTP4Tfos
      q/z48poZALVKLqTYziocP3kEJyXe+tnbFMR6jnY6uPVgm4P9HWxVveRW7jO5nmcwKGN9/G2H
      nglDJ86xNn2XlK2NXm+Jn28nSCzPkJHq+E1/lWRDq8RwN4YpFx08t7+NS2sL6C6NBo/VrALV
      Kqe/ld/77nky09e5OjmN7uqhhQI3R9d4+Q/+OX2NbnKFPPFYimQyjqzstqPxYGH0ClMJka56
      WM5KdAREtlMFUtubrCyvkJcrbK3EOXDiKLlYAptDZDuVw+t2UEnHWV6aNxvBtaqUWOHClWEs
      VjuHTp9h4fYlsmI9x7o83B5fY6C/nVjVTnllAll0091ow7f/W/TUP+2SP77FqWFiuSqRjj7E
      3AYla4h93c0ISoHNpEYpOU+4Y4DlmWkiPQN41AwzqykODB3EadHY2IibAWCqXVW5gsXmMHeG
      M5kexWwE1xDDeHjAhunxmQFQQwzj4Twe0+MzA6BWGQaqqqCoOja7HQwNDANDkLBIu7PzzzB0
      NuYncLUOEXBCIbbMtZEF9h89Tn55gpTh5ci+FkaGRwh0HuRAVyPIaS5eukNDz0EO9jSzvTiJ
      GOhke2aYvCVkBkCtqpZSXLhwCZfbTtnRjKc0j6IayP5BTh/qpM5uEE1kCYUbyKeT2L1BfA/n
      Qj+zCol1Lr73Hmf/+GEATN4epWtoH6P3Rzh8aIjq3HWm17wcOvUcH/z6bfq7XiU2dRN3x1Fm
      RofpCgm89957dB89R67qw7s1YgZArcpvLmBvP8rXj3fyxk9+QkYoYLe6yKaivP/+MkEpxVI0
      R6h1kGxik+9+/1V8T7vQn8Pb0E5/+29H61RNxOG0Y1gcNDhl1uzNnBjoIrE4Svfh01h5eMyt
      w+FAQufKxQ+xOuwUDReuygqxQtkcCKtVjroQpfgGxWyUguAm4PXhtFtp6ezFbXt4dtbzXztP
      W8iL2x8m4HM87SI/FlGUEFBYW96kvdvP5fduE/RY+Osf/IxUNsfs8EV+8eEo2VSKra016lr7
      GL96AdEf5oWvf5eBjgg+t41ytYrg7zS7QWvJJ9YDGAax1VkerCQZOnkKI7XMZkYm0NiBUkhT
      7xUZm1xl8PBBUqksXZ2tu+hpqLK6vE3r55Q5trmKO9iK2/7oV5kBUEPMBTE7t3uC3mT6Enyi
      EVwqlahUnr3V/ybTl8WsApn2tEd3g+oaD8bHCPccIOj5YrsBGJrK6J0rxPMqojfCy2eGPvca
      Xa0yN7dE9/59JBcmGF/cAiz09rYiuBvpDHu/UJkwNKKxFJHIw261mYkJugcHsQqPmjmlMXP/
      NquJAhanl1OnzuD+qNs8l0oieXy4bQ8XnSTXZpG9HTT7d9cuCrUmF1vg9UvTfP/8IO9euoUr
      sp9vnhsiuznLjdFpNpMgvfbaa6992sVyfov/9//8v6h4OgkLSRbSGqszDzCUHFdv3cfucnL7
      yhUShQrrM6NMbxYI2StcvHaL+ZU4ddYyl6/dw1bXQJ3HQUPIy+Urw7zyykuMX3+HuWiJwvYC
      d8fnEbQ8sbKNtam7yGqFmzfuYvPWcfX9S+w7fgR/XZCtyRu4+8/QJGXZSBWYGb3P5NwCm4uz
      lK1+sisT3JlYItzcit2icvFXbzG3vIKtLsjy6A2mVlNYqgmu3hzFE2pFXrvDX/z1W6AVWdhI
      UclnUYrb3Lk/QSyv09YYQPhEMAjUNzRx661fc+rV30eIL/Hh1ZuUNQvv/eQ/kbE2EJ2+y0K0
      hLw+zJalm87Q7uharE06mVycB5NbnHzuDF6yzG7JHOxvw+UL4SgnqN93/NGN4JXRm/i6DzM3
      fg/RaeXKr99gYmmb93/xU+LZKMOjY9ycWGewo46tRJoPPrjE8NX3CXT0Mjv5gAs//zGbyRjD
      EwsgCFgkCVEUsYgCU5NjdPR0sboWZWXqNtF0kZuX3+bW5DrX3/klsfgWd8YWflMWUZKQRBHJ
      YqEQW2Z6cYnFmEJ2+ia2xiB3L1/mJ29+SGJ1ltn1JKBw/94UHW0eLvz8R/z0g/ssT48xOTFK
      ztpEk99GqCFMpHMfqYVxGrsGWJgcY2VuEiHUzsiH71HU/nHNUECyWBBFEckC77/7PvuOnuDG
      OxfwRlroDltYjWW5c/0SOflL+puadkAk0tSEVRRQygX8XceRShuomgGozEdLDLT4HxUAGrfv
      L3Hu/Iu0SGk21BB1aoymvoN0tjWC4KC5MYzFakPJxZhfT2LVdXyhEA9GhslVVJpamhAFGy1N
      4d853VwUJSyGzIPZRUTJgiXYiS02QeeJF2mKRBBFC60tjZ95e1anA4tkxe6wIlpdRII+bB4f
      keDD8UxNzjM2Pk9T9wBhnwOvP0S9x4HVZn/4ZLfYkBOrZBURq8XyURk1lqZGMTwN2D5rEjkS
      7Y1+7ty4grOxkzqrzvT4GAsbSQQBdM2ckPZssNLT2wG6zN2rH9Jx4AS57VUKcpVQYxc26ZEn
      xBhU5SpWux1NqYJoAV1FkCwIho5cVbHZbaiKis1mQa7IIIhsTl7mnftrOLzN/PmrL6OqGja7
      HUkUwDCoKipWqwVVqSJZbahVGd0Ai9UGmoJgsSEY2m/eX1NVrDYbAqAqyke/X0XTHx7mJhga
      omR5eNwNOopm4LDbEYQS//f/8df88b/7N3htdnRFRkPCKoGOiNUigaEjyzIIEharFU1VGHn/
      p1TanufMvuaHQfEpMaBUq0g2G4KuUZGrDwNKV1ENMDQNPspyiFYs0mcFkelZYPYCmfa0T/QC
      VSqVh09Fk2mP+EQG0HXdXFBheiJUVUXTnv2dJj6RAURRNPeWND0RX1bNWikXqGDD67RRLeWI
      JnMEI43I2TgF2SDS1IyoFCgbdrxO62+ukQU7NqNCLJkn3Bghn4yi232PGgdQuP3+27zx6/fJ
      6FY6mhsRdZmpB3P4gw3s0gVFX5DGg7vX+NlP32C7rNDc3I7to1OlZ0fuoroDeOwPnycLdy6w
      qkVorHu2F5h8mXRd/xKCQOXqGz9gjSa6Iz4WpydIpaJMrmeYH71LMNKExyFx+Zd/y7qli56w
      GypZfvXzH5G2t7I5eoVYYpO1nE4hm+Tu3dFHjQRbOX7uazxY+DFnzxzh7//3/5nAsZdIb0eZ
      vXuBtKUFtz+CPzfDUlnkxe/8EfubvuDI7DNPYv+JFxi5Mcrp88+zdv3X3F1NY3c2kl24Slu+
      SmpxlpLo5WCwhOxVP/8tTTuyNjWMNdhCVdcxgN6Dx9heGMOiu8iWgkyOj+MJfoOB3nam/+Ei
      q4v9vR1sAXa7RDxTpasvQpcrx+LCxuPNBq2UJU6dPUi1WKJcLnL49PMk12eQvD7iaxuks4Uv
      656fUSpjsxt8/ZXvkluZxtfYSnuDi4oukIxtIJvf/S+FIVlJxzbZ3tqiUCixMnGdu0sFWoM+
      6iLthD0C+YqGVXqYmiulIqpgwWYRAY10UWVfbyMbczNsZjTCTv3RUyEwNFKpLJ293WS2tug4
      MEAhlUNOr7Gehd59gwRsCpK3ns6efkLevTHsn47FaNm3n0aHzq3hEdoOnqXDqxPNVimVKvgD
      Qdobg7ga2on4zCrQk1QXaqK7q5v2tjAbi+u4/T4cNguis556m4Il0EFPSxCb20+wvo7U5gKS
      K4TP7yfor6eno5FcSeLosUH0coa69v07HweYuPkugcFv0FzrNR7TF6IoypfYC6SjKDoWq+V3
      Zhl8nKooiBbrZ+4M9/8Do8tnBTV1IQsAAAAASUVORK5CYII=
    </thumbnail>
  </thumbnails>
</workbook>
