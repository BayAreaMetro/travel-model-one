##---------------------------------------------------------------------------------------------------------------------------------------
## File: 	mtcTourBased.properties
##
## Purpose: Defines the properties specified to run the main mtcTourBased model CT-RAMP Java process
##
## Format: 	The properties are grouped and ordered based on how likely their values are to be changed from one model run to the next:
##			  A. Scenario set-up            - project directory, synthetic population files, random seed
##			  B. Key inputs                 - land use files, accessibility measures
##			  C. Machine set-up             - IP addresses and port numbers for matrix data server and household data server
##			  D. Model switches             - flags to control which model components to be executed
##			  E. Model parameters           - sample size for location choice models, values of time, shadow pricing parameters
##			  F. Model-specific inputs      - UECs, alternatives files, size coefficients, probability lookup tables
##			  G. Output options             - format (csv/database)and names of key output files, shadow pricing and size term outputs
##			  H. Computational parameters	- parameters defining task sizes in the JPPF framework
##			  I. Debug options				- HH ID for tracing, HH ID for single household run
##
## Note:	Lines starting with "#--" or "##' are in-line comments
##---------------------------------------------------------------------------------------------------------------------------------------

##-----------------------##
## A. Scenario set-up    ##
##-----------------------##

#-- Root directory for all subdirectories specified below
#-- Set by RuntimeConfiguration.py
Project.Directory = set_by_RuntimeConfiguration.py

#-- Synthetic population files that are read in by the HouseholdDataManager and mapped to internal household and person objects
#-- Set by RuntimeConfiguration.py
PopulationSynthesizer.InputToCTRAMP.HouseholdFile = set_by_RuntimeConfiguration.py
PopulationSynthesizer.InputToCTRAMP.PersonFile    = set_by_RuntimeConfiguration.py

#-- Seed value used to randomize the order in which synthetic households are processed.
Model.Random.Seed = 0


##-----------------------##
## B. Key inputs         ##
##-----------------------##

#-- Zone data
TazData.File       = landuse/tazData.csv

#-- File defining the zonal walk shares that fall in the short-walk-to-transit and long-walk-to-transit categories
TazWalkShares.File = landuse/walkAccessBuffers.float.csv

#-- Zonal accessibilities
ZonalAccessibilities.file = skims/accessibility.csv


##-----------------------##
## C. Machine set-up     ##
##-----------------------##

#-- To handle matrix IO in the main process, uncomment "RunModel.MatrixServerAddress=none"
#-- AND comment out the java call that starts the MatrixDataServer in "runMain.cmd".
#RunModel.MatrixServerAddress=none

#-- Alternatively, to handle matrix IO in a separate process, specify MatrixServerAddress and MatrixServerPort.
#-- If unspecified, default address of localhost and port value of 1171 will be used.
RunModel.MatrixServerAddress = set_by_RuntimeConfiguration.py
RunModel.MatrixServerPort    = 1171

#-- IP address and port number for the HouseholdDataManager.
#-- If not specified,  HouseholdDataManager will be created in the main process
RunModel.HouseholdServerAddress = set_by_RuntimeConfiguration.py
RunModel.HouseholdServerPort    = 1132

##-----------------------##
## D. Model switches     ##
##-----------------------##

#-- The default value of this parameter is True so that the new skim matrices are re-read with each iteration.
#-- Set to False to re-use skims kept in machine memory. This may be desirable for calibration runs to save runtime.
RunModel.RereadMatrixDataOnRestart=True

#-- The default value for this parameter is "None" so that new households are created from the synthetic population files
#-- by the HouseholdDataManager and a fresh model run is started.
#-- Alternatively, the parameter can be set to "ao", "imtf", "jtf", "inmtf", "awf" or "stf" so that the model run starts with
#-- Auto Ownership, Individual Mandatory Tour Frequency, Joint Tour Frequency, Individual Non-Mandatory Tour Frequency,
#-- At-Work Tour Frequency, or Stop Frequency model, respectively. In this case, it is assumed that the HouseholdDataManager
#-- holds the household/person objects, as well as the results from the earlier model components from the previous run.
RunModel.RestartWithHhServer=none

RunModel.PopulationSynthesizer=False


#-- Set the following properties to turn the corresponding model components on (if set to "True") or off (if set to "False")
#-- The state of these properties need to be consistent with the value of the RestartWithHhServer property.
RunModel.UsualWorkAndSchoolLocationChoice                   = true
UsualWorkAndSchoolLocationChoice.RunFlag.Work       	    = true
UsualWorkAndSchoolLocationChoice.RunFlag.University 	    = true
UsualWorkAndSchoolLocationChoice.RunFlag.School             = true
RunModel.AutoOwnership                                      = true
RunModel.FreeParking                                        = true
RunModel.CoordinatedDailyActivityPattern                    = true
RunModel.IndividualMandatoryTourFrequency                   = true
RunModel.MandatoryTourDepartureTimeAndDuration              = true
RunModel.MandatoryTourModeChoice                            = true
RunModel.JointTourFrequency                                 = true
RunModel.JointTourLocationChoice                            = true
RunModel.JointTourDepartureTimeAndDuration                  = true
RunModel.JointTourModeChoice                                = true
RunModel.IndividualNonMandatoryTourFrequency                = true
RunModel.IndividualNonMandatoryTourLocationChoice           = true
RunModel.IndividualNonMandatoryTourDepartureTimeAndDuration = true
RunModel.IndividualNonMandatoryTourModeChoice               = true
RunModel.AtWorkSubTourFrequency                             = true
RunModel.AtWorkSubTourLocationChoice                        = true
RunModel.AtWorkSubTourDepartureTimeAndDuration              = true
RunModel.AtWorkSubTourModeChoice                            = true
RunModel.StopFrequency                                      = true
RunModel.StopLocation                                       = true


##-----------------------##
## E. Model parameters   ##
##-----------------------##

#-- The following 5 parameters specify the sample size for location choice models
UsualWorkAndSchoolLocationChoice.SampleOfAlternatives.SampleSize         = 30
JointTourLocationChoice.SampleOfAlternatives.SampleSize                  = 30
IndividualNonMandatoryTourLocationChoice.SampleOfAlternatives.SampleSize = 30
AtWorkSubtourLocationChoice.SampleOfAlternatives.SampleSize              = 30
StopLocationSoa.SampleSize                                               = 30

#-- The default value for this parameter is "False" so that shadow pricing is not applied to grade-school location choice
#-- Set to "True" to apply shadow pricing.
UsualWorkAndSchoolLocationChoice.ShadowPricingFlag.GradeSchool  = false

#-- The following parameters define the mean values of different income groups' value-of-time distribution (lognormal).
HouseholdManager.LowInc.MeanValueOfTime      =  6.01
HouseholdManager.MidInc.MeanValueOfTime      =  8.81
HouseholdManager.HighInc.MeanValueOfTime     = 10.44
HouseholdManager.VeryHighInc.MeanValueOfTime = 12.86

#-- Individuals' value of time are randomly drawn from the distribution corresponding to their income level,
#-- but truncated at the following min/max values
HouseholdManager.MinValueOfTime =  1.0
HouseholdManager.MaxValueOfTime = 50.0

#-- Auto operating cost, in year 2000 cents per mile
#-- Set by RuntimeConfiguration.py
Auto.Operating.Cost             = set_by_RuntimeConfiguration.py

# -- Year of model run
Model_Year                      = set_by_RuntimeConfiguration.py

#-- Mobility Scenario Parameters
#
#   AV.Share: Specifies the share of vehicles assumed to be AVs in the vehicle fleet
#             Auto ownership ASCs will be calibrated for different levels of AV penetration
#   AV.ProbabilityBoost: The increased probability (multiplicative) for using AVs for tours, based on autos to drivers. The highest
#             this should go is 1.2
#   AV.IVTFactor: The auto in-vehicle time factor to apply to AVs
#   AV.ParkingCostFactor: The auto parking cost factor to apply to AVs, assuming some AVs are sent to remote locations or home
#   AV.CostPerMileFactor: The auto cost per mile factor to apply to AVs, assuming AVs are more efficient in terms of fuel consumption than human-driven vehicles
#   AV.TerminalTimeFactor: The factor to apply to terminal time for AVs, assuming AVs offer curbside passenger pickup/dropoff
#   TNC.shared.IVTFactor: The factor to apply to in-vehicle time for shared TNC mode, reflecting out-direction travel for pickup/dropoff of other passengers

Bike_Infra_C_IVT_Multiplier = set_by_RuntimeConfiguration.py
Sharing_Preferences_factor = set_by_RuntimeConfiguration.py
Means_Based_Tolling_Q1Factor = set_by_RuntimeConfiguration.py
Means_Based_Tolling_Q2Factor = set_by_RuntimeConfiguration.py
Means_Based_Fare_Q1Factor = set_by_RuntimeConfiguration.py
Means_Based_Fare_Q2Factor = set_by_RuntimeConfiguration.py
Adjust_TNCsingle_TourMode = set_by_RuntimeConfiguration.py
Adjust_TNCshared_TourMode = set_by_RuntimeConfiguration.py
Adjust_TNCsingle_TripMode = set_by_RuntimeConfiguration.py
Adjust_TNCshared_TripMode = set_by_RuntimeConfiguration.py

Mobility.AV.Share = set_by_RuntimeConfiguration.py
Mobility.AV.ProbabilityBoost.AutosLTDrivers = set_by_RuntimeConfiguration.py
Mobility.AV.ProbabilityBoost.AutosGEDrivers = set_by_RuntimeConfiguration.py
Mobility.AV.IVTFactor = set_by_RuntimeConfiguration.py
Mobility.AV.ParkingCostFactor = set_by_RuntimeConfiguration.py
Mobility.AV.CostPerMileFactor = set_by_RuntimeConfiguration.py
Mobility.AV.TerminalTimeFactor = set_by_RuntimeConfiguration.py
Mobility.TNC.shared.IVTFactor = set_by_RuntimeConfiguration.py

#-- Taxi and TNC cost and wait time parameters
#
# 3 modes: taxi, TNC - single, and TNC - shared
# baseFare: Initial fare
# costPerMile: The cost per mile
# costPerMinute: The cost per minute
# costMinimum: The minimum cost (for TNC modes only)
#
# Wait times are drawn from a distribution by area type (emp+hh)/sq. miles
# The mean and standard deviation is given for each area type range
# The ranges are configurable, set by WaitTimeDistribution.EndPopEmpPerSqMi

taxi.baseFare = set_by_RuntimeConfiguration.py
taxi.costPerMile = set_by_RuntimeConfiguration.py
taxi.costPerMinute = set_by_RuntimeConfiguration.py

TNC.single.baseFare = set_by_RuntimeConfiguration.py
TNC.single.costPerMile = set_by_RuntimeConfiguration.py
TNC.single.costPerMinute = set_by_RuntimeConfiguration.py
TNC.single.costMinimum = set_by_RuntimeConfiguration.py

# use lower costs
TNC.shared.baseFare = set_by_RuntimeConfiguration.py
TNC.shared.costPerMile = set_by_RuntimeConfiguration.py
TNC.shared.costPerMinute = set_by_RuntimeConfiguration.py
TNC.shared.costMinimum = set_by_RuntimeConfiguration.py

#Note: the following comma-separated value properties cannot have spaces between them, or else the RuntimeConfiguration.py code won't work
TNC.single.waitTime.mean = set_by_RuntimeConfiguration.py
TNC.single.waitTime.sd = set_by_RuntimeConfiguration.py

TNC.shared.waitTime.mean =  set_by_RuntimeConfiguration.py
TNC.shared.waitTime.sd = set_by_RuntimeConfiguration.py

Taxi.waitTime.mean = set_by_RuntimeConfiguration.py
Taxi.waitTime.sd = set_by_RuntimeConfiguration.py

WaitTimeDistribution.EndPopEmpPerSqMi = 500,2000,5000,15000,9999999999

# TNC is not very available in 2015
# TripModeChoice needs to know if the model year is 2015
MODEL_YEAR = 1999

##--------------------------##
## F. Model-specific inputs ##
##--------------------------##

#-- The following are names of UEC files
UecFile.DestinationChoice                   = CTRAMP/model/DestinationChoice.xls
UecFile.SampleOfAlternativesChoice          = CTRAMP/model/DestinationChoiceAlternativeSample.xls
UecFile.AutoOwnership                       = CTRAMP/model/AutoOwnership.xls
UecFile.FreeParking                         = CTRAMP/model/FreeParkingEligibility.xls
UecFile.CoordinatedDailyActivityPattern     = CTRAMP/model/CoordinatedDailyActivityPattern.xls
UecFile.TourModeChoice                      = CTRAMP/model/ModeChoice.xls
UecFile.IndividualMandatoryTourFrequency    = CTRAMP/model/IndividualMandatoryTourFrequency.xls
UecFile.TourDepartureTimeAndDuration        = CTRAMP/model/TourDepartureAndDuration.xls
UecFile.AtWorkSubtourFrequency              = CTRAMP/model/AtWorkSubtourFrequency.xls
UecFile.JointTourFrequency                  = CTRAMP/model/JointTours.xls
UecFile.IndividualNonMandatoryTourFrequency = CTRAMP/model/IndividualNonMandatoryTourFrequency.xls
UecFile.StopFrequency                       = CTRAMP/model/StopFrequency.xls
UecFile.StopLocation                        = CTRAMP/model/StopDestinationChoice.xls
UecFile.StopLocationSoa                     = CTRAMP/model/StopDestinationChoiceAlternativeSample.xls
UecFile.TripModeChoice                      = CTRAMP/model/TripModeChoice.xls
UecFile.ParkingLocationChoice               = CTRAMP/model/ParkingLocationChoice.xls

#-- Names of files that define the choice alternatives for various model components
UsualWorkAndSchoolLocationChoice.AlternativesList.InputFile = CTRAMP/model/DestinationChoiceAlternatives.csv
UsualWorkAndSchoolLocationChoice.SizeCoefficients.InputFile = CTRAMP/model/DestinationChoiceSizeCoefficients.csv
MandatoryTourDepartureAndDuration.AlternativesList.InputFile = CTRAMP/model/TourDepartureAndDurationAlternatives.csv
IndividualNonMandatoryTourFrequency.AlternativesList.InputFile = CTRAMP/model/IndividualNonMandatoryTourFrequencyAlternatives.csv
CBDParkingAlternatives.file = CTRAMP/model/CBDParkingZones.csv

#-- Names of files that provide additional probability lookup tables for model components
IndividualNonMandatoryTour.FrequencyExtension.ProbabilityFile  = CTRAMP/model/IndividualNonMandatoryTourFrequencyExtensionProbabilities.csv
StopDestinationChoice.SizeCoefficients.InputFile = CTRAMP/model/StopDestinationChoiceSizeCoefficients.csv
StopPurposeLookup.Proportions = CTRAMP/model/StopPurposeLookup.csv
TripDepartTime.Proportions = CTRAMP/model/BATS2000_TripHour_ByTourHour_adjusted.csv

#-- Location Choice parameters
#-- Set by RuntimeConfiguration.py
UsualWorkAndSchoolLocationChoice.ShadowPrice.Input.File          = set_by_RuntimeConfiguration.py
UsualWorkAndSchoolLocationChoice.ShadowPricing.MaximumIterations = set_by_RuntimeConfiguration.py

##-----------------------##
## G. Output options     ##
##-----------------------##

#-- Set the following properties if outputs from CTRAMP are to be written to csv files
Results.WriteDataToFiles  = true
Results.HouseholdDataFile = main/householdData.csv
Results.PersonDataFile    = main/personData.csv
Results.IndivTourDataFile = main/indivTourData.csv
Results.JointTourDataFile = main/jointTourData.csv
Results.IndivTripDataFile = main/indivTripData.csv
Results.JointTripDataFile = main/jointTripData.csv

#-- Set the following properties if outputs from CTRAMP are to be written to a database
Results.WriteDataToDatabase = true
Results.HouseholdTable = main/household_data
Results.PersonTable    = main/person_data
Results.IndivTourTable = main/indiv_tour_data
Results.JointTourTable = main/joint_tour_data
Results.IndivTripTable = main/indiv_trip_data
Results.JointTripTable = main/joint_trip_data

#-- Set to "True" to include mode choice utility and probability values in the tour data file/table
#-- This feature may be useful for debugging or computation of logsums
TourModeChoice.Save.UtilsAndProbs = False

#-- File names to which results from individual model components are stored.
Results.UsualWorkAndSchoolLocationChoice = main/wsLocResults.csv
Results.AutoOwnership                    = main/aoResults.csv
Results.CoordinatedDailyActivityPattern  = main/cdapResults.csv
Results.IndividualMandatoryTourFrequency = main/imtfResults.csv
Results.JointTour                        = main/jointModelsResults.csv
Results.IndividualNonMandatoryTour       = main/indivNonMandatoryTourResults.csv
Results.AtWorkSubour                     = main/atWorkSubtourResults.csv
Results.TourStop                         = main/tourStopResults.csv

#-- Prefix of file name to which shadow prices are written out. For iteration i, the prefix is followed by "_i".
UsualWorkAndSchoolLocationChoice.ShadowPricing.OutputFile   = main/ShadowPricing.csv

#-- File name to which size terms from mandatory location choice model are written
UsualWorkAndSchoolLocationChoice.SizeTerms.OutputFile       = main/DestinationChoiceSizeTerms.csv

#-- Set the following three properties in order to save and later load households from disk object file.
#-- Note: number.of.files * maximum.hhs.per.file must be greater than or equal to the actual number of households to be written/read.
#-- If using this disk-based option, which requires less memory but runs substantially slower than the HH server in-memory option,
#-- do not start the HouseholdDataserver in "runModel.cmd".
#Households.disk.object.base.name            = main/householdManager.diskObject
#Households.disk.object.maximum.hhs.per.file = 100000
#Households.disk.object.number.of.files      = 1


##------------------------------##
## H. Computational parameters  ##
##------------------------------##

#-- number.initialization.packets defines the number of "small" packets, the size of which set by initialization.packet.size,
#-- submitted at the beginning of a distributed task to minimize synchronization issues that significantly slow down model object set-up.
number.initialization.packets = 20
initialization.packet.size = 500

#-- Once the initial small packets have run, all the model objects will have been set up and the task objects can process bigger chunks of households.
#-- The size of these chunks are set below.
distributed.task.packet.size  = 5000


##-----------------------##
## I. Debug options      ##
##-----------------------##

#-- Set to the ID(s) of any household to write out trace information
# Debug.Trace.HouseholdIdList=64764

#-- Set to the ID of a single household to run the simulation with
#run.this.household.only=
