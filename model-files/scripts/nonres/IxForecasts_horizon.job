; ----------------------------------------------------------------------------------------------------------------
;
; IxForecasts.job
;
; TP+ script to create a daily matrix that includes internal/external, external/internal, and external/external
; passenger vehicle travel (based on Census 2000 journey-to-work flows).  These trip tables are based on total 
; traffic counts, which include trucks, but trucks are not explicitly segmented from passenger vehicles.  This 
; short-coming is a hold-over from BAYCAST and will be addressed in the next model update.
;
; The row and column totals are taken from count station data provided by Caltrans.  The BAYCAST 2006 IX matrix is
; used as the base matrix and scaled to match forecast year growth assumptions. The script generates estimates 
; for the following forecast years: 2005, 2010, 2015, 2020, 2025, 2030, 2035, and 2040.  The growth rates were 
; discussed with neighboring MPOs as part of the SB 375 target setting process. 
;
; Input:  (1)  Station-specific assumed growth rates and commute shares for each forecast year
;              (the lack of external/external movements through the region allows simple factoring of cells
;              without re-balancing) (ixex_config.dbf)
;         (2)  An input base matrix derived from the Census journey-to-work data (ixDaily2015.tpp) and 
;              totals (ixDaily2015_totals.dbf)
;         (3)  Environment variables: %MODEL_YEAR% (e.g. 2015, 2035, 2050, etc) and
;                                     %FUTURE% (one of PBA50, CleanAndGreen, BackToTheFuture, or RisingTidesFallingFortunes)
;
; Output: (1) Four-table, forecast-year specific trip tables containing internal/external, external/internal, and 
;             external/external vehicle (xxx or person xxx) travel. (nonres\ixDailyx4.tpp)
;
; Notes:  (1)
;
; See also: (1) IxTimeOfDay.job, which applies diurnal factors to convert this P/A matrix to an time-period-specific
;               O/D matrix.
;
; version:  Travel Model One
; authors:  dto (2010 12 30), lmz (2018 12 31)
; version:  Travel Model 1.5+BCM
; authors:  jmh (02/23/2023)
; ----------------------------------------------------------------------------------------------------------------
token_future = '%FUTURE%'
FIRST_EXT_ZONE = %TAZ_COUNT% + 1

*"%PYTHON_PATH%\python.exe" %BASE_SCRIPTS%\preprocess\csvToDbf.py nonres/Inputs/ixDaily2015_totals.csv nonres/ixDaily2015_totals.dbf
IF (RETURNCODE > 0) abort

*"%PYTHON_PATH%\python.exe" %BASE_SCRIPTS%\preprocess\csvToDbf.py nonres/Inputs/ixex_config.csv nonres/ixex_config.dbf
IF (RETURNCODE > 0) abort

; Create MODEL_YEAR table using assumption for FUTURE
run pgm = matrix

   ; Begin with 2005 base year matrix established above
   mati = nonres\Inputs\ixDaily2015.tpp
   
   ; Write out a year-specific matrix
   mato = nonres\ixDailyx4.tpp, mo = 1-4, name = ix_daily_da, ix_daily_sr2, ix_daily_sr3, ix_daily_total

   ; Also read the totals from 2015 calculated in previous step
   filei lookupi[1] = nonres\ixDaily2015_totals.dbf

   ; And assumptions from Box\Horizon and Plan Bay Area 2050\Futures Planning\Modeling Characteristics\Interregional Volume Assumptions\Interregional Volumes v2.xlsx
   filei lookupi[2] = nonres\ixex_config.dbf

   lookup lookupi=1, name=totals_2015,
     lookup[1]=EXT_ZONE, result=PROD,  ; productions
     lookup[2]=EXT_ZONE, result=ATTR   ; attractions

   lookup lookupi=2, name=growth,
     lookup[1]=EXT_ZONE, result=comm_share,
     lookup[2]=EXT_ZONE, result=slope

   ; summarize by external production and attraction zones - daily total
   ARRAY factor=33, prod_tot=33, attr_tot=33, total_modyear=33

   IF (I==1)

     ; first, figure out desired daily total
     LOOP EXT_ZONE = %TAZ_COUNT%+1,%TAZ_EXTS_COUNT%
       prod_total_2015 = totals_2015(1,EXT_ZONE)
       attr_total_2015 = totals_2015(2,EXT_ZONE)

       ; assumptions
       commute_share   = growth(1,EXT_ZONE)
       slope           = growth(2,EXT_ZONE)
       total_2015      = prod_total_2015 + attr_total_2015
       year_delta      = %MODEL_YEAR%-2015

       ; figure out 2015 desired total -- this is future-dependent
       IF ('%FUTURE%'='PBA50')

         IF (EXT_ZONE == @FIRST_EXT_ZONE@) PRINT LIST="--PBA50--%MODEL_YEAR%--  Non-commute share grows based on slope for ",year_delta," years"
         total_modyear[EXT_ZONE-@FIRST_EXT_ZONE@] = total_2015 + year_delta*(1.0-commute_share)*slope

       ELSEIF ('%FUTURE%'=='CleanAndGreen')

         IF (EXT_ZONE == @FIRST_EXT_ZONE@) PRINT LIST="--CleanAndGreen--%MODEL_YEAR%--  No growth"
         total_modyear[EXT_ZONE-@FIRST_EXT_ZONE@] = total_2015

       ELSEIF ('%FUTURE%'='BackToTheFuture')

         IF (EXT_ZONE == @FIRST_EXT_ZONE@) PRINT LIST="--BackToTheFuture--%MODEL_YEAR%--  Total share grows based on slope for ",year_delta," years, plus 50% for gateways to south and east"
         if (EXT_ZONE >= 1459 & EXT_ZONE <= 1471)
           total_modyear[EXT_ZONE-@FIRST_EXT_ZONE@] = total_2015 + year_delta*slope*1.5
         else
           total_modyear[EXT_ZONE-@FIRST_EXT_ZONE@] = total_2015 + year_delta*slope
         endif

       ELSEIF ('%FUTURE%'='RisingTidesFallingFortunes')

         IF (EXT_ZONE == @FIRST_EXT_ZONE@) PRINT LIST="--RisingTidesFallingFortunes--%MODEL_YEAR%--  Total share grows based on slope for ",year_delta," years"
         total_modyear[EXT_ZONE-@FIRST_EXT_ZONE@] = total_2015 + year_delta*slope

       ELSE
         print LIST="Do not understand token_future @token_future@, Using 2015 as Base"
         ;ABORT MSG="Do not understand token_future @token_future@"
		 IF (EXT_ZONE == @FIRST_EXT_ZONE@) PRINT LIST="--PBA50--%MODEL_YEAR%--  Non-commute share grows based on slope for ",year_delta," years"
         total_modyear[EXT_ZONE-@FIRST_EXT_ZONE@] = total_2015 + year_delta*(1.0-commute_share)*slope
       ENDIF

       if (total_2015 == 0)
         factor[EXT_ZONE-@FIRST_EXT_ZONE@] = 1.0
       else
         factor[EXT_ZONE-@FIRST_EXT_ZONE@] = total_modyear[EXT_ZONE-@FIRST_EXT_ZONE@]/total_2015
       endif

       PRINT LIST="For external zone ",EXT_ZONE, " prod_2015: ", prod_total_2015, " attr_2015: ", attr_total_2015, 
         " commute share: ", commute_share, " slope: ", slope,
         " total 2015: ", total_2015, " total model_year: ", total_modyear[EXT_ZONE-@FIRST_EXT_ZONE@], " => factor: ",factor[EXT_ZONE-@FIRST_EXT_ZONE@]

     ENDLOOP

     ; however there are X/X trips between 1461 and 1462 UPDATE: REPLACED 1461 WITH 6600 and  1462 with 6601 from the IZ_OZ_PCT_EXT data
     tot2015_6600_6601 = MATVAL(1,1,6600,6601) + MATVAL(1,2,6600,6601) + MATVAL(1,3,6600,6601)
     tot2015_6601_6600 = MATVAL(1,1,6601,6600) + MATVAL(1,2,6601,6600) + MATVAL(1,3,6601,6600)

     ; so if we scale those according to 1461, then 6601 will be short this much
     tot_6600 = (tot2015_6600_6601 + tot2015_6601_6600) * factor[6600-@FIRST_EXT_ZONE@]
     tot_6601 = (tot2015_6600_6601 + tot2015_6601_6600) * factor[6601-@FIRST_EXT_ZONE@]
     diff_6601 = tot_6601 - tot_6600

     PRINT LIST="XX trips for 6600-6601: ", tot2015_6600_6601, " 6601-6600: ", tot2015_6601_6600
     PRINT LIST="Using 6600 factor: ", tot_6600, "; Using 6601 factor: ", tot_6601, "; 6601 will be short by: ", diff_6601

     ; so make up for it by upping the modyear target. Assuming two XX vals factor to tot2015_6600, remove them from the calc
     total_2015 = totals_2015(1,6601) + totals_2015(2,6601)
     factor[6601 - @FIRST_EXT_ZONE@] = (total_modyear[6601-@FIRST_EXT_ZONE@]-tot_6600)/(total_2015-tot2015_6600_6601-tot2015_6601_6600)
     PRINT LIST=" => Updating factor 6601 to ", factor[6601 - @FIRST_EXT_ZONE@] 

   ENDIF

   jloop
   
      ; Apply gateway-specific adjustment factors
      ; (no X/X trips mean the gateways act independently, other than the pair we compensated for above)
      if (I >= @FIRST_EXT_ZONE@)

         ; 6600/6601 have XX trips -- use 6600 factor
         if ((I=6601) & (J=6600))
           mw[1] = mi.1.IX_Daily_DA  * factor[J-@FIRST_EXT_ZONE@]
           mw[2] = mi.1.IX_Daily_SR2 * factor[J-@FIRST_EXT_ZONE@]
           mw[3] = mi.1.IX_Daily_SR3 * factor[J-@FIRST_EXT_ZONE@]
         else
           mw[1] = mi.1.IX_Daily_DA  * factor[I-@FIRST_EXT_ZONE@]
           mw[2] = mi.1.IX_Daily_SR2 * factor[I-@FIRST_EXT_ZONE@]
           mw[3] = mi.1.IX_Daily_SR3 * factor[I-@FIRST_EXT_ZONE@]
         endif

      elseif (J >= @FIRST_EXT_ZONE@)
         mw[1] = mi.1.IX_Daily_DA  * factor[J-@FIRST_EXT_ZONE@]
         mw[2] = mi.1.IX_Daily_SR2 * factor[J-@FIRST_EXT_ZONE@]
         mw[3] = mi.1.IX_Daily_SR3 * factor[J-@FIRST_EXT_ZONE@]
      endif

      ; Sum the working matrices to form the total
      mw[4] = mw[1] + mw[2] + mw[3]
      IF (J>%TAZ_COUNT%) attr_tot[J-@FIRST_EXT_ZONE@] = attr_tot[J-@FIRST_EXT_ZONE@] + Mw[4]

   endjloop
   
   IF (I>%TAZ_COUNT%) prod_tot[I-@FIRST_EXT_ZONE@] = prod_tot[I-@FIRST_EXT_ZONE@] + ROWSUM(4)

   ; write production/attraction totals to the log file and dbf
   IF (I==ZONES)
     print LIST="-----RESULTS-----"
     LOOP EXT_ZONE = @FIRST_EXT_ZONE@,%TAZ_EXTS_COUNT%
       total = prod_tot[EXT_ZONE-@FIRST_EXT_ZONE@] + attr_tot[EXT_ZONE-@FIRST_EXT_ZONE@]
       print LIST="For external zone ",EXT_ZONE, " production: ", prod_tot[EXT_ZONE-@FIRST_EXT_ZONE@], " attraction: ", attr_tot[EXT_ZONE-@FIRST_EXT_ZONE@], " total: ", total
     ENDLOOP
   ENDIF
   
endrun
