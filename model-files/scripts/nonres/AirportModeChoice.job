; Airport mode choice model
; 
; This model runs mode choice for input air ground access trips. It uses the input trip tables as a 
; fixed distribution but converts them to person trips and scales them to enplanements - transferring 
; passengers. It then applies a mode choice model estimated by RSG for ACRP 01-35 using data for SFO.
;
; Simplifications: 
;  1. Uses ASCs for domestic short-term parking. Full model includes domestic vs. international constants.
;  2. Using average travel duration by market segment to compute parking costs
;  3. Applying transit constants for one checked bag to all markets
;  4. Applying transit constants for multiple travel party members to personal travel markets
;  5. Applying as multinomial since only one market in the original model had a significant nesting parameter
;
; applied to following airports: 
;     1: SFO (TAZ 339)
;     2: OAK (TAZ 874)
;     3: SJC (TAZ 434)



; loop on periods
loop period = 1, 5

  ; a two letter token is used for each time period
  if (period = 1)
    token_period = 'EA'

  elseif (period = 2)
    token_period = 'AM'

  elseif (period = 3)
    token_period = 'MD'

  elseif (period = 4)
    token_period = 'PM'

  elseif (period = 5)
    token_period = 'EV'

  endif
  
  run pgm = matrix
  
    ; input air passenger travel demand; DA, SR2, SR3, DATOLL, SR2TOLL, SR3TOLL
    filei mati[1] = nonres\tripsAirPax@token_period@.tpp
 
    ; output air passenger trips
    fileo mato[1] = nonres\TotalTripsAirPax@token_period@.tpp, mo=1-3, name = airport1trips,airport2trips,airport3trips
 
    ; read in the airport mode choice model block file, contains MC model coefficients and parameters
    read file = ctramp\scripts\block\AirportModeChoice.block
  
    jloop
      
      ;no intrazonals should be allowed
      if(i==j)
        continue
      endif
    
      if ((i = airport_1_taz) | (j = airport_1_taz))
        MW[1][J] = MW[1][J] + mi.1.DA[J] + mi.1.SR2[J] + mi.1.SR3[J] + mi.1.DATOLL[J] + mi.1.SR2TOLL[J] + mi.1.SR3TOLL[J]
      elseif ((i = airport_2_taz) | (j = airport_2_taz))
        MW[2][J] = MW[2][J] +  mi.1.DA[J] + mi.1.SR2[J] + mi.1.SR3[J] + mi.1.DATOLL[J] + mi.1.SR2TOLL[J] + mi.1.SR3TOLL[J]
      elseif ((i = airport_3_taz) | (j = airport_3_taz))
        MW[3][J] = MW[3][J] +  mi.1.DA[J] + mi.1.SR2[J] + mi.1.SR3[J] + mi.1.DATOLL[J] + mi.1.SR2TOLL[J] + mi.1.SR3TOLL[J]
      else
        continue
      endif
    endjloop 
    
    endrun
    run pgm matrix
      ; input air passenger travel demand; airport1trips,airport2trips,airport3trips
      filei mati[1] = nonres\TotalTripsAirPax@token_period@.tpp
 
     MW[1] = mi.1.airport1trips
     MW[2] = mi.1.airport2trips
     MW[3] = mi.1.airport3trips
     
     air1trips = air1trips+ ROWSUM(1)
     log VAR=air1trips
     air2trips = air2trips+ ROWSUM(2)
     log VAR=air2trips
     air3trips = air3trips+ ROWSUM(3)
     log VAR=air3trips
    
    endrun    
    run pgm = matrix
  
      ; input air passenger travel demand; airport1trips,airport2trips,airport3trips
      filei mati[1] = nonres\TotalTripsAirPax@token_period@.tpp
 
      ; output air passenger percentages
      fileo mato[1] = nonres\PercentAirPax@token_period@.tpp, mo=1-3, name = airport1pct,airport2pct,airport3pct, DEC=D,D,D
 
    ; read in the airport mode choice model block file, contains MC model coefficients and parameters
    read file = ctramp\scripts\block\AirportModeChoice.block
  
    trips1 = @MATRIX.air1trips@
    trips2 = @MATRIX.air2trips@
    trips3 = @MATRIX.air3trips@
    PRINT LIST="airport 1 trips: ", trips1, " airport 2 trips: ", trips2, " airport 3 trips: ", trips3

     
    jloop
      
      MW[1][J] = mi.1.airport1trips[J]/trips1
      MW[2][J] = mi.1.airport2trips[J]/trips2
      MW[3][J] = mi.1.airport3trips[J]/trips3
      
    endjloop 
     
    
    endrun    
  ; loop on segments
  loop segment = 1, 4
     
    if (segment = 1)
      token_segment = 'res_per'
    elseif (segment = 2)
      token_segment = 'res_bus'
    elseif (segment = 3)
      token_segment = 'vis_per'
    elseif (segment = 4)
      token_segment = 'vis_bus'
    endif
    
    
    run pgm = matrix

      ; input air passenger travel demand percentages; airport1pct,airport2pct,airport3pct
        filei mati[1] = nonres\PercentAirPax@token_period@.tpp
      
      ; DA skims: TIMEDA, DISTDA, BTOLLDA, TOLLTIMEDA, TOLLDISTDA, TOLLBTOLLDA, TOLLVTOLLDA
        filei mati[2] = skims\DA_@token_period@.tpp
        
      ; S2 skims: TIMES2, DISTS2, BTOLLS2, TOLLTIMES2, TOLLDISTS2, TOLLBTOLLS2, TOLLVTOLLS2
      filei mati[3] = skims\S2_@token_period@.tpp
        
      ; S3+ skims: TIMES3, DISTS3, BTOLLS3, TOLLTIMES3, TOLLDISTS3, TOLLBTOLLS3, TOLLVTOLLS3
      filei mati[4] = skims\S3_@token_period@.tpp
        
      ; transit skims: ivt, iwait, xwait, wait, wacc, waux, wegr, dtime, ddist, fare, boards, ivtLOC, ivtLRF, ivtEXP, ivtHVY, ivtCOM, ivtAAM, ivtFerry, etc.
      filei mati[5] = skims\trnskm@token_period@_wlk_aam_drv.tpp
      filei mati[6] = skims\trnskm@token_period@_drv_aam_wlk.tpp
        
      ; read in the highway assignment parameter block 
      read file = ctramp\scripts\block\hwyparam.block
      
      ; read in the airport mode choice model block file, contains MC model coefficients and parameters
      read file = ctramp\scripts\block\AirportModeChoice.block
      
      ; write out the time-period and market-specific utilities
      fileo mato[1] = nonres\utilitiesAir_@token_period@_@token_segment@.tpp, mo = 1-11, name =  u_tran,u_pudo,u_shtp,u_lngp,u_offp,u_rent,
          u_taxi,u_tnc,u_limo,u_shrv,u_othb
      
      ; write out the time-period and market-specific trips collapsed by assignment mode
      fileo mato[2] = nonres\tripsAir_@token_period@_@token_segment@.tpp, mo = 12-16, name =  dant, datl, s2nt, s2tl, trn
      
      if(@period@=1)
        per_pct = percent_EA
      elseif(@period@=2)
        per_pct = percent_AM
      elseif(@period@=3)
        per_pct = percent_MD
      elseif(@period@=4)
        per_pct = percent_PM
      elseif(@period@=5)
        per_pct = percent_EV
      endif
      
      if (@segment@ = 1)
        token_segment = 'res_per'
        party_size=2
        c_ivt = c_ivt_res_per
        c_cst = c_cst_res_per
        c_xfr = c_xfr_res_per
        asc_pud = asc_pud_res_per
        asc_sht = asc_sht_res_per
        asc_lgt = asc_lgt_res_per
        asc_off = asc_off_res_per
        asc_rnt = asc_rnt_res_per
        asc_txi = asc_txi_res_per
        asc_tnc = asc_tnc_res_per
        asc_lmo = asc_lmo_res_per
        asc_srv = asc_srv_res_per
        asc_trn = asc_trn_res_per
        asc_osb = asc_osb_res_per
        asc_bag = asc_bag_res_per
        asc_pty = asc_pty_res_per
        c_cst_aam = c_cst_aam_res_per        
        c_rel_aam = c_rel_aam_res_per
        c_dst_aam = c_dst_aam_res_per
        c_inc_aam = c_inc_aam_res_per
        asc_aam = asc_aam_res_per    
        asc_bus_aam = asc_bus_aam_res_per
        asc_air_aam = asc_air_aam_res_per
        asc_aut_aam = asc_aut_aam_res_per
        asc_rem_aam = asc_rem_aam_res_per
        inc_aam = inc_aam_res_per
        airport_1_market_factor = airport_1_res_per_share
        airport_2_market_factor = airport_2_res_per_share
        airport_3_market_factor = airport_3_res_per_share
        airport_1_dur = airport_1_dur_res_per
        airport_2_dur = airport_1_dur_res_per
        airport_3_dur = airport_1_dur_res_per
  
      elseif (@segment@ = 2)
        token_segment = 'res_bus'
        party_size=1
        c_ivt = c_ivt_res_bus
        c_cst = c_cst_res_bus
        c_xfr = c_xfr_res_bus
        asc_pud = asc_pud_res_bus
        asc_sht = asc_sht_res_bus
        asc_lgt = asc_lgt_res_bus
        asc_off = asc_off_res_bus
        asc_rnt = asc_rnt_res_bus
        asc_txi = asc_txi_res_bus
        asc_tnc = asc_tnc_res_bus
        asc_lmo = asc_lmo_res_bus
        asc_srv = asc_srv_res_bus
        asc_trn = asc_trn_res_bus
        asc_osb = asc_osb_res_bus
        asc_bag = asc_bag_res_bus
        asc_pty = asc_pty_res_bus
        c_cst_aam = c_cst_aam_res_bus        
        c_rel_aam = c_rel_aam_res_bus
        c_dst_aam = c_dst_aam_res_bus
        c_inc_aam = c_inc_aam_res_bus
        asc_aam = asc_aam_res_bus    
        asc_bus_aam = asc_bus_aam_res_bus
        asc_air_aam = asc_air_aam_res_bus
        asc_aut_aam = asc_aut_aam_res_bus
        asc_rem_aam = asc_rem_aam_res_bus
        inc_aam = inc_aam_res_bus
        airport_1_market_factor = airport_1_res_bus_share
        airport_2_market_factor = airport_2_res_bus_share
        airport_3_market_factor = airport_3_res_bus_share
        airport_1_dur = airport_1_dur_res_bus
        airport_2_dur = airport_1_dur_res_bus
        airport_3_dur = airport_1_dur_res_bus
     
      elseif (@segment@ = 3)
        token_segment = 'vis_per'
        party_size=2
        c_ivt = c_ivt_vis_per
        c_cst = c_cst_vis_per
        c_xfr = c_xfr_vis_per
        asc_pud = asc_pud_vis_per
        asc_sht = asc_sht_vis_per
        asc_lgt = asc_lgt_vis_per
        asc_off = asc_off_vis_per
        asc_rnt = asc_rnt_vis_per
        asc_txi = asc_txi_vis_per
        asc_tnc = asc_tnc_vis_per
        asc_lmo = asc_lmo_vis_per
        asc_srv = asc_srv_vis_per
        asc_trn = asc_trn_vis_per
        asc_osb = asc_osb_vis_per
        asc_bag = asc_bag_vis_per
        asc_pty = asc_pty_vis_per
        c_cst_aam = c_cst_aam_vis_per        
        c_rel_aam = c_rel_aam_vis_per
        c_dst_aam = c_dst_aam_vis_per
        c_inc_aam = c_inc_aam_vis_per
        asc_aam = asc_aam_vis_per    
        asc_bus_aam = asc_bus_aam_vis_per
        asc_air_aam = asc_air_aam_vis_per
        asc_aut_aam = asc_aut_aam_vis_per
        asc_rem_aam = asc_rem_aam_vis_per
        inc_aam = inc_aam_vis_per
        airport_1_market_factor = airport_1_vis_per_share
        airport_2_market_factor = airport_2_vis_per_share
        airport_3_market_factor = airport_3_vis_per_share
        airport_1_dur = airport_1_dur_vis_per
        airport_2_dur = airport_1_dur_vis_per
        airport_3_dur = airport_1_dur_vis_per
        
      elseif (@segment@ = 4)
        token_segment = 'vis_bus'
        party_size=1
        c_ivt = c_ivt_vis_bus
        c_cst = c_cst_vis_bus
        c_xfr = c_xfr_vis_bus
        asc_pud = asc_pud_vis_bus
        asc_sht = asc_sht_vis_bus
        asc_lgt = asc_lgt_vis_bus
        asc_off = asc_off_vis_bus
        asc_rnt = asc_rnt_vis_bus
        asc_txi = asc_txi_vis_bus
        asc_tnc = asc_tnc_vis_bus
        asc_lmo = asc_lmo_vis_bus
        asc_srv = asc_srv_vis_bus
        asc_trn = asc_trn_vis_bus
        asc_osb = asc_osb_vis_bus
        asc_bag = asc_bag_vis_bus
        asc_pty = asc_pty_vis_bus
        c_cst_aam = c_cst_aam_vis_bus        
        c_rel_aam = c_rel_aam_vis_bus
        c_dst_aam = c_dst_aam_vis_bus
        c_inc_aam = c_inc_aam_vis_bus
        asc_aam = asc_aam_vis_bus    
        asc_bus_aam = asc_bus_aam_vis_bus
        asc_air_aam = asc_air_aam_vis_bus
        asc_aut_aam = asc_aut_aam_vis_bus
        asc_rem_aam = asc_rem_aam_vis_bus
        inc_aam = inc_aam_vis_bus
        airport_1_market_factor = airport_1_vis_bus_share
        airport_2_market_factor = airport_2_vis_bus_share
        airport_3_market_factor = airport_3_vis_bus_share
        airport_1_dur = airport_1_dur_vis_bus
        airport_2_dur = airport_1_dur_vis_bus
        airport_3_dur = airport_1_dur_vis_bus
      endif
    
    jloop
    
    if ((i = airport_1_taz) | (i = airport_2_taz) | (i = airport_3_taz))
      direction = 'from_airport'
    elseif ((j = airport_1_taz) | (j = airport_2_taz) | (j = airport_3_taz))
      direction = 'to_airport'
    else
      continue
    endif
  
    if ((i = airport_1_taz) | (j = airport_1_taz))
      shtcph = airport_1_shtcph
      lngcpd = airport_1_lngcpd
      offcpd = airport_1_offcpd
      dur = airport_1_dur
      trips = airport_1_passengers * airport_1_market_factor * per_pct * mi.1.airport1pct[J]
 
    elseif ((i = airport_2_taz) | (j = airport_2_taz))
      shtcph = airport_2_shtcph
      lngcpd = airport_2_lngcpd
      offcpd = airport_2_offcpd
      market_factor = airport_2_market_factor
      dur = airport_2_dur
      passengers = airport_2_passengers
      trips = airport_2_passengers * airport_2_market_factor * per_pct * mi.1.airport2pct[J]

    elseif ((i = airport_3_taz) | (j = airport_3_taz))
      shtcph = airport_3_shtcph
      lngcpd = airport_3_lngcpd
      offcpd = airport_3_offcpd
      market_factor = airport_3_market_factor
      dur = airport_3_dur
      passengers = airport_3_passengers
      trips = airport_3_passengers * airport_3_market_factor * per_pct * mi.1.airport3pct[J]

    endif

    u_dant_noaoc = -999
    u_datl_noaoc = -999
    u_s2nt_noaoc = -999
    u_s2tl_noaoc = -999
    u_tran = -999
    u_pudo = -999
    u_shtp = -999
    u_lngp = -999
    u_offp = -999
    u_rent = -999
    u_taxi = -999
    u_tnc = -999
    u_limo = -999
    u_shrv = -999
    u_othb = -999
    
    u_dant_noaoc =  c_ivt * mi.2.TIMEDA[j] + c_cst * cpi_factor * mi.2.BTOLLDA[j]/100 
       
    if ( mi.2.TOLLVTOLLDA[j] > 0)
      u_datl_noaoc = c_ivt * mi.2.TOLLTIMEDA[j] + c_cst * cpi_factor * (mi.2.TOLLBTOLLDA[j] + mi.2.TOLLVTOLLDA)/100 
    else
      u_datl_noaoc = -999
    endif

    u_s2nt_noaoc =  c_ivt * mi.3.TIMES2[j] + c_cst * cpi_factor * mi.3.BTOLLS2[j]/100 
       
    if ( mi.3.TOLLVTOLLS2[j] > 0)
      u_s2tl_noaoc = c_ivt * mi.3.TOLLTIMES2[j] + c_cst * cpi_factor * (mi.3.TOLLBTOLLS2[j] + mi.3.TOLLVTOLLS2)/100 
    else
      u_s2tl_noaoc = -999
    endif
        
    ; compute probability splits between toll and non-toll choices
    p_dant = 1.0
    p_datl = 0.0
    
    p_s2nt = 1.0
    p_s2tl = 0.0
        
    ; calculate toll/non-toll probabilities assuming a nesting coefficient of 0.25 (multiplying utilities by 1/0.25 = 4)
    if(u_datl_noaoc > -500)
       p_dant = EXP(u_dant_noaoc * 4)/(EXP(u_dant_noaoc * 4) + EXP(u_datl_noaoc * 4))
       p_datl = 1.0 - p_dant
    endif
    
    if(u_s2tl_noaoc > -500)
       p_s2nt = EXP(u_s2nt_noaoc * 4)/(EXP(u_s2nt_noaoc *4) + EXP(u_s2tl_noaoc *4))
       p_s2tl = 1.0 - p_s2nt
    endif
      
    ; base transit utility on direction. From airport uses walk-trn-drive, to airport uses drive-transit-walk. Premium mode must be used.  
    if( direction = 'from_airport')
      if((mi.5.ivtLRF[j] + mi.5.ivtHVY[j] + mi.5.ivtCOM[j] + mi.5.ivtAAM[j] ) >0)
    
        u_tran = c_ivt * (mi.5.ivt[j]/100 + 1.5 *mi.5.iwait[j]/100 + 2.5 * mi.5.xwait[j]/100 + 2.0 * (mi.5.wacc[j] + mi.5.waux[j] + mi.5.wegr[j] + mi.5.dtime[j])/100) +
          c_xfr * (mi.5.boards[j] - 1.0) + asc_pty + asc_bag
       
        ; add AAM utility component if AAM in path
        if( mi.5.ivtAAM[j] > 0)
          
        u_tran = u_tran + c_cst_aam * cpi_factor * mi.5.fare[j]/100 *POW((mi.2.DISTDA[j]/base_dst),c_dst_aam)*POW((inc_aam/base_inc),c_inc_aam) +
            c_rel_aam * AAM.probability.delay * AAM.average.delay +
            asc_aut_aam * AAM.autonomous.indicator +
            asc_rem_aam * AAM.remote.indicator +
            asc_aam + asc_bus_aam + asc_air_aam
          else
            u_tran = u_tran + c_cst * cpi_factor * mi.5.fare[j]/100
            
          endif
        endif
      else
      if((mi.6.ivtLRF[j] + mi.6.ivtHVY[j] + mi.6.ivtCOM[j] + mi.6.ivtAAM[j] ) >0)
      
       u_tran = c_ivt * (mi.6.ivt[j]/100 + 1.5 *mi.6.iwait[j]/100 + 2.5 * mi.6.xwait[j]/100 + 2.0 * (mi.6.wacc[j] + mi.6.waux[j] + mi.6.wegr[j] + mi.6.dtime[j])/100) +
         c_xfr * (mi.5.boards[j] - 1.0) + asc_pty + asc_bag
      
       ; add AAM utility component if AAM in path
       if( mi.6.ivtAAM[j] > 0)
         
         u_tran = u_tran + c_cst_aam * cpi_factor * mi.6.fare[j]/100 *POW((mi.2.DISTDA[j]/base_dst),c_dst_aam)*POW((inc_aam/base_inc),c_inc_aam) +
           c_rel_aam * AAM.probability.delay * AAM.average.delay +
           asc_aut_aam * AAM.autonomous.indicator +
           asc_rem_aam * AAM.remote.indicator +
           asc_aam + asc_bus_aam + asc_air_aam
      else
        u_tran = u_tran + c_cst * cpi_factor * mi.6.fare[j]/100
          
        endif
      endif
    endif
       
    ; pickup/dropoff - use shared ride 2 non-toll OD utility  
    u_pudo = u_s2nt_noaoc + c_cst * cpi_factor * mi.3.DISTS2[j] * AUTOOPC/100 + asc_pud
    
    ; short-term parking - use shared ride 2 non-toll OD utility, assume 1 hour duration 
    u_shtp = u_s2nt_noaoc + c_cst *  (cpi_factor * mi.3.DISTS2[j] * AUTOOPC/100  + shtcph * 1.0) + asc_sht
    
    ; long-term parking - use drive alone non-toll OD utility; assume 15 minutes extra time
    u_lngp = u_dant_noaoc + c_ivt * 15.0 + c_cst * (cpi_factor * mi.2.DISTDA[j] * AUTOOPC/100  + lngcpd * dur) + asc_lgt
    
    ; off-site parking - use drive alone non-toll OD utility; assume 30 minutes extra time
    u_offp = u_dant_noaoc + c_ivt * 30.0 + c_cst * (cpi_factor * mi.2.DISTDA[j] * AUTOOPC/100  + offcpd * dur) + asc_off
    
    ; rental car; don't include AOC since its often included in cost of rental; assume 30 minutes extra time
    u_rent = u_dant_noaoc + c_ivt * 30.0 + c_cst * (rental_cpd * dur) + asc_off
    
    ; taxi; use special cost function
    u_taxi = u_s2nt_noaoc + c_cst *(taxi.baseFare + mi.3.DISTS2[j] * taxi.costPerMile +
      mi.3.TIMES2[j] * taxi.costPerMinute ) + asc_txi
        
    ; tnc; use special cost function
      u_tnc = u_s2nt_noaoc + c_cst * MAX((TNC.single.baseFare + mi.3.DISTS2[j]  * TNC.single.costPerMile +
        mi.3.TIMES2[j] * TNC.single.costPerMinute ), TNC.single.costMinimum) + asc_tnc
        
    ; limo; use special cost function, assume 20% higher cost for limo
    u_limo = u_s2nt_noaoc + c_cst *(taxi.baseFare + mi.3.DISTS2[j] * taxi.costPerMile + 
      mi.3.TIMES2[j] * taxi.costPerMinute )*1.2 + asc_lmo
      
    ; shared-ride van; assume 30 minute extra time
    u_shrv = u_s2nt_noaoc + c_ivt * 30.0 + c_cst * sharedvan_cost + asc_srv
     
    ; other scheduled bus. Not sure what to make utility. setting to -999
    u_othb = -999
       
    ;exponentiated utilities!
    e_tran = 0.0
    e_pudo = 0.0
    e_shtp = 0.0
    e_lngp = 0.0
    e_offp = 0.0
    e_rent = 0.0
    e_taxi = 0.0
    e_tnc = 0.0
    e_limo = 0.0
    e_shrv = 0.0
    e_othb = 0.0
    
    if(u_tran > -500)
      e_tran = EXP(u_tran)
    endif
    
    if(u_pudo > -500)
      e_pudo = EXP(u_pudo)
    endif
    
    if(u_shtp > -500)
      e_shtp = EXP(u_shtp)
    endif
    
    if(u_lngp > -500)
      e_lngp = EXP(u_lngp)
    endif
    
    if(u_offp > -500)
      e_offp = EXP(u_offp)
    endif
    
    if(u_rent > -500)
      e_rent = EXP(u_rent)
    endif
    
    if(u_taxi > -500)
      e_taxi = EXP(u_taxi)
    endif
     
    if(u_tnc > -500)
     e_tnc= EXP(u_tnc)
    endif
     
    if(u_limo > -500)
      e_limo = EXP(u_limo)
    endif
     
    if(u_shrv > -500)
      e_shrv = EXP(u_shrv)
    endif
     
    if(u_othb > -500)
      e_othb = EXP(u_othb)
    endif
       
    sum_exp = e_tran + e_pudo + e_shtp + e_lngp + e_offp + e_rent + e_taxi + e_tnc + e_limo + e_shrv + e_othb
     
    ;probabilities!
    p_tran = e_tran/sum_exp
    p_pudo = e_pudo/sum_exp
    p_shtp = e_shtp/sum_exp
    p_lngp = e_lngp/sum_exp
    p_offp = e_offp/sum_exp
    p_rent = e_rent/sum_exp
    p_taxi = e_taxi/sum_exp
    p_tnc =  e_tnc/sum_exp
    p_limo = e_limo/sum_exp
    p_shrv = e_shrv/sum_exp
    p_othb = e_othb/sum_exp
    
    ;check here that they sum to 1.0
    
    MW[1][J] = u_tran
    MW[2][J] = u_pudo
    MW[3][J] = u_shtp
    MW[4][J] = u_lngp
    MW[5][J] = u_offp
    MW[6][J] = u_rent
    MW[7][J] = u_taxi
    MW[8][J] = u_tnc
    MW[9][J] = u_limo
    MW[10][J] = u_shrv
    MW[11][J] = u_othb
     
    ;da-nt: person arriving to pickup person or leaving after dropping off; plus short-term, taxi, tnc, limo, shared-ride van, other bus
    MW[12][J] = trips * p_dant * (p_pudo + p_shtp + p_taxi + p_tnc + p_limo + p_shrv + p_othb)
     
    ; same for drive-alone toll
    MW[13][J] = trips * p_datl * (p_pudo + p_shtp + p_taxi + p_tnc + p_limo + p_shrv + p_othb)
     
    ; shared-2 non-toll - pickup/dropoff and short-term get added again, plus taxi, tnc, limo, shrv, other bus
    MW[14][J] = trips * p_s2nt * (p_pudo + p_shtp + p_taxi + p_tnc + p_limo + p_shrv + p_othb)
     
    ; same for shared-2 toll
    MW[15][J] = trips * p_s2tl * (p_pudo + p_shtp + p_taxi + p_tnc + p_limo + p_shrv + p_othb)
     
    ; if partysize is 1, add long-term and offsite parking trips to da modes and rental car
    if (party_size=1)
      MW[12][J] = MW[12][J] + trips * p_dant * (p_lngp + p_offp + p_rent)
      MW[13][J] = MW[13][J] + trips * p_datl * (p_lngp + p_offp + p_rent)
    elseif (party_size=2)
      MW[14][J] = MW[14][J] + trips * p_s2nt * (p_lngp + p_offp + p_rent)
      MW[15][J] = MW[15][J] + trips * p_s2tl * (p_lngp + p_offp + p_rent)
    endif
     
    MW[16][J] = trips * p_tran
  
   endjloop
   
  endrun
  
  endloop ; market
endloop ; time period
 