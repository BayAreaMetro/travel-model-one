; ----------------------------------------------------------------------------------------------------------------
;
; TruckTollChoice.job
;
; TP+ script to apply a binomial choice model for very small, small, medium, and large trucks.  Two loops are used.
; The first cycles through the five time periods and the second cycles through the four types of commercial vehicles.
; The time periods are: (a) early AM, before 6 am; (b) AM peak period, 7 am to 10 am; (c) midday, 10 am to 3 pm; 
; (d) PM peak period, 3 pm to 7 pm; and, (e) evening, after 7 pm.  The four types of commercial vehicles are: 
; very small, small, medium, and large.  A separate value toll paying versus no value toll paying path choice
; model is applied to each of the twenty time period/vehicle type combinations.
;
; Input:  (1) Origin/destination matrix of very small, small, medium, and large truck trips
;	  (2) Skims providing the time and cost for value toll and non-value toll paths for each; the tables must
;             have the following names:
;	         (a) Non-value-toll paying time: TIMEXXX;
;                (b) Non-value-toll distance: DISTXXX
;	         (c) Non-value-toll bridge toll is: BTOLLXXX;
;	         (d) Value-toll paying time is: TOLLTIMEXXX;
;	         (e) Value-toll paying distance is: TOLLDISTXXX;
;		 (f) Value-toll bridge toll is: TOLLBTOLLXXX;
;		 (g) Value-toll value toll is: TOLLVTOLLXXX,
;          where XXX is VSM, SML, MED, or LRG (vehicle type).
;
; Output: Five, eight-table trip tables.  One trip table for each time period.  Two tables for each vehicle class
;         representing value-toll paying path trips and non-value-toll paying path trips. 
;
; Notes:  (1)  TOLLCLASS is a code, 1 through 10 are reserved for bridges; 11 and up is reserved for value toll
;              facilities. 
;	  (2)  All costs should be coded in year 2000 cents
;	  (3)  The 2-axle fee is used for very small trucks
;	  (4)  The 2-axle fee is used for small trucks
;	  (5)  The 3-axle fee is used for medium trucks
;	  (6)  The average of the 5-axle and 6-axle fee is used for large trucks (about the midpoint of the fee
;              schedule).
;         (7)  The in-vehicle time coefficient is taken from the work trip mode choice model. 
;
; See also: (1) HwySkims.job, which creates the level-of-service matrices for this analysis;
;	    (2) SetTolls.job, which sets the tolls used by the skimming process;
;	    (3) TruckTimeOfDay.job, which uses diurnal factors to split the daily truck trip table to the five
;               time periods used in assignment
;
; version:  Travel Model One
; authors:  dto (2010 09 03); gde (2009 03 12)
;
;
; ----------------------------------------------------------------------------------------------------------------

; set the time coefficient
token_model_coefficient_in_vehicle = '-0.0220/0.25'

; set the cost coefficient, which is a function of the value of time in the highway parameter block
token_model_coefficient_cost = '(kIvtt / TRUCKVOT) * 0.6'

; set a debug origin
token_debug_origin = '1028'
     
; set a debug destination
token_debug_destination = '2'
     
; set a debug filename prefix
token_debug_filename = 'logs\TruckTollChoice'

; loop through each time period
loop period = 1,5

   ; set the appropriate tokens  
   if (period = 1)   
      token_period   = 'EA'   
  
   elseif (period = 2)   
      token_period   = 'AM'    
  
   elseif (period = 3)   
      token_period   = 'MD'    
   
   elseif (period = 4)   
      token_period   = 'PM'    
  
   elseif (period = 5)   
      token_period   = 'EV'  
  
   endif
   
   ; do each time of day as a separate process
   DistributeMultistep processid = 'ctramp', processNum = @period@, commpath = '%COMMPATH%'
   
   ; loop through each vehicle class 
   loop class = 1,4
   
      ; very small trucks
      if (class = 1) 
         token_table = 'vstruck'
         token_class = 'VSM'
         token_opcost= 'SMTROPC'
   
      elseif (class = 2)
         token_table = 'struck'
         token_class = 'SML'
         token_opcost= 'SMTROPC'
         
      elseif (class = 3)
         token_table = 'mtruck'
         token_class = 'MED'
         token_opcost= 'SMTROPC'
         
      elseif (class = 4)
         token_table = 'ctruck'
         token_class = 'LRG'
         token_opcost= 'LRTROPC'
      
      endif
   
      run pgm = matrix
         
         ; trucks generated by the truck model
         filei mati[1] = nonres\tripstrk@token_period@x.tpp
         
         ; level-of-service skims
         filei mati[2] = skims\COM_HWYSKIM@token_period@.tpp
         
         ; output matrix
         fileo mato = nonres\tripstrk@token_period@_@token_class@.tpp, mo = 1-2, name = free, toll
         
         ; assignment parameters
         read file = ctramp\scripts\block\hwyParam.block
         
         ; the time coefficient is taken from the work trip mode choice model and scaled by the logsum coefficient
         kIvtt = @token_model_coefficient_in_vehicle@
         
         ; the cost coefficient is based on the truck value of time defined in the hwyParam.block file (see HwySkims.job for additional info)
         kCost = @token_model_coefficient_cost@
         
         ; destination loop
         jloop
         
            ; set utility variables
            noTollTime = mi.2.TIME@token_class@[j]
            noTollCost = mi.2.DIST@token_class@[j] * @token_opcost@ + mi.2.BTOLL@token_class@[j]
            
            tollTime  = mi.2.TOLLTIME@token_class@[j]
            tollCost  = mi.2.TOLLDIST@token_class@[j] * @token_opcost@ + mi.2.TOLLBTOLL@token_class@[j]
            tollValue = mi.2.TOLLVTOLL@token_class@[j]
            
            ; initialize the utility
            utilityNoToll = 0.0
            utilityToll   = 0.0
            
            ; initialize the exponentiated utility
            expNoToll = 0.0
            expToll   = 0.0
            
            ; check for a non-zero toll cost
            if (tollValue > 0 && tollValue < 999999)
            
               ; make sure there is a valid no toll path
               if (noTollTime > 0)   
               
                  ; compute the utilities
                  utilityNoToll = kIvtt * noTollTime + kCost * noTollCost
                  utilityToll   = kIvtt * tollTime   + kCost * tollCost   + kCost * tollValue
                  
                  ; exponentiate the utilities
                  expNoToll = exp(utilityNoToll)
                  expToll   = exp(utilityToll)
                  
                  ; compute the probabilities
                  probNoToll = expNoToll / (expNoToll + expToll)
                  probToll   = 1.0 - probNoToll
                  
               else
               
                  ; if there is not a valid no toll path, the toll probability is 1.0
                  probNoToll = 0.0
                  probToll   = 1.0
               
               endif ; valid no toll path check
               
            else
            
               ; if the value toll cost is zero, the toll probability is 0.0
               probNoToll = 1.0
               probToll   = 0.0
               
            endif ; non-zero toll check
            
            ; apply the probabilities
            mw[1] = probNoToll * mi.1.@token_table@
            mw[2] = probToll   * mi.1.@token_table@
            
            ; print out some debug information
            if (i = @token_debug_origin@ & j = @token_debug_destination@) 
            
               ; one header
               if (@period@ = 1 & @class@ = 1)
               
                  list = 'Debug for origin zone ',@token_debug_origin@(5.0),'  and destination zone ',@token_debug_destination@(5.0),'.', file = @token_debug_filename@.@token_period@.debug
	          list = ' ', file = @token_debug_filename@.@token_period@.debug
	              
                  list = ' time period   class    path      time      cost   utility      prob	   trips', file = @token_debug_filename@.@token_class@.@token_period@.debug
                  list = ' ----------- ------- ------- --------- --------- --------- --------- ---------', file = @token_debug_filename@.@token_class@.@token_period@.debug
               
               ; break for everyone else
               else
               
                  list = ' ----------- ------- ------- --------- --------- --------- --------- ---------', file = @token_debug_filename@.@token_class@.@token_period@.debug
               
               endif
               
               list = '          @token_period@     @token_class@    free', noTollTime(10.2), noTollCost(10.2),           utilityNoToll(10.2),  probNoToll(10.4),  mw[1][j](10.2), file = @token_debug_filename@.@token_class@.@token_period@.debug               
               list = '          @token_period@     @token_class@    toll', tollTime(10.2),   (tollCost + tollValue)(10.2), utilityToll(10.2),    probToll(10.4),  mw[2][j](10.2), file = @token_debug_filename@.@token_class@.@token_period@.debug
               
            endif ; debug i/j if
         
         endjloop
     
      endrun
      
   endloop ; class loop
   
   ; combine the four class tables into a single trip table for assignment
   run pgm = matrix
   
      ; very small truck trips
      mati[1] = nonres\tripstrk@token_period@_VSM.tpp
      
      ; small trips truck trips
      mati[2] = nonres\tripstrk@token_period@_SML.tpp
      
      ; medium truck trips
      mati[3] = nonres\tripstrk@token_period@_MED.tpp
      
      ; large truck trips
      mati[4] = nonres\tripstrk@token_period@_LRG.tpp
      
      ; combined output matrix
      mato = nonres\tripstrk@token_period@.tpp, mo = 1-8, name = VSTRUCK,    STRUCK,    MTRUCK,    CTRUCK,
                                                                 VSTRUCKTOLL,STRUCKTOLL,MTRUCKTOLL,CTRUCKTOLL
                                                              
      ; set the non-value-toll paying path trips first
      mw[1] = mi.1.free
      mw[2] = mi.2.free
      mw[3] = mi.3.free
      mw[4] = mi.4.free
   
      ; set the value toll paying path trips second
      mw[5] = mi.1.toll
      mw[6] = mi.2.toll
      mw[7] = mi.3.toll
      mw[8] = mi.4.toll
   
   endrun
   
   EndDistributeMultistep
   
endloop ; period loop

Wait4Files files = CTRAMP1.script.end, CTRAMP2.script.end, CTRAMP3.script.end, CTRAMP4.script.end, CTRAMP5.script.end, 
           printfiles = merge, deldistribfiles = t, CheckReturnCode = t
           
* copy @token_debug_filename@.VSM.EA.debug+@token_debug_filename@.SML.EA.debug+@token_debug_filename@.MED.EA.debug+@token_debug_filename@.LRG.EA.debug @token_debug_filename@.EA.debug
* copy @token_debug_filename@.VSM.AM.debug+@token_debug_filename@.SML.AM.debug+@token_debug_filename@.MED.AM.debug+@token_debug_filename@.LRG.AM.debug @token_debug_filename@.AM.debug
* copy @token_debug_filename@.VSM.MD.debug+@token_debug_filename@.SML.MD.debug+@token_debug_filename@.MED.MD.debug+@token_debug_filename@.LRG.MD.debug @token_debug_filename@.MD.debug
* copy @token_debug_filename@.VSM.PM.debug+@token_debug_filename@.SML.PM.debug+@token_debug_filename@.MED.PM.debug+@token_debug_filename@.LRG.PM.debug @token_debug_filename@.PM.debug
* copy @token_debug_filename@.VSM.EV.debug+@token_debug_filename@.SML.EV.debug+@token_debug_filename@.MED.EV.debug+@token_debug_filename@.LRG.EV.debug @token_debug_filename@.EV.debug
* copy @token_debug_filename@.EA.debug+@token_debug_filename@.AM.debug+@token_debug_filename@.MD.debug+@token_debug_filename@.PM.debug+@token_debug_filename@.EV.debug @token_debug_filename@.debug
* copy @token_debug_filename@.debug disco.text
* del @token_debug_filename@*.debug
* copy disco.text @token_debug_filename@.debug
* del disco.text
