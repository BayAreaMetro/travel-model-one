; TODO: debug some zone pairs
; TODO: update script documentation
; ----------------------------------------------------------------------------------------------------------------
;
; HwySkims.job
;
; TP+ script to compute personal vehicle and commercial vehicle highway skim tables for five time periods.  The 
; script first loops through the five time periods, which are: (a) early AM, 3 am to 6 am; (b) AM peak period, 
; 6 am to 10 am; (c) midday, 10 am to 3 pm; (d) PM peak period, 3 pm to 7 pm; and, (e) evening, 7 pm to 3 am the 
; next day. Next the script loops through seven vehicle classes, three personal (drive alone, shared ride 2, and shared ride 3+)
; and four commercial (very small trucks, small trucks, medium trucks, and large trucks). 
;
; The skims are based on the shortest generalized cost path; the generalized cost calculation makees the following
; assumptions:
;	(a) the automobile operating cost is 14.2 cents ($2000) per mile, which is based on a state-wide agreed 
;	    upon approach (use EMFAC's implied fleetwide MPG combined with an agreed upon gas price);
;	(b) the truck operating cost is 28.4 cents ($2000) per mile, which is assumed to be two times the
;	    passenger vehicle operating cost;
;	(c) the assumed personal vehicle value of time is $15 per hour ($2000); a value of time is needed to 
;           determine if the value toll path is reasonable and one should lean towards a high value, which will 
;           create a pay path, thus allowing the mode choice model the opportunity to evaluate it -- Vovsha 
;           recommends a value of time in the $6 to $22 ($2008) per hour range, which we are in;
;	(d) the assumed commercial vehicle value of time is $30 per hour ($2000) -- Vovsha recommends $30 per hour
;           ($2008) for light trucks and $60 per hour ($2008) for heavy trucks, we are in this range and, again,
;           the value of time is only used to create reasonable pay paths;
;	(e) shared ride 2 vehicles share tolls, but not evenly, as some vehicles will contain two members from the
;           same household, so the toll is divided by 1.75 rather than by 2.00;
;	(f) shared ride 3+ vehicles share tolls, but not evenly, as some vehicles will contain two members from the
;           same household, so the toll is divided by 2.50 rather than 3.50, which is usually the assumed occupancy
;	    of 3+ vehicles. 
; All of these values are coded in the "hwyParam.block" file. 
;
; Input:  (1) A highway network containing the following fields: (a) CTIM, which is the congested time in minutes;
;             (b) DISTANCE (which is skimmed); (c) FT (facility type); (d) TOLL (which is a code distinguishing 
;             bridge tolls -- one through firstValue - 1 -- from value tolls -- firstValue or greater, firstValue
;             is coded in the hwyParam.block file); (e) TOLLXX_YY, where XX is EA, AM, MD, PM, or EV and YY is DA, 
;             SR2, or SR3 (this is the dollar value of the toll be it a bridge or value toll); and (f) USE (which
;             is a code defining which class of vehicles can use which link, 1 - everyone, 2 - two occupants, 3 - 
;             three occupants, 4 - no large trucks). 
;
; Output: (A) A 27 table personal vehicle skim for each of the five time periods containing the following information:
;		(1)  Drive alone no value toll path, time (minutes), TIMEDA;
;		(2)  Drive alone no value toll path, distance (miles), DISTDA;
;		(3)  Drive alone no value toll path, bridge toll + additional pavement cost (year 2000 cents), BTOLLDA;
;		(4)  Drive alone no value toll path, additional pavement cost (year 2000 cents), PVCOSTDA;
;
;		(5)  Drive alone value toll path, time (minutes), TOLLTIMEDA;
;		(6)  Drive alone value toll path, distance (miles), TOLLDISTDA;
;		(7)  Drive alone value toll path, bridge toll + additional pavement cost (year 2000 cents), TOLLBTOLLDA;
;		(8)  Drive alone value toll path, additional pavement cost (year 2000 cents), TOLLPVCOSTDA;
;		(9)  Drive alone value toll path, value toll (year 2000 cents), TOLLVTOLLDA;
;
;		(10) Shared ride 2 no value toll path, time (minutes), TIMES2;
;		(11) Shared ride 2 no value toll path, distance (miles), DISTS2;
;		(12) Shared ride 2 no value toll path, bridge toll + additional pavement cost (year 2000 cents), BTOLLS2;
;		(13) Shared ride 2 no value toll path, additional pavement cost (year 2000 cents), PVCOSTS2;
;
;		(14) Shared ride 2 value toll path, time (minutes), TOLLTIMES2;
;		(15) Shared ride 2 value toll path, distance (miles), TOLLDISTS2;
;		(16) Shared ride 2 value toll path, bridge toll + additional pavement cost (year 2000 cents), TOLLBTOLLS2;
;		(17) Shared ride 2 value toll path, additional pavement cost (year 2000 cents), TOLLPVCOSTS2;
;		(18) Shared ride 2 value toll path, value toll (year 2000 cents), TOLLVTOLLS2;
;
;		(19) Shared ride 3+ no value toll path, time (minutes), TIMES3;
;		(20) Shared ride 3+ no value toll path, distance (miles), DISTS3;
;		(21) Shared ride 3+ no value toll path, bridge toll + additional pavement cost (year 2000 cents), BTOLLS3;
;		(22) Shared ride 3+ no value toll path, additional pavement cost (year 2000 cents), PVCOSTS3;
;
;		(23) Shared ride 3+ value toll path, time (minutes), TOLLTIMES3;
;		(24) Shared ride 3+ value toll path, distance (miles), TOLLDISTS3;
;		(25) Shared ride 3+ value toll path, bridge toll + additional pavement cost (year 2000 cents), TOLLBTOLLS3;
;		(26) Shared ride 3+ value toll path, additional pavement cost (year 2000 cents), TOLLPVCOSTS3;
;		(27) Shared ride 3+ value toll path, value toll (year 2000 cents), TOLLVTOLLS3;
;
;         (B) A 36 table commercial vehicle skim for each of the five time periods containing the following information:
;		(1)  Very small truck path, time (minutes), TIMEVSM;
;		(2)  Very small truck path, distance (miles), DISTVSM;
;		(3)  Very small truck path, bridge toll + additional pavement cost (year 2000 cents), BTOLLVSM;
;		(4)  Very small truck path, additional pavement cost (year 2000 cents), PVCOSTVSM;
;
;		(5)  Very small truck value toll path, time (minutes), TOLLTIMEVSM;
;		(6)  Very small truck value toll path, distance (miles), TOLLTIMEVSM;
;		(7)  Very small truck value toll path, bridge toll + additional pavement cost (year 2000 cents), TOLLBTOLLVSM;
;		(8)  Very small truck value toll path, additional pavement cost (year 2000 cents), TOLLPVCOSTVSM;
;		(9)  Very small truck value toll path, value toll (year 2000 cents), TOLLVTOLLVSM;
;
;		(10) Small truck path, time (minutes), TIMESML;
;		(11) Small truck path, distance (miles), DISTSML;
;		(12) Small truck path, bridge toll + additional pavement cost (year 2000 cents), BTOLLSML;
;		(13) Small truck path, additional pavement cost (year 2000 cents), PVCOSTSML;
;
;		(14) Small truck value toll path, time (minutes), TOLLTIMESML;
;		(15) Small truck value toll path, distance (miles), TOLLTIMESML;
;		(16) Small truck value toll path, bridge toll + additional pavement cost (year 2000 cents), TOLLBTOLLSML;
;		(17) Small truck value toll path, additional pavement cost (year 2000 cents), TOLLPVCOSTSML;
;		(18) Small truck value toll path, value toll (year 2000 cents), TOLLVTOLLSML;
;
;		(19) Medium truck path, time (minutes), TIMEMED;
;		(20) Medium truck path, distance (miles), DISTMED;
;		(21) Medium truck path, bridge toll + additional pavement cost (year 2000 cents), BTOLLMED;
;		(22) Medium truck path, additional pavement cost (year 2000 cents), PVCOSTMED;
;
;		(23) Medium truck value toll path, time (minutes), TOLLTIMEMED;
;		(24) Medium truck value toll path, distance (miles), TOLLTIMEMED;
;		(25) Medium truck value toll path, bridge toll + additional pavement cost (year 2000 cents), TOLLBTOLLMED;
;		(26) Medium truck value toll path, additional pavement cost (year 2000 cents), TOLLPVCOSTMED;
;		(27) Medium truck value toll path, value toll (year 2000 cents), TOLLVTOLLMED
;
;		(28) Large (four-plus axle) truck path, time (minutes), TIMELRG;
;		(29) Large (four-plus axle) truck path, distance (miles), DISTLRG;
;		(30) Large (four-plus axle) truck path, bridge toll + additional pavement cost (year 2000 cents), BTOLLLRG;
;		(31) Large (four-plus axle) truck path, additional pavement cost (year 2000 cents), PVCOSTLRG;
;
;		(32) Large (four-plus axle) truck value toll path, time (minutes), TOLLTIMELRG;
;		(33) Large (four-plus axle) truck value toll path, distance (miles), TOLLDISTLRG;
;		(34) Large (four-plus axle) truck value toll path, bridge toll + additional pavemetn cost (year 2000 cents), TOLLBTOLLLRG;
;		(35) Large (four-plus axle) truck value toll path, additional pavement cost (year 2000 cents), TOLLPVCOSTLRG;
;		(36) Large (four-plus axle) truck value toll path, value toll (year 2000 cents), TOLLVTOLLLRG;
;                                     
;
; Notes:  (1)  Output matrices are in miles, minutes, and cents ($2000) and are stored as real values;
;	  (2)  Intrazonal distance/time is one half the distance/time to the nearest neighbor;
;	  (3)  Intrazonal bridge and value tolls are assumed to be zero
;
; See also: (1) SetTolls.job, which sets the tolls skimmed in this script
;	    (2) TruckTollChoice.job, which applies a simple value toll/not value toll path choice model
;
; version:  Travel Model One (v 0.5)
; authors:  dto(2014 11 XX), dto (2010 08 10); gde (2009 03 12)
;
;
; ----------------------------------------------------------------------------------------------------------------

; do, more or less, the same skim procedure for each of the five time periods
loop period = 1, 5
  
   ; set a debug origin
   token_debug_origin = '844'
     
   ; set a debug destination
   token_debug_destination = '236'
     
   ; set a debug filename prefix
   token_debug_filename = 'logs\HwySkims'
  
   ; a two letter token is used for each time period
   if (period = 1)   
      token_period = 'EA'   
  
   elseif (period = 2)   
      token_period = 'AM'    
  
   elseif (period = 3)   
      token_period = 'MD'    
  
   elseif (period = 4)   
      token_period = 'PM'
  
   elseif (period = 5)   
      token_period = 'EV'
      
   endif
   
   ; do each time of day as a separate process
   DistributeMultistep processid = 'ctramp', processNum = @period@, commpath = 'm:\commpath'
   
   ; do, more or less, the same skim procedure for each of seven classes of vehicles
   loop class = 1, 7
   
      ; a string token is used for each class
      if (class = 1)
         token_class = 'DA'
         
         ; the generalized cost expression is the prefix + token_period + suffix
         gencost_prefix = 'lw.gencost = lw.time + (0.6 / vot) * (lw.dist * (autoOpCost + lw.add_pave_cost_da) + li.TOLL'
         gencost_suffix = '_DA)'
         
         ; drive alone excluded from HOV 2 and 3+ facilities
         token_excludegrp_free = 'excludegrp = 23, 11,'
         token_excludegrp_toll = 'excludegrp = 23,'
          
      
      elseif (class = 2)
         token_class = 'S2'
         
         ; the generalized cost expression is the prefix + token_period + suffix
         gencost_prefix = 'lw.gencost = lw.time + (0.6 / vot) * (lw.dist * (autoOpCost + lw.add_pave_cost_s2) + li.TOLL'
         gencost_suffix = '_S2 / sr2costShare)'
         
         ; shared ride 2 excluded from HOV 3+ facilities
         token_excludegrp_free = 'excludegrp = 3, 11,'
	 token_excludegrp_toll = 'excludegrp = 3,'
      
      elseif (class = 3)
         token_class = 'S3'
         
         ; the generalized cost expression is the prefix + token_period + suffix
         gencost_prefix = 'lw.gencost = lw.time + (0.6 / vot) * (lw.dist * (autoOpCost + lw.add_pave_cost_s3) + li.TOLL'
         gencost_suffix = '_S3 / sr3costShare)'
         
         ; shared ride 3+ not excluded from any facilities
         token_excludegrp_free = 'excludegrp = 11,'
	 token_excludegrp_toll = ' '

         token_excludegrp = ' '
         
      elseif (class = 4)
         token_class = 'VSM'
         
         ; the generalized cost expression is the prefix + token_period + suffix
         gencost_prefix = 'lw.gencost = lw.time + (0.6 / truckVot) * (lw.dist * (truckOpCost + lw.add_pave_cost_vsm) + li.TOLL'
         gencost_suffix = '_VSM)'
         
         ; very small trucks excluded from HOV 2 and 3+ facilities
         token_excludegrp_free = 'excludegrp = 23, 11,'
	 token_excludegrp_toll = 'excludegrp = 23,'
      
      elseif (class = 5)
         token_class = 'SML'
         
         ; the generalized cost expression is the prefix + token_period + suffix
         gencost_prefix = 'lw.gencost = lw.time + (0.6 / truckVot) * (lw.dist * (truckOpCost + lw.add_pave_cost_sml) + li.TOLL'
         gencost_suffix = '_SML)'
         
         ; small trucks excluded from HOV 2 and 3+ facilities
         token_excludegrp_free = 'excludegrp = 23, 11,'
	 token_excludegrp_toll = 'excludegrp = 23,'
      
      elseif (class = 6)
         token_class = 'MED'
         
         ; the generalized cost expression is the prefix + token_period + suffix
         gencost_prefix = 'lw.gencost = lw.time + (0.6 / truckVot) * (lw.dist * (truckOpCost + lw.add_pave_cost_med) + li.TOLL'
         gencost_suffix = '_MED)'
         
         ; medium trucks excluded from HOV 2 and 3+ facilities
         token_excludegrp_free = 'excludegrp = 23, 11,'
	 token_excludegrp_toll = 'excludegrp = 23,'
         
      elseif (class = 7)
         token_class = 'LRG'
         
         ; the generalized cost expression is the prefix + token_period + suffix
         gencost_prefix = 'lw.gencost = lw.time + (0.6 / truckVot) * (lw.dist * (truckOpCost + lw.add_pave_cost_lrg) + li.TOLL'
         gencost_suffix = '_LRG)'
         
         ; large trucks excluded from HOV 2, HOV 3+, and no truck facilities
         token_excludegrp_free = 'excludegrp = 4, 11,'
	 token_excludegrp_toll = 'excludegrp = 4,'
         
      endif
    
      run pgm = highway
      
         ; give each time of day two additional processors to work with   
         ;DistributeIntrastep processid = 'ctramp', processlist = 1-4, commpath = 'm:\commpath', saveprn = f
     
         ; a congested network is input
         neti = hwy\avgload@token_period@.net
         
         ; each period-class combination gets a seven-table skim capturing the no value toll and toll paths
         mato = skims\@token_class@_@token_period@.tpp, combine = f, mo = 1-9, name = TIME@token_class@,
                                                                                      DIST@token_class@,
                                                                                      BTOLL@token_class@,
                                                                                      PVCOST@token_class@,
                                                                                      TOLLTIME@token_class@,
                                                                                      TOLLDIST@token_class@,
                                                                                      TOLLBTOLL@token_class@,
                                                                                      TOLLPVCOST@token_class@,
                                                                                      TOLLVTOLL@token_class@

                                                   
         
         ; block file containing highway parameters (see note above)
         read file=ctramp\scripts\block\hwyparam.block
       
         ; equilibrium assignment procedure with a single iteration for skims
         parameters combine  = equi                     
         parameters maxiters = 1    
      
         ; set the working variables
         phase = linkread
         
            ; the time variable is congested time specific to each time period
            lw.time = li.CTIM 
            
            ; distance is coded as "distance" in the networks
            lw.dist = li.DISTANCE
            
            ; facility type is the linkclass (linkclass needs to be defined, but it's not used)
       	    linkclass    = li.FT 

       	    ; tollclass set to distinguish value tolls from bridge tolls
            lw.tollclass = li.TOLLCLASS

            ; calculate the pavement cost variable to skim
            lw.pave_cost = li.distance * li.ADD_PAVE_@token_class@
          
            ; set the generalized cost, which is the combination of three tokens
            @gencost_prefix@@token_period@@gencost_suffix@
                     
            ; reserve TOLL (= lw.tollclass) 1 through firstValue - 1 for bridge tolls; firstValue and up for value tolls
            if (lw.tollclass >= firstValue)
            
               ; set the value tolls
               lw.valuetoll_@token_class@  = li.TOLL@token_period@_@token_class@
              
            else            
           
               ; set the bridge tolls
               lw.bridgetoll_@token_class@  = li.TOLL@token_period@_@token_class@   
              
            endif          
              
            ; the USE variable defines what type of vehicles can use the roadway
           
            ; Group 23 defines HOV 2 and 3+ facilities
            if (li.USE = 2,3) addtogroup = 23    
           
            ; Group 3 defines HOV 3+ facilities
            if (li.USE = 3) addtogroup = 3
            
            ; Group 4 defines facilities not available to trucks
            if (li.USE = 2,3,4) addtogroup = 4
                       
            ; Group 11 defines the value toll links the non-value-toll-paying users are prohibited from using
            if (lw.tollclass >= firstValue && li.TOLL@token_period@_@token_class@ > 0) addtogroup = 11
            
         endphase
     
         phase = iloop
     
            ; non-value toll paying path
            pathload path = lw.gencost, @token_excludegrp_free@
               mw[1] = pathtrace(lw.time),
               mw[2] = pathtrace(lw.dist),
               mw[3] = pathtrace(lw.bridgetoll_@token_class@) + pathtrace(lw.pave_cost),
               mw[4] = pathtrace(lw.pave_cost)
               
            ; value toll paying path
            pathload path = lw.gencost, @token_excludegrp_toll@
               mw[5] = pathtrace(lw.time),
               mw[6] = pathtrace(lw.dist),
               mw[7] = pathtrace(lw.bridgetoll_@token_class@) + pathtrace(lw.pave_cost),
               mw[8] = pathtrace(lw.pave_cost),
               mw[9] = pathtrace(lw.valuetoll_@token_class@)
               
            ; compute time/distance intra-zonal values as 1/2 the nearest neighbor, tolls as zero
            ; TODO: look at max bridge toll (plus pavement) intrazonal to make sure it's not weird
            mw[1][i]  = rowmin(1) * 0.5
            mw[2][i]  = rowmin(2) * 0.5
            mw[3][i]  = rowmin(3) * 0.5
            mw[4][i]  = rowmin(4) * 0.5
            mw[5][i]  = rowmin(5) * 0.5
            mw[6][i]  = rowmin(6) * 0.5
            mw[7][i]  = rowmin(7) * 0.5
            mw[8][i]  = rowmin(8) * 0.5
            mw[9][i]  = 0.0
              
         endphase ; i loop 
       
      endrun

   endloop ; token_class  
  
   ; combine the skims into two large tables per time period
   run pgm = matrix
   
      ; give each period thread more threads to work with   
      ;DistributeIntrastep processid = 'ctramp', processlist = 1-4, commpath = 'm:\commpath', saveprn = f
      
      ; drive alone skim
      mati[1] = skims\DA_@token_period@.tpp
      
      ; shared ride 2 skim
      mati[2] = skims\S2_@token_period@.tpp
      
      ; shared ride 3+ skim
      mati[3] = skims\S3_@token_period@.tpp
      
      ; very small trucks
      mati[4] = skims\VSM_@token_period@.tpp
      
      ; small trucks
      mati[5] = skims\SML_@token_period@.tpp
      
      ; medium trucks
      mati[6] = skims\MED_@token_period@.tpp
      
      ; large trucks
      mati[7] = skims\LRG_@token_period@.tpp
      
      ; passenger vehicle skims
      mato[1] = skims\HWYSKM@token_period@.tpp, mo = 1-27, name = TIMEDA,DISTDA,BTOLLDA,PVCOSTDA,
								   TOLLTIMEDA,TOLLDISTDA,TOLLBTOLLDA,TOLLPVCOSTDA,TOLLVTOLLDA,
                                                                  TIMES2,DISTS2,BTOLLS2,PVCOSTS2,
                                                                  TOLLTIMES2,TOLLDISTS2,TOLLBTOLLS2,TOLLPVCOSTS2,TOLLVTOLLS2,
                                                                  TIMES3,DISTS3,BTOLLS3,PVCOSTS3,
                                                                  TOLLTIMES3,TOLLDISTS3,TOLLBTOLLS3,TOLLPVCOSTS3,TOLLVTOLLS3,
      
      ; commercial vehicle skims
      mato[2] = skims\COM_HWYSKIM@token_period@.tpp, mo = 28 - 63, name = TIMEVSM, DISTVSM, BTOLLVSM, PVCOSTVSM,
                                                                          TOLLTIMEVSM, TOLLDISTVSM, TOLLBTOLLVSM, TOLLPVCOSTVSM, TOLLVTOLLVSM,
                                                                          TIMESML, DISTSML, BTOLLSML, PVCOSTSML,
                                                                          TOLLTIMESML, TOLLDISTSML, TOLLBTOLLSML, TOLLPVCOSTSML, TOLLVTOLLSML,
                                                                          TIMEMED, DISTMED, BTOLLMED, PVCOSTMED,
                                                                          TOLLTIMEMED, TOLLDISTMED, TOLLBTOLLMED, TOLLPVCOSTMED, TOLLVTOLLMED,
                                                                          TIMELRG, DISTLRG, BTOLLLRG, PVCOSTLRG,
                                                                          TOLLTIMELRG, TOLLDISTLRG, TOLLBTOLLLRG, TOLLPVCOSTLRG, TOLLVTOLLLRG
      
      ; drive alone
      mw[1]   = mi.1.TIMEDA
      mw[2]   = mi.1.DISTDA
      mw[3]   = mi.1.BTOLLDA	
      mw[4]   = mi.1.PVCOSTDA
      mw[5]   = mi.1.TOLLTIMEDA
      mw[6]   = mi.1.TOLLDISTDA
      mw[7]   = mi.1.TOLLBTOLLDA
      mw[8]   = mi.1.TOLLPVCOSTDA
      mw[9]   = mi.1.TOLLVTOLLDA
      
      ; shared ride 2
      mw[10]  = mi.2.TIMES2
      mw[11]  = mi.2.DISTS2
      mw[12]  = mi.2.BTOLLS2
      mw[13]  = mi.2.PVCOSTS2
      mw[14]  = mi.2.TOLLTIMES2
      mw[15]  = mi.2.TOLLDISTS2
      mw[16]  = mi.2.TOLLBTOLLS2
      mw[17]  = mi.2.TOLLPVCOSTS2
      mw[18]  = mi.2.TOLLVTOLLS2
      
      ; shared ride 3+
      mw[19]  = mi.3.TIMES3
      mw[20]  = mi.3.DISTS3
      mw[21]  = mi.3.BTOLLS3
      mw[22]  = mi.3.PVCOSTS3
      mw[23]  = mi.3.TOLLTIMES3
      mw[24]  = mi.3.TOLLDISTS3
      mw[25]  = mi.3.TOLLBTOLLS3
      mw[26]  = mi.3.TOLLPVCOSTS3
      mw[27]  = mi.3.TOLLVTOLLS3
      
      ; very small trucks
      mw[28]  = mi.4.TIMEVSM
      mw[29]  = mi.4.DISTVSM
      mw[30]  = mi.4.BTOLLVSM
      mw[31]  = mi.4.PVCOSTVSM
      mw[32]  = mi.4.TOLLTIMEVSM
      mw[33]  = mi.4.TOLLDISTVSM
      mw[34]  = mi.4.TOLLBTOLLVSM
      mw[35]  = mi.4.TOLLPVCOSTVSM
      mw[36]  = mi.4.TOLLVTOLLVSM
      
      ; small trucks
      mw[37]  = mi.5.TIMESML
      mw[38]  = mi.5.DISTSML
      mw[39]  = mi.5.BTOLLSML
      mw[40]  = mi.5.PVCOSTSML
      mw[41]  = mi.5.TOLLTIMESML
      mw[42]  = mi.5.TOLLDISTSML
      mw[43]  = mi.5.TOLLBTOLLSML
      mw[44]  = mi.5.TOLLPVCOSTSML
      mw[45]  = mi.5.TOLLVTOLLSML
      
      ; medium trucks
      mw[46]  = mi.6.TIMEMED
      mw[47]  = mi.6.DISTMED
      mw[48]  = mi.6.BTOLLMED
      mw[49]  = mi.6.PVCOSTMED
      mw[50]  = mi.6.TOLLTIMEMED
      mw[51]  = mi.6.TOLLDISTMED
      mw[52]  = mi.6.TOLLBTOLLMED
      mw[53]  = mi.6.TOLLPVCOSTMED
      mw[54]  = mi.6.TOLLVTOLLMED
      
      ; large trucks
      mw[55]  = mi.7.TIMELRG
      mw[56]  = mi.7.DISTLRG
      mw[57]  = mi.7.BTOLLLRG
      mw[58]  = mi.7.PVCOSTLRG
      mw[59]  = mi.7.TOLLTIMELRG
      mw[60]  = mi.7.TOLLDISTLRG
      mw[61]  = mi.7.TOLLBTOLLLRG
      mw[62]  = mi.7.TOLLPVCOSTLRG
      mw[63]  = mi.7.TOLLVTOLLLRG
      
   endrun
   
   ; debug bit
   run pgm = matrix
   
      mati[1] = skims\HWYSKM@token_period@.tpp
      mati[2] = skims\COM_HWYSKIM@token_period@.tpp
      
      jloop
      
         ; debug print
         if (i = @token_debug_origin@ & j = @token_debug_destination@) 
         
            ; one header
            if (@period@ = 1)
            
               list = 'Debug for origin zone ',@token_debug_origin@(5.0),'  and destination zone ',@token_debug_destination@(5.0),'.', file = @token_debug_filename@.@token_period@.debug
               list = ' ', file = @token_debug_filename@.@token_period@.debug
            
               list = ' time period             class           path           time       distance	   bridge toll	addtl pavecost     value toll', file = @token_debug_filename@.@token_period@.debug
               list = ' ----------- ----------------- -------------- -------------- -------------- -------------- -------------- --------------', file = @token_debug_filename@.@token_period@.debug
            
            ; break for everyone else
            else
            
               list = ' ----------- ----------------- -------------- -------------- -------------- -------------- --------------', file = @token_debug_filename@.@token_period@.debug 
            
            endif
            
            list = '          @token_period@       drive alone           free', mi.1.TIMEDA(15.2),     mi.1.DISTDA(15.2),     mi.1.BTOLLDA(15),     mi.1.PVCOSTDA(15),     '            ---',    file = @token_debug_filename@.@token_period@.debug 
            list = '          @token_period@       drive alone           toll', mi.1.TOLLTIMEDA(15.2), mi.1.TOLLDISTDA(15.2), mi.1.TOLLBTOLLDA(15), mi.1.TOLLPVCOSTDA(15), mi.1.TOLLVTOLLS2(15), file = @token_debug_filename@.@token_period@.debug
            list = '          @token_period@     shared ride 2           free', mi.1.TIMES2(15.2),     mi.1.DISTS2(15.2),     mi.1.BTOLLS2(15),     mi.1.PVCOSTS2(15),     '            ---',    file = @token_debug_filename@.@token_period@.debug 
            list = '          @token_period@     shared ride 2           toll', mi.1.TOLLTIMES2(15.2), mi.1.TOLLDISTS2(15.2), mi.1.TOLLBTOLLS2(15), mi.1.TOLLPVCOSTS2(15), mi.1.TOLLVTOLLS2(15), file = @token_debug_filename@.@token_period@.debug
            list = '          @token_period@    shared ride 3+           free', mi.1.TIMES3(15.2),     mi.1.DISTS3(15.2),     mi.1.BTOLLS3(15),     mi.1.PVCOSTS3(15),     '            ---',    file = @token_debug_filename@.@token_period@.debug 
            list = '          @token_period@    shared ride 3+           toll', mi.1.TOLLTIMES3(15.2), mi.1.TOLLDISTS3(15.2), mi.1.TOLLBTOLLS3(15), mi.1.TOLLPVCOSTS3(15), mi.1.TOLLVTOLLS3(15), file = @token_debug_filename@.@token_period@.debug
            
            list = '          @token_period@    very small trk           free', mi.2.TIMEVSM(15.2),     mi.2.DISTVSM(15.2),     mi.2.BTOLLVSM(15),     mi.2.PVCOSTVSM(15),     '            ---',     file = @token_debug_filename@.@token_period@.debug 
            list = '          @token_period@    very small trk           toll', mi.2.TOLLTIMEVSM(15.2), mi.2.TOLLDISTVSM(15.2), mi.2.TOLLBTOLLVSM(15), mi.2.TOLLPVCOSTVSM(15), mi.2.TOLLVTOLLVSM(15), file = @token_debug_filename@.@token_period@.debug
            list = '          @token_period@         small trk           free', mi.2.TIMESML(15.2),     mi.2.DISTSML(15.2),     mi.2.BTOLLSML(15),     mi.2.PVCOSTSML(15),     '            ---',     file = @token_debug_filename@.@token_period@.debug 
            list = '          @token_period@         small trk           toll', mi.2.TOLLTIMESML(15.2), mi.2.TOLLDISTSML(15.2), mi.2.TOLLBTOLLSML(15), mi.2.TOLLPVCOSTSML(15), mi.2.TOLLVTOLLSML(15), file = @token_debug_filename@.@token_period@.debug
            list = '          @token_period@        medium trk           free', mi.2.TIMEMED(15.2),     mi.2.DISTMED(15.2),     mi.2.BTOLLMED(15),     mi.2.PVCOSTMED(15),     '            ---',     file = @token_debug_filename@.@token_period@.debug 
            list = '          @token_period@        medium trk           toll', mi.2.TOLLTIMEMED(15.2), mi.2.TOLLDISTMED(15.2), mi.2.TOLLBTOLLMED(15), mi.2.TOLLPVCOSTMED(15), mi.2.TOLLVTOLLMED(15), file = @token_debug_filename@.@token_period@.debug
            list = '          @token_period@         large trk           free', mi.2.TIMELRG(15.2),     mi.2.DISTLRG(15.2),     mi.2.BTOLLLRG(15),     mi.2.PVCOSTLRG(15),     '            ---',     file = @token_debug_filename@.@token_period@.debug 
            list = '          @token_period@         large trk           toll', mi.2.TOLLTIMELRG(15.2), mi.2.TOLLDISTLRG(15.2), mi.2.TOLLBTOLLLRG(15), mi.2.TOLLPVCOSTLRG(15), mi.2.TOLLVTOLLLRG(15), file = @token_debug_filename@.@token_period@.debug
            
         
         endif
      
      endjloop
   
   endrun
   
   EndDistributeMultistep

endloop ; token_period

Wait4Files files = CTRAMP1.script.end, CTRAMP2.script.end, CTRAMP3.script.end, CTRAMP4.script.end, CTRAMP5.script.end, 
           printfiles = merge, deldistribfiles = t, CheckReturnCode = t
           
; combine and delete the debug files
* copy @token_debug_filename@.EA.debug+@token_debug_filename@.AM.debug+@token_debug_filename@.MD.debug+@token_debug_filename@.PM.debug+@token_debug_filename@.EV.debug @token_debug_filename@.debug
* del @token_debug_filename@.EA.debug
* del @token_debug_filename@.AM.debug
* del @token_debug_filename@.MD.debug
* del @token_debug_filename@.PM.debug
* del @token_debug_filename@.EV.debug



