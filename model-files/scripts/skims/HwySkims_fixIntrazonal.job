;
; Hack to fix the intrazonals when the pavement costs can be negative.
;
; When they are all positive, then half of the minimum is makes sense.
;
; When some values are negative, then the appropriate intrazonal additional
; pavement cost is 0.5*max negative value
;

; move originals aside
* move skims\HWYSKMEA.tpp skims\HWYSKMEA_badintrazonal.tpp
* move skims\HWYSKMAM.tpp skims\HWYSKMAM_badintrazonal.tpp
* move skims\HWYSKMMD.tpp skims\HWYSKMMD_badintrazonal.tpp
* move skims\HWYSKMPM.tpp skims\HWYSKMPM_badintrazonal.tpp
* move skims\HWYSKMEV.tpp skims\HWYSKMEV_badintrazonal.tpp

* move skims\COM_HWYSKIMEA.tpp skims\COM_HWYSKIMEA_badintrazonal.tpp
* move skims\COM_HWYSKIMAM.tpp skims\COM_HWYSKIMAM_badintrazonal.tpp
* move skims\COM_HWYSKIMMD.tpp skims\COM_HWYSKIMMD_badintrazonal.tpp
* move skims\COM_HWYSKIMPM.tpp skims\COM_HWYSKIMPM_badintrazonal.tpp
* move skims\COM_HWYSKIMEV.tpp skims\COM_HWYSKIMEV_badintrazonal.tpp

; do, more or less, the same skim procedure for each of the five time periods
loop period = 1,5

   ; a two letter token is used for each time period
   if (period = 1)   
      token_period = 'EA'   
  
   elseif (period = 2)   
      token_period = 'AM'    
  
   elseif (period = 3)   
      token_period = 'MD'    
  
   elseif (period = 4)   
      token_period = 'PM'
  
   elseif (period = 5)   
      token_period = 'EV'
      
   endif
   
   ; do each time of day as a separate process
   DistributeMultistep processid = 'ctramp', processNum = @period@, commpath = 'm:\commpath'
   RUN PGM = MATRIX

      ; passenger vehicle skims
      FILEI MATI[1] = skims\HWYSKM@token_period@_badintrazonal.tpp
      
      ; commercial vehicle skims
      FILEI MATI[2] = skims\COM_HWYSKIM@token_period@_badintrazonal.tpp

      ; passenger vehicle skims
      FILEO mato[1] = skims\HWYSKM@token_period@.tpp, mo = 1-27, 
        name = TIMEDA,DISTDA,BTOLLDA,PVCOSTDA, TOLLTIMEDA,TOLLDISTDA,TOLLBTOLLDA,TOLLPVCOSTDA,TOLLVTOLLDA,
               TIMES2,DISTS2,BTOLLS2,PVCOSTS2, TOLLTIMES2,TOLLDISTS2,TOLLBTOLLS2,TOLLPVCOSTS2,TOLLVTOLLS2,
               TIMES3,DISTS3,BTOLLS3,PVCOSTS3, TOLLTIMES3,TOLLDISTS3,TOLLBTOLLS3,TOLLPVCOSTS3,TOLLVTOLLS3
      
      ; commercial vehicle skims
      FILEO mato[2] = skims\COM_HWYSKIM@token_period@.tpp, mo = 28 - 63,
        name = TIMEVSM, DISTVSM, BTOLLVSM, PVCOSTVSM, TOLLTIMEVSM, TOLLDISTVSM, TOLLBTOLLVSM, TOLLPVCOSTVSM, TOLLVTOLLVSM,
               TIMESML, DISTSML, BTOLLSML, PVCOSTSML, TOLLTIMESML, TOLLDISTSML, TOLLBTOLLSML, TOLLPVCOSTSML, TOLLVTOLLSML,
               TIMEMED, DISTMED, BTOLLMED, PVCOSTMED, TOLLTIMEMED, TOLLDISTMED, TOLLBTOLLMED, TOLLPVCOSTMED, TOLLVTOLLMED,
               TIMELRG, DISTLRG, BTOLLLRG, PVCOSTLRG, TOLLTIMELRG, TOLLDISTLRG, TOLLBTOLLLRG, TOLLPVCOSTLRG, TOLLVTOLLLRG

    ; copy all 27 matrices
    FILLMW MW[1]  = MI.1.1(27)

    ; There may be a better way to do this using built-in functions but I could not find it quickly
    ; and this is temporary...
    INTRA_DA     = -10000
    INTRA_DATOLL = -10000
    INTRA_S2     = -10000
    INTRA_S2TOLL = -10000
    INTRA_S3     = -10000
    INTRA_S3TOLL = -10000
    JLOOP
       IF ((MI.1.BTOLLDA     < 0) & (MI.1.BTOLLDA     > INTRA_DA    )) INTRA_DA     = MI.1.BTOLLDA
       IF ((MI.1.TOLLBTOLLDA < 0) & (MI.1.TOLLBTOLLDA > INTRA_DATOLL)) INTRA_DATOLL = MI.1.TOLLBTOLLDA
       IF ((MI.1.BTOLLS2     < 0) & (MI.1.BTOLLS2     > INTRA_S2    )) INTRA_S2     = MI.1.BTOLLS2
       IF ((MI.1.TOLLBTOLLS2 < 0) & (MI.1.TOLLBTOLLS2 > INTRA_S2TOLL)) INTRA_S2TOLL = MI.1.TOLLBTOLLS2
       IF ((MI.1.BTOLLS3     < 0) & (MI.1.BTOLLS3     > INTRA_S3    )) INTRA_S3     = MI.1.BTOLLS3
       IF ((MI.1.TOLLBTOLLS3 < 0) & (MI.1.TOLLBTOLLS3 > INTRA_S3TOLL)) INTRA_S3TOLL = MI.1.TOLLBTOLLS3
    ENDJLOOP
    IF (INTRA_DA     > -10000) MW[3][INTRA]  = 0.5*INTRA_DA
    IF (INTRA_DATOLL > -10000) MW[7][INTRA]  = 0.5*INTRA_DATOLL
    IF (INTRA_S2     > -10000) MW[12][INTRA] = 0.5*INTRA_S2
    IF (INTRA_S2TOLL > -10000) MW[16][INTRA] = 0.5*INTRA_S2TOLL
    IF (INTRA_S3     > -10000) MW[21][INTRA] = 0.5*INTRA_S3
    IF (INTRA_S3TOLL > -10000) MW[25][INTRA] = 0.5*INTRA_S3TOLL

    INTRA_DA     = -10000
    INTRA_DATOLL = -10000
    INTRA_S2     = -10000
    INTRA_S2TOLL = -10000
    INTRA_S3     = -10000
    INTRA_S3TOLL = -10000
    JLOOP
       IF ((MI.1.PVCOSTDA     < 0) & (MI.1.PVCOSTDA     > INTRA_DA    )) INTRA_DA     = MI.1.PVCOSTDA
       IF ((MI.1.TOLLPVCOSTDA < 0) & (MI.1.TOLLPVCOSTDA > INTRA_DATOLL)) INTRA_DATOLL = MI.1.TOLLPVCOSTDA
       IF ((MI.1.PVCOSTS2     < 0) & (MI.1.PVCOSTS2     > INTRA_S2    )) INTRA_S2     = MI.1.PVCOSTS2
       IF ((MI.1.TOLLPVCOSTS2 < 0) & (MI.1.TOLLPVCOSTS2 > INTRA_S2TOLL)) INTRA_S2TOLL = MI.1.TOLLPVCOSTS2
       IF ((MI.1.PVCOSTS3     < 0) & (MI.1.PVCOSTS3     > INTRA_S3    )) INTRA_S3     = MI.1.PVCOSTS3
       IF ((MI.1.TOLLPVCOSTS3 < 0) & (MI.1.TOLLPVCOSTS3 > INTRA_S3TOLL)) INTRA_S3TOLL = MI.1.TOLLPVCOSTS3
    ENDJLOOP
    IF (INTRA_DA     > -10000) MW[4][INTRA]  = 0.5*INTRA_DA
    IF (INTRA_DATOLL > -10000) MW[8][INTRA]  = 0.5*INTRA_DATOLL
    IF (INTRA_S2     > -10000) MW[13][INTRA] = 0.5*INTRA_S2
    IF (INTRA_S2TOLL > -10000) MW[17][INTRA] = 0.5*INTRA_S2TOLL
    IF (INTRA_S3     > -10000) MW[22][INTRA] = 0.5*INTRA_S3
    IF (INTRA_S3TOLL > -10000) MW[26][INTRA] = 0.5*INTRA_S3TOLL    

    ; copy all 36 matrices
    FILLMW MW[28] = MI.2.1(36)

    INTRA_VSM     = -10000
    INTRA_VSMTOLL = -10000
    INTRA_SML     = -10000
    INTRA_SMLTOLL = -10000
    INTRA_MED     = -10000
    INTRA_MEDTOLL = -10000
    INTRA_LRG     = -10000
    INTRA_LRGTOLL = -10000
    JLOOP
       IF ((MI.2.BTOLLVSM     < 0) & (MI.2.BTOLLVSM     > INTRA_VSM    )) INTRA_VSM     = MI.2.BTOLLVSM
       IF ((MI.2.TOLLBTOLLVSM < 0) & (MI.2.TOLLBTOLLVSM > INTRA_VSMTOLL)) INTRA_VSMTOLL = MI.2.TOLLBTOLLVSM
       IF ((MI.2.BTOLLSML     < 0) & (MI.2.BTOLLSML     > INTRA_SML    )) INTRA_SML     = MI.2.BTOLLSML
       IF ((MI.2.TOLLBTOLLSML < 0) & (MI.2.TOLLBTOLLSML > INTRA_SMLTOLL)) INTRA_SMLTOLL = MI.2.TOLLBTOLLSML
       IF ((MI.2.BTOLLMED     < 0) & (MI.2.BTOLLMED     > INTRA_MED    )) INTRA_MED     = MI.2.BTOLLMED
       IF ((MI.2.TOLLBTOLLMED < 0) & (MI.2.TOLLBTOLLMED > INTRA_MEDTOLL)) INTRA_MEDTOLL = MI.2.TOLLBTOLLMED
       IF ((MI.2.BTOLLLRG     < 0) & (MI.2.BTOLLLRG     > INTRA_LRG    )) INTRA_LRG     = MI.2.BTOLLLRG
       IF ((MI.2.TOLLBTOLLLRG < 0) & (MI.2.TOLLBTOLLLRG > INTRA_LRGTOLL)) INTRA_LRGTOLL = MI.2.TOLLBTOLLLRG
    ENDJLOOP
    IF (INTRA_VSM     > -10000) MW[30][INTRA] = 0.5*INTRA_VSM
    IF (INTRA_VSMTOLL > -10000) MW[34][INTRA] = 0.5*INTRA_VSMTOLL
    IF (INTRA_SML     > -10000) MW[39][INTRA] = 0.5*INTRA_SML
    IF (INTRA_SMLTOLL > -10000) MW[43][INTRA] = 0.5*INTRA_SMLTOLL
    IF (INTRA_MED     > -10000) MW[48][INTRA] = 0.5*INTRA_MED
    IF (INTRA_MEDTOLL > -10000) MW[52][INTRA] = 0.5*INTRA_MEDTOLL
    IF (INTRA_LRG     > -10000) MW[57][INTRA] = 0.5*INTRA_LRG
    IF (INTRA_LRGTOLL > -10000) MW[61][INTRA] = 0.5*INTRA_LRGTOLL

    INTRA_VSM     = -10000
    INTRA_VSMTOLL = -10000
    INTRA_SML     = -10000
    INTRA_SMLTOLL = -10000
    INTRA_MED     = -10000
    INTRA_MEDTOLL = -10000
    INTRA_LRG     = -10000
    INTRA_LRGTOLL = -10000
    JLOOP
       IF ((MI.2.PVCOSTVSM     < 0) & (MI.2.PVCOSTVSM     > INTRA_VSM    )) INTRA_VSM     = MI.2.PVCOSTVSM
       IF ((MI.2.TOLLPVCOSTVSM < 0) & (MI.2.TOLLPVCOSTVSM > INTRA_VSMTOLL)) INTRA_VSMTOLL = MI.2.TOLLPVCOSTVSM
       IF ((MI.2.PVCOSTSML     < 0) & (MI.2.PVCOSTSML     > INTRA_SML    )) INTRA_SML     = MI.2.PVCOSTSML
       IF ((MI.2.TOLLPVCOSTSML < 0) & (MI.2.TOLLPVCOSTSML > INTRA_SMLTOLL)) INTRA_SMLTOLL = MI.2.TOLLPVCOSTSML
       IF ((MI.2.PVCOSTMED     < 0) & (MI.2.PVCOSTMED     > INTRA_MED    )) INTRA_MED     = MI.2.PVCOSTMED
       IF ((MI.2.TOLLPVCOSTMED < 0) & (MI.2.TOLLPVCOSTMED > INTRA_MEDTOLL)) INTRA_MEDTOLL = MI.2.TOLLPVCOSTMED
       IF ((MI.2.PVCOSTLRG     < 0) & (MI.2.PVCOSTLRG     > INTRA_LRG    )) INTRA_LRG     = MI.2.PVCOSTLRG
       IF ((MI.2.TOLLPVCOSTLRG < 0) & (MI.2.TOLLPVCOSTLRG > INTRA_LRGTOLL)) INTRA_LRGTOLL = MI.2.TOLLPVCOSTLRG
    ENDJLOOP
    IF (INTRA_VSM     > -10000) MW[31][INTRA] = 0.5*INTRA_VSM
    IF (INTRA_VSMTOLL > -10000) MW[35][INTRA] = 0.5*INTRA_VSMTOLL
    IF (INTRA_SML     > -10000) MW[40][INTRA] = 0.5*INTRA_SML
    IF (INTRA_SMLTOLL > -10000) MW[44][INTRA] = 0.5*INTRA_SMLTOLL
    IF (INTRA_MED     > -10000) MW[49][INTRA] = 0.5*INTRA_MED
    IF (INTRA_MEDTOLL > -10000) MW[53][INTRA] = 0.5*INTRA_MEDTOLL
    IF (INTRA_LRG     > -10000) MW[58][INTRA] = 0.5*INTRA_LRG
    IF (INTRA_LRGTOLL > -10000) MW[62][INTRA] = 0.5*INTRA_LRGTOLL

   ENDRUN
   EndDistributeMultistep
endloop ; token_period

Wait4Files files = CTRAMP1.script.end, CTRAMP2.script.end, CTRAMP3.script.end, CTRAMP4.script.end, CTRAMP5.script.end, 
    printfiles = merge, deldistribfiles = t, CheckReturnCode = t

