; ----------------------------------------------------------------------------------------------------------------
;
; BuildTransitNetworks.job
;
; A TP+ script that creates transit support links in five acts, namely: (1) in the first step, walk access links 
; are generated connecting zone centroids to bus stops (on the highway network) and walk access funnel links for
; transit-only infrastructure; (2) in the second step, drive access links are generated connecting zone centroids
; with park-and-ride locations; (3) in the third step, gawk is used to turn the access links into egress links by
; reversing the a-node and b-node and writing out separate files; (4) in the fourth step, transit transfer links
; are created and combined with the access and egress links to create a single database of all the transit support
; links; (5) in the fifth and final step, gawk is used to select the two best park-and-ride lots for each zone for
; each of type of line haul facility that has park-and-ride lots. 
;
; The transit network coding uses the following mode codes: 
;	(1) centroids to walk auxiliary rail nodes/bus stops, or "walk access connectors";
;	(2) centroids to drive auxiliary nodes, or "drive access connectors";
;	(3) transit stop to transit stop walk connectors, or "stop-to-stop" or "stop-to-station auxiliary links";
;	(4) drive auxiliary nodes to station platforms, or "drive access walk funnel links";
;	(5) walk auxiliary nodes to station platforms, or "walk access walk funnel links";
;	(6) walk auxiliary rail nodes/bus stops to centroids, or "walk egress connectors";
;	(7) drive auxiliary nodes to centroids, or "drive egress connectors";
;	(8) not used;
;	(9) not used;
;	(10)  through  (79) local bus modes, coded by, at least, provider; 
;	(80)  through  (99) express bus modes, coded by provider;
;	(100) through (109) ferry service, coded by provider;
;	(110) through (119) light rail, coded by provider;
;	(120) through (129) heavy rail, coded by provider;
;	(130) through (139) commuter rail, coded by provider. 
;
; Input:  (1) A transit background network that contains all the walk access funnel links;
;	  (2) A transit background network that contains all the transfer nodes;
;	  (3) Walk funnel link files, which connect funnel nodes to the transit service (*.zac);
;	  (4) Transit line files (*.tpl);
;	  (5) Park and ride node input files, which connect park and ride lots to the transit service (*.pnr);
;
; Output: (1) A set of transit support links that are segmented by services with transit-only infrastructure, 
;  	      These links are then used in transit skimming and assignment. 
;
; Notes:  (1) 
;
; See also: (1) PrepHwyNet.job -- Creates the networks used to build the access links
;	    (2) TransitSkims.job -- Skims the networks created here to build level-of-service matrices
;
; version:  Travel Model One
; authors:  dto, be (2014 02 03); dto (2010 05 06); sai (2009 04 15); gde
;
;
; ----------------------------------------------------------------------------------------------------------------

; time period loop
loop period = 1, 5

   ; define a two-letter token for each time period
   if (period = 1)   
      token_period = 'ea'
      
   elseif (period = 2)   
      token_period = 'am'
      
   elseif (period = 3)   
      token_period = 'md'
      
   elseif (period = 4)   
      token_period = 'pm'
      
   elseif (period = 5)   
      token_period = 'ev'
      
   endif 
   
   ; distribute the tasks
   ; calling GAWK doesn't appear to work when distributed.  Is the PATH different???
   ; DistributeMultistep processid = "ctramp", processnum = @period@,  commpath = 'X:\commpath'
                              
   ; step 1: build walk access links
   run pgm = trnbuild

      ; input is created by PrepHwyNet.job and contains the access neti links
      filei neti = trn\@token_period@_temporary_transit_background_accesslinks.net
       
      ; output walk access links in in TP+ link file format
      fileo linko = trn\@token_period@_walk_links.dbf 
       
      ; output the walk access links in support link format to be read in by the transit assignment
      fileo supporto = trn\@token_period@_walk_acclinks.dat, oneway = n, fixed = y, modes = 1-9
      
      ; set the highway time to be the bus time computed in PrepHwyNet.job
      hwytime = BUS_TIME     

      ; use the tranist headway corresponding to the time period
      freqperiod = @period@
      
      ; we are not building paths
      buildpaths = f
      
      ; set the walk speed to 3.0 mph
      walkspeed = 3.0
      
      ; do not reprint the input to reduce the size of the TP+ report file
      listinput = no
      
      ; ignore the speeds implied by the run times coded for the bus routes
      useruntime = n       
      
      ; do not allow paths with perceived times longer than 4 hours
      maxpathtime = 240
      
      ; transit run times longer than 4 hours generate a warning statement in the print file
      maxruntime  = 240
      
      ; we want walk access connectors -- mode 1 -- for all non-external i-j pairs
      select i = 1-1454, j = 1-1454  
      select accessmodes = 1
      
      ; generate zone access links
      ; recall we have 9 support modes, 70 local bus modes, 20 express bus, 10 lrt, 10 ferry, 10 heavy rail, and 10 commuter rail
      zoneaccess generate = true,
      
         ; allow up to 10 access links per mode
      	 maxstops = 9*10, 70*10, 20*10, 20*10, 10*10, 10*10,
      	
         ; build links from zone to transit node (code 1)
         direction = 1,
      	
         ; build up to 30 access links total (30 is the maximum parameter value)
         maxlinks = 30,
      	
         ; set the maximum distance to be .75 miles
         maxdist = 9*75, 70*75, 20*75, 20*75, 10*75, 10*75,
      	
         ; generate walk access or mode 1 links
         mode = 1
      	
      ; read in the funnel links
      read file = trn\transitLines.zac

      ; additional hand-coded walk access links (many will be generated, creating warning messages)
      read file = trn\walk_access.sup

      ; read in the transit stop locations in the line files
      read  file = trn\transitLines.link
      read  file = trn\transitLines.lin

   endrun   

   ; step 2: build drive access links
   run pgm = trnbuild
   
      ; input is created by PrepHwyNet.job and contains the access neti links
      filei neti = trn\@token_period@_temporary_transit_background_accesslinks.net
      
      ; output drive access links in in TP+ link file format
      fileo linko    = trn\@token_period@_drive_links.dbf  
      
      ; output the walk access links in support link format to be read in by the transit assignment
      fileo supporto = trn\@token_period@_drive_acclinks.dat, oneway = n, fixed = y, modes = 1-9
      
      ; set the highway time to be the park-and-ride time computed in PrepHwyNet.job
      hwytime = PNR_TIME
      
      ; use the transit headway corresponding to the time period
      freqperiod = @period@
            
      ; we are not building paths
      buildpaths = f
      
      ; set the walk speed to 3.0 mph
      walkspeed = 3.0
      
      ; do not reprint the input to reduce the size of the TP+ report file
      listinput = no
      
      ; ignore the speeds implied by the run times coded for the bus routes
      useruntime = n       
      
      ; do not allow paths with perceived times longer than 4 hours
      maxpathtime = 240
      
      ; transit run times longer than 4 hours generate a warning statement in the print file
      maxruntime  = 240
      
      ; we want drive access connectors -- mode 2 -- for all non-external i-j pairs
      select i = 1-1454, j = 1-1454  
      select accessmodes = 2
      
      ; park and ride parameters -- mode 2 is centroid to drive auxiliary nodes
      ;	                         -- mode 4 is drive auxiliary nodes to station platform (funnel links)
      ;	                         -- 40 minutes the maximum time allowed to reach the pnr lot
      pnr mode = 2  lotmode = 4  oneway = y  maxtime = 40  global = y
      
      ; read in the pnr nodes      
      read file = trn\transitLines_express_bus.pnr
      read file = trn\transitLines_light_rail.pnr
      read file = trn\transitLines_ferry.pnr
      read file = trn\transitLines_heavy_rail.pnr
      read file = trn\transitLines_commuter_rail.pnr

      ; trnbuild requires that we read in some transit lines, though we're building
      ; drive access links to funnel nodes, so no reading of lines are necessary
      ; a dummy read is entered here to placate trnbuild, and muni lines are chosen
      ; to avoid numerous errors for long run times caused by the PNR_TIME values, which
      ; are artificially increased to prevent PNR over bridges
      read file = trn\transitLines.link
      read file = trn\transitLines.lin
   endrun   
   
   
   ; step 3: use a gawk script to reverse the access links to turn them into egress links   
   *gawk -f ctramp\scripts\skims\reverselinks.awk trn\@token_period@_walk_acclinks.dat > trn\@token_period@_walk_egrlinks.dat
   *gawk -f ctramp\scripts\skims\reverselinks.awk trn\@token_period@_drive_acclinks.dat > trn\@token_period@_drive_egrlinks.dat
   
     
   ; step 4: build transfer links and combine with access and egress links
   run pgm = trnbuild
   
      ; input is created by PrepHwyNet.job and contains the transfer neti links
      filei neti = trn\@token_period@_temporary_transit_background_transferlinks.net
      
      ; output transfer links along with the access and egress links in in TP+ link file format
      fileo linko = trn\@token_period@_transit_links.dbf
      
      ; output the transfer links along with the access and egress links in support link format to be read in by the transit assignment
      FILEO supporto = trn\@token_period@_transit_suplinks.dat, oneway = n, fixed = y, modes = 1-9
   
      ; set the highway time to be the bus time computed in PrepHwyNet.job
      hwytime = BUS_TIME    
      
      ; use the transit headway corresponding to the time period
      freqperiod = @period@
            
      ; we are not building paths
      buildpaths = f
      
      ; set the walk speed to 3.0 mph
      walkspeed = 3.0
      
      ; do not reprint the input to reduce the size of the TP+ report file
      listinput = no
      
      ; ignore the speeds implied by the run times coded for the bus routes
      useruntime = n       
      
      ; do not allow paths with perceived times longer than 4 hours
      maxpathtime = 240
      
      ; transit run times longer than 4 hours generate a warning statement in the print file
      maxruntime  = 240
   
      ; allow paths to emerge from zones via walk (1) or drive (2) access modes
      select i = 1-1454, j = 1-1454  
      select accessmodes = 1, 2
      
      ; we are not generating zone access links
      zoneaccess generate = n
      
      ; generate transfer links
      ; recall we have 9 support modes, 70 local bus modes, 20 express bus, 10 lrt, 10 ferry, 10 heavy rail, and 10 commuter rail
      ; set the maximum distance to be .75 miles
      xfergen mode = 3, maxdist = 9*75, 70*75, 20*75, 20*75, 10*75, 10*75
      
      ; read in walk/drive access and walk egress link files created in the preceeding steps in their script
      read file = trn\@token_period@_walk_acclinks.dat     
      read file = trn\@token_period@_walk_egrlinks.dat     
      read file = trn\@token_period@_drive_acclinks.dat     
      read file = trn\@token_period@_drive_egrlinks.dat     
   
      ; read in the transit stop locations in the line files
      read  file = trn\transitLines.link
      read  file = trn\transitLines.lin
   endrun
   
   ; step 5: select two best park and ride locations for each mode and create the support links that are used in skimming/assignment  
   *gawk -f ctramp\scripts\skims\select_pnrs.awk -v type=walk          -v period=@token_period@ trn\@token_period@_transit_suplinks.dat > trn\@token_period@_transit_suplinks_walk.dat
   *gawk -f ctramp\scripts\skims\select_pnrs.awk -v type=express_bus   -v period=@token_period@ trn\@token_period@_transit_suplinks.dat > trn\@token_period@_transit_suplinks_express_bus.dat
   *gawk -f ctramp\scripts\skims\select_pnrs.awk -v type=light_rail    -v period=@token_period@ trn\@token_period@_transit_suplinks.dat > trn\@token_period@_transit_suplinks_light_rail.dat
   *gawk -f ctramp\scripts\skims\select_pnrs.awk -v type=ferry         -v period=@token_period@ trn\@token_period@_transit_suplinks.dat > trn\@token_period@_transit_suplinks_ferry.dat
   *gawk -f ctramp\scripts\skims\select_pnrs.awk -v type=heavy_rail    -v period=@token_period@ trn\@token_period@_transit_suplinks.dat > trn\@token_period@_transit_suplinks_heavy_rail.dat
   *gawk -f ctramp\scripts\skims\select_pnrs.awk -v type=commuter_rail -v period=@token_period@ trn\@token_period@_transit_suplinks.dat > trn\@token_period@_transit_suplinks_commuter_rail.dat
   
   ; step 6: create KNR access links for local bus from walk access links
   *gawk -f ctramp\scripts\skims\createLocalBusKNRs.awk trn\@token_period@_transit_suplinks_walk.dat > trn\@token_period@_bus_acclinks_KNR.dat
   
   ; EndDistributeMultistep
           
endloop ; period loop

; wait for each time period to finish before proceeding
;Wait4Files files = ctramp1.script.end, 
;                   ctramp2.script.end, 
;                   ctramp3.script.end, 
;                   ctramp4.script.end, 
;                   ctramp5.script.end, 
;           printfiles = merge, deldistribfiles = t, checkreturncode = t
