; ----------------------------------------------------------------------------------------------------------------
;
; AddPavementCost.job
;
; TP+ script to add pavement-cost adjustment variables to the network.  Costs are expressed as an adjustment
; factor to either the R&M (Repair and Maintenance) cost per mile or the Fuel cost per mile relative to
; a perfect-pavement cost per mile.  Cost adjustments are segmented by city, facility type, and vehicle class.  
; This cost adjustment informs the route choice decisions embedded in the highway assignment routine, and 
; this price is included in the cost skims. 
;
; Cost adjustments are looked up in INPUT\sgr\city_opcost_adjustment.csv and are meant to represent pavement
; quality.  For format of that file is: Cityid,    (corresponds to cityid in the network)
;                                       Cityname,  (for debugging)
;                                       Year,      (for debugging)
;                                       Arterial  facility Auto Repair & Maintenance Adjustment Factor,
;                                       Arterial  facility Auto Fuel Adjustment Factor,
;                                       Collector facility Auto Repair & Maintenance Adjustment Factor,
;                                       Collector facility Auto Fuel Adjustment Factor,
;                                       Local     facility Auto Repair & Maintenance Adjustment Factor,
;                                       Local     facility Auto Fuel Adjustment Factor,
;                                       Arterial  facility Small/Light Truck R&M Adjustment Factor,
;                                       Arterial  facility Small/Light Truck Fuel Adjustment Factor,
;                                       Collector facility Small/Light Truck R&M Adjustment Factor,
;                                       Collector facility Small/Light Truck Fuel Adjustment Factor,
;                                       Local     facility Small/Light Truck R&M Adjustment Factor,
;                                       Local     facility Small/Light Truck Fuel Adjustment Factor,
;                                       Arterial  facility Large Truck R&M Adjustment Factor,
;                                       Arterial  facility Large Truck Fuel Adjustment Factor,
;                                       Collector facility Large Truck R&M Adjustment Factor,
;                                       Collector facility Large Truck Fuel Adjustment Factor,
;                                       Local     facility Large Truck R&M Adjustment Factor,
;                                       Local     facility Large Truck Fuel Adjustment Factor,
;                                       Arterial  facility Bus R&M Adjustment Factor,
;                                       Arterial  facility Bus Fuel Adjustment Factor
;                                       Collector facility Bus R&M Adjustment Factor,
;                                       Collector facility Bus Fuel Adjustment Factor
;                                       Local     facility Bus R&M Adjustment Factor,
;                                       Local     facility Bus Fuel Adjustment Factor
;
;
; A factor called XXX_rm_adjust and XXX_fu_adjust is looked up and stored for each roadway link.
; XXX is one of auto, smtr(small truck), lrtr(large truck), and bus.  The lookup is based on the city and
; stored for streets that are not freeways or state highways - so it is stored for facility types 3, 4, 6 and 7.
; The adjustments are mulipliers for the perfect-road opcost, and so they are greater than or equal to 1.0.
; Freeway links have adjustment factors set to 0.  Links with cities that are not in the lookups have
; their adjustment factors set to -1 and cities without data have their adjustment factors set to -1.
;  Both these special values will be handled in the skimming/assignment.
;
; Input:  (A) Five highway networks, one for each time period, containing the following fields:
;             (a) GL (integer), which is a county code, where 1 is San Francisco, 2 is San Mateo, 3 is Santa Clara,
;                 4 is Alameda, 5 is Contra Costa, 6 is Solano, 7 is Napa, 8 is Sonoma, and 9 is Marin; 
;             (b) cityid (integer), which is a city code, where 1 is Alameda, 2 is Alamo, 3 is Albany, etc.;
;             (c) FT (integer), which is the facility type, where 1 is freeway-to-freeway ramp, 2 is freeway,
;                 3 is expressway, 4 is collector, 5 is freeway ramp, 6 is centroid connector/dummy link,
;                 7 is major arterial, 8 is metered ramp, 9 is freeways with ITS treatments and Golden Gate Bridge,
;                 9 expressways and arterials with ITS treatments. 
;
; Output: (A) Five highway networks, one for each time period, containing the following additional fields:
;             (a) XXX_YY_PERFECT, where XXX is one of AUTO, SMTR (Small truck), LRTR (large truck), and BUS;
;                 YY is one of RM (for Repair and Maintenance) and FU (for Fuel).  This is the opcost from
;                 R&M or Fuel from a roadway in perfect condition, in 2000 cents per mile.
;             (b) XXX_YY_ADJUST, which is the adjustment factor to the perfect opcost described in (a).
;                 This value is 1.0 or greater and it is based on the city in which the link resides.
;                 For freeway links, the value is zero.
;             (c) XXXOPC, which is the total opcost.  This is the perfect condition opcost times the
;                 adjustment factor, summed for both R&M and Fuel.  Units are 2000 cents per mile.
;             (d) XXXOPC_PAVE, which is the total opcost just from the pavement not being perfect.
;                 Units are 2000 cents per mile.
;
; Notes:  (1) 
;
; See also: (1) HwyAssign.job, which performs the highway assignment;
;           (2) HwySkims.job, which performs the highway skimming. 
;
; version:  Travel Model One (v 0.5)
; authors:  lmz (2014 12 17)
;
;
; ----------------------------------------------------------------------------------------------------------------


; time period loop
loop period = 1, 5

   ; define a two-letter token for each time period
   if (period = 1)   
      token_period = 'EA'
      
   elseif (period = 2)   
      token_period = 'AM'
      
   elseif (period = 3)   
      token_period = 'MD'
      
   elseif (period = 4)   
      token_period = 'PM'
      
   elseif (period = 5)   
      token_period = 'EV' 
   
   endif 
   
   ; compute bus travel times
   run pgm = NETWORK
   
      ; use the same highway network used in the skimming
      neti = hwy\avgload@token_period@.net
      
      ; output a time-period-specific transit background network
      neto = hwy\avgload@token_period@_temp_pavement.net, exclude=AUTOOPC_PER_RM, AUTOOPC_PER_FU, AUTOOPC_FWY_RM, AUTOOPC_FWY_FU,
                                                                  SMTROPC_PER_RM, SMTROPC_PER_FU, SMTROPC_FWY_RM, SMTROPC_FWY_FU,
                                                                  LRTROPC_PER_RM, LRTROPC_PER_FU, LRTROPC_FWY_RM, LRTROPC_FWY_FU,
                                                                   BUSOPC_PER_RM,  BUSOPC_PER_FU,  BUSOPC_FWY_RM,  BUSOPC_FWY_FU,
                                                                  VOT, TRUCKVOT, SR2COSTSHARE, SR3COSTSHARE, TRKPCE, FIRSTVALUE

      read file = ctramp\scripts\block\hwyparam.block
            
      ; pavement cost adjustment parameters
      lookup name=pave,
        lookup[1]  = 1, result = 4,  ; arterial  auto repair & maintenance adjustment
        lookup[2]  = 1, result = 5,  ; arterial  auto fuel adjustment
        lookup[3]  = 1, result = 6,  ; collector auto repair & maintenance adjustment
        lookup[4]  = 1, result = 7,  ; collector auto fuel adjustment
        lookup[5]  = 1, result = 8,  ; local     auto repair & maintenance adjustment
        lookup[6]  = 1, result = 9,  ; local     auto fuel adjustment
        lookup[7]  = 1, result = 10, ; arterial  small truck repair & maintenance adjustment
        lookup[8]  = 1, result = 11, ; arterial  small truck fuel adjustment
        lookup[9]  = 1, result = 12, ; collector small truck repair & maintenance adjustment
        lookup[10] = 1, result = 13, ; collector small truck fuel adjustment
        lookup[11] = 1, result = 14, ; local     small truck repair & maintenance adjustment
        lookup[12] = 1, result = 15, ; local     small truck fuel adjustment
        lookup[13] = 1, result = 16, ; arterial  large truck repair & maintenance adjustment
        lookup[14] = 1, result = 17, ; arterial  large truck fuel adjustment
        lookup[15] = 1, result = 18, ; collector large truck repair & maintenance adjustment
        lookup[16] = 1, result = 19, ; collector large truck fuel adjustment
        lookup[17] = 1, result = 20, ; local     large truck repair & maintenance adjustment
        lookup[18] = 1, result = 21, ; local     large truck fuel adjustment
        lookup[19] = 1, result = 22, ; arterial  bus repair & maintenance adjustment
        lookup[20] = 1, result = 23, ; arterial  bus fuel adjustment
        lookup[21] = 1, result = 24, ; collector bus repair & maintenance adjustment
        lookup[22] = 1, result = 25, ; collector bus fuel adjustment
        lookup[23] = 1, result = 26, ; local     bus repair & maintenance adjustment
        lookup[24] = 1, result = 27, ; local     bus fuel adjustment
        fail = -1,-1,-1,
        interpolate = N,
        file = INPUT\sgr\city_opcost_adjustment.csv

      ; perfect opcost is R&M opcost + Fuel opcost
      autoopc_perfect = AUTOOPC_PER_RM + AUTOOPC_PER_FU
      smtropc_perfect = SMTROPC_PER_RM + SMTROPC_PER_FU
      lrtropc_perfect = LRTROPC_PER_RM + LRTROPC_PER_FU
      busopc_perfect  =  BUSOPC_PER_RM +  BUSOPC_PER_FU
      if (STATE == 1)
        ; State highways -- Use freeway adjustment
        ; Not setting the adjustment into the network so its obvious defaults are used
        auto_rm_adjust = 0
        auto_fu_adjust = 0
        smtr_rm_adjust = 0
        smtr_rm_adjust = 0
        lrtr_rm_adjust = 0
        lrtr_rm_adjust = 0
        ; opcost =  perfect condition R&M cost x non-perfect condition adjustment +
        ;          perfect condition fuel cost x non-perfect condition ajustment
        autoopc = (AUTOOPC_PER_RM*AUTOOPC_FWY_RM) + (AUTOOPC_PER_FU*AUTOOPC_FWY_FU)
        smtropc = (SMTROPC_PER_RM*SMTROPC_FWY_RM) + (SMTROPC_PER_FU*SMTROPC_FWY_FU)
        lrtropc = (LRTROPC_PER_RM*LRTROPC_FWY_RM) + (LRTROPC_PER_FU*LRTROPC_FWY_FU)
        busopc  = ( BUSOPC_PER_RM* BUSOPC_FWY_RM) + ( BUSOPC_PER_FU* BUSOPC_FWY_FU)
      elseif ((FT == 3) || (FT == 7))
        ; expressway or major arterial - use arterial
        auto_rm_adjust = pave( 1, cityid)
        auto_fu_adjust = pave( 2, cityid)
        smtr_rm_adjust = pave( 7, cityid)
        smtr_fu_adjust = pave( 8, cityid)
        lrtr_rm_adjust = pave(13, cityid)
        lrtr_fu_adjust = pave(14, cityid)
        bus_rm_adjust  = pave(19, cityid)
        bus_fu_adjust  = pave(20, cityid)

        if ((auto_rm_adjust == -1) || (auto_fu_adjust == -1))
           ; No data -- lookup county remainder
           if     (gl==1)
             _county_name   = 'San Francisco'
             _county_cityid = 176
           elseif (gl==2)
             _county_name   = 'San Mateo'
             _county_cityid = 177
           elseif (gl==3)
             _county_name   = 'Santa Clara'
             _county_cityid = 178
           elseif (gl==4)
             _county_name   = 'Alameda'
             _county_cityid = 172
           elseif (gl==5)
             _county_name   = 'Contra Costa'
             _county_cityid = 173
           elseif (gl==6)
             _county_name   = 'Solano'
             _county_cityid = 179
           elseif (gl==7)
             _county_name   = 'Napa'
             _county_cityid = 175
           elseif (gl==8)
             _county_name   = 'Sonoma'
             _county_cityid = 180
           elseif (gl==9)
             _county_name   = 'Marin'
             _county_cityid = 174
           elseif (gl==10) ; There are a few of these on the periphery.  Call them Contra Costa.
             _county_name   = 'Periphery'
             _county_cityid = 173
           endif
           print LIST="lookup failed for ",cityname," -- using lookup for ",_county_name

           auto_rm_adjust = pave( 1, _county_cityid)
           auto_fu_adjust = pave( 2, _county_cityid)
           smtr_rm_adjust = pave( 7, _county_cityid)
           smtr_fu_adjust = pave( 8, _county_cityid)
           lrtr_rm_adjust = pave(13, _county_cityid)
           lrtr_fu_adjust = pave(14, _county_cityid)
           bus_rm_adjust  = pave(19, _county_cityid)
           bus_fu_adjust  = pave(20, _county_cityid)
        endif
        ; opcost =  perfect condition R&M cost x non-perfect condition adjustment +
        ;          perfect condition fuel cost x non-perfect condition ajustment
        autoopc = (AUTOOPC_PER_RM*auto_rm_adjust) + (AUTOOPC_PER_FU*auto_fu_adjust)
        smtropc = (SMTROPC_PER_RM*smtr_rm_adjust) + (SMTROPC_PER_FU*smtr_fu_adjust)
        lrtropc = (LRTROPC_PER_RM*lrtr_rm_adjust) + (LRTROPC_PER_FU*lrtr_fu_adjust)
        busopc  = ( BUSOPC_PER_RM* bus_rm_adjust) + ( BUSOPC_PER_FU* bus_fu_adjust)

      elseif (FT == 4)
        ; collector
        auto_rm_adjust = pave( 3, cityid)
        auto_fu_adjust = pave( 4, cityid)
        smtr_rm_adjust = pave( 9, cityid)
        smtr_fu_adjust = pave(10, cityid)
        lrtr_rm_adjust = pave(15, cityid)
        lrtr_fu_adjust = pave(16, cityid)
        bus_rm_adjust  = pave(21, cityid)
        bus_fu_adjust  = pave(22, cityid)

        if ((auto_rm_adjust == -1) || (auto_fu_adjust == -1))
           ; No data -- lookup county remainder
           if     (gl==1)
             _county_name   = 'San Francisco'
             _county_cityid = 176
           elseif (gl==2)
             _county_name   = 'San Mateo'
             _county_cityid = 177
           elseif (gl==3)
             _county_name   = 'Santa Clara'
             _county_cityid = 178
           elseif (gl==4)
             _county_name   = 'Alameda'
             _county_cityid = 172
           elseif (gl==5)
             _county_name   = 'Contra Costa'
             _county_cityid = 173
           elseif (gl==6)
             _county_name   = 'Solano'
             _county_cityid = 179
           elseif (gl==7)
             _county_name   = 'Napa'
             _county_cityid = 175
           elseif (gl==8)
             _county_name   = 'Sonoma'
             _county_cityid = 180
           elseif (gl==9)
             _county_name   = 'Marin'
             _county_cityid = 174
           elseif (gl==10) ; There are a few of these on the periphery.  Call them Contra Costa.
             _county_name   = 'Periphery'
             _county_cityid = 173
           endif
           print LIST="lookup failed for ",cityname," -- using lookup for ",_county_name

           auto_rm_adjust = pave( 3, _county_cityid)
           auto_fu_adjust = pave( 4, _county_cityid)
           smtr_rm_adjust = pave( 9, _county_cityid)
           smtr_fu_adjust = pave(10, _county_cityid)
           lrtr_rm_adjust = pave(15, _county_cityid)
           lrtr_fu_adjust = pave(16, _county_cityid)
           bus_rm_adjust  = pave(21, _county_cityid)
           bus_fu_adjust  = pave(22, _county_cityid)
        endif
        ; opcost =  perfect condition R&M cost x non-perfect condition adjustment +
        ;          perfect condition fuel cost x non-perfect condition ajustment
        autoopc = (AUTOOPC_PER_RM*auto_rm_adjust) + (AUTOOPC_PER_FU*auto_fu_adjust)
        smtropc = (SMTROPC_PER_RM*smtr_rm_adjust) + (SMTROPC_PER_FU*smtr_fu_adjust)
        lrtropc = (LRTROPC_PER_RM*lrtr_rm_adjust) + (LRTROPC_PER_FU*lrtr_fu_adjust)
        busopc  = ( BUSOPC_PER_RM* bus_rm_adjust) + ( BUSOPC_PER_FU* bus_fu_adjust)

      elseif (FT == 6)
        ; collector
        auto_rm_adjust = pave( 5, cityid)
        auto_fu_adjust = pave( 6, cityid)
        smtr_rm_adjust = pave(11, cityid)
        smtr_fu_adjust = pave(12, cityid)
        lrtr_rm_adjust = pave(17, cityid)
        lrtr_fu_adjust = pave(18, cityid)
        bus_rm_adjust  = pave(23, cityid)
        bus_fu_adjust  = pave(24, cityid)

        if ((auto_rm_adjust == -1) || (auto_fu_adjust == -1))
           ; No data -- lookup county remainder
           if     (gl==1)
             _county_name   = 'San Francisco'
             _county_cityid = 176
           elseif (gl==2)
             _county_name   = 'San Mateo'
             _county_cityid = 177
           elseif (gl==3)
             _county_name   = 'Santa Clara'
             _county_cityid = 178
           elseif (gl==4)
             _county_name   = 'Alameda'
             _county_cityid = 172
           elseif (gl==5)
             _county_name   = 'Contra Costa'
             _county_cityid = 173
           elseif (gl==6)
             _county_name   = 'Solano'
             _county_cityid = 179
           elseif (gl==7)
             _county_name   = 'Napa'
             _county_cityid = 175
           elseif (gl==8)
             _county_name   = 'Sonoma'
             _county_cityid = 180
           elseif (gl==9)
             _county_name   = 'Marin'
             _county_cityid = 174
           elseif (gl==10) ; There are a few of these on the periphery.  Call them Contra Costa.
             _county_name   = 'Periphery'
             _county_cityid = 173
           endif
           print LIST="lookup failed for ",cityname," -- using lookup for ",_county_name

           auto_rm_adjust = pave( 5, _county_cityid)
           auto_fu_adjust = pave( 6, _county_cityid)
           smtr_rm_adjust = pave(11, _county_cityid)
           smtr_fu_adjust = pave(12, _county_cityid)
           lrtr_rm_adjust = pave(17, _county_cityid)
           lrtr_fu_adjust = pave(18, _county_cityid)
           bus_rm_adjust  = pave(23, _county_cityid)
           bus_fu_adjust  = pave(24, _county_cityid)
        endif
        ; opcost =  perfect condition R&M cost x non-perfect condition adjustment +
        ;          perfect condition fuel cost x non-perfect condition ajustment
        autoopc = (AUTOOPC_PER_RM*auto_rm_adjust) + (AUTOOPC_PER_FU*auto_fu_adjust)
        smtropc = (SMTROPC_PER_RM*smtr_rm_adjust) + (SMTROPC_PER_FU*smtr_fu_adjust)
        lrtropc = (LRTROPC_PER_RM*lrtr_rm_adjust) + (LRTROPC_PER_FU*lrtr_fu_adjust)
        busopc  = ( BUSOPC_PER_RM* bus_rm_adjust) + ( BUSOPC_PER_FU* bus_fu_adjust)

      else
        ; Use freeway adjustment
        ; Not setting the adjustment into the network so its obvious defaults are used
        auto_rm_adjust = 0
        auto_fu_adjust = 0
        smtr_rm_adjust = 0
        smtr_rm_adjust = 0
        lrtr_rm_adjust = 0
        lrtr_rm_adjust = 0
        ; opcost =  perfect condition R&M cost x non-perfect condition adjustment +
        ;          perfect condition fuel cost x non-perfect condition ajustment
        autoopc = (AUTOOPC_PER_RM*AUTOOPC_FWY_RM) + (AUTOOPC_PER_FU*AUTOOPC_FWY_FU)
        smtropc = (SMTROPC_PER_RM*SMTROPC_FWY_RM) + (SMTROPC_PER_FU*SMTROPC_FWY_FU)
        lrtropc = (LRTROPC_PER_RM*LRTROPC_FWY_RM) + (LRTROPC_PER_FU*LRTROPC_FWY_FU)
        busopc  = ( BUSOPC_PER_RM* BUSOPC_FWY_RM) + ( BUSOPC_PER_FU* BUSOPC_FWY_FU)
      endif

      ; the extra opcost from non-perfect pavement
      autoopc_pave = autoopc-autoopc_perfect
      smtropc_pave = smtropc-smtropc_perfect
      lrtropc_pave = lrtropc-lrtropc_perfect
      busopc_pave  =  busopc- busopc_perfect

   endrun
   
   run pgm = network
   
      neti = hwy\avgload@token_period@_temp_pavement.net
      neto = hwy\avgload@token_period@.net
   
   endrun

   
endloop
   
