; TODO: what are we going to do about 2000, 2005, and 2015.
; Option 1: this version is just used for project perf assessment (choice for now)
; Option 2: we make up values for all four years and see if the model validates, then use it for PBAs

; ----------------------------------------------------------------------------------------------------------------
;
; HwyAssign.job
;
; TP+ script to assign vehicle and truck trips to the highway network.  Assignments are performed for each of the 
; following time periods: (a) early AM, 3 am to 6 am; (b) AM peak period, 6 am to 10 am; (c) midday, 10 am to 3 pm; 
; (d) PM peak period, 3 pm to 7 pm; and, (e) evening, 7 pm to 3 am.  
;
; Ten vehicle classes are tracked in each assignment, with value-toll-eligible and not-value-toll-eligible classes
; as follows:
;      (1) drive alone, no value toll
;      (2) shared ride 2, no value toll
;      (3) shared ride 3+, no value toll
;      (4) very small, small, and medium trucks, no value toll
;      (5) large trucks, no value toll
;      (6) drive alone, value toll eligible
;      (7) shared ride 2, value toll eligible
;      (8) shared ride 3+, value toll eligible
;      (9) very small, small, and medium trucks, value toll eligible
;     (10) large trucks, value toll eligible
;
; Four types of trips are assigned, as follows: (a) personal, inter-regional travel; (b) personal, intra-regional
; travel; (c) commercial travel; and, (d) air passenger travel.  Separate trip tables are read in by the script for 
; each of these travel types. 
;
; Input:  (A) A highway network containing the following fields: (a) DISTANCE (miles); (b) FT, which is the facility type
;         a code which determines the links'' free-flow speed, capacity, and volume/speed relationship; (c) TOLLCLASS,
;         which is a code, less than FIRSTVALUE - 1 (see hwyParam.block) indicates the link is a bridge toll 
;         and a value higher than FIRSTVALUE indicates the link is a value toll; (d) OT, which is the observed
;         travel time for links immune to congestion (generally used to represent toll booth delay and centroid
;         connector travel time); (e) FFS,which is the free flow speed (in miles per hour); (f) TSIN, which is a 
;         code, a value of one indicates the link is immune to congestion and has a fixed time coded in the OT 
;         field; (g) CAPCLASS, which is a speed/capacity look-up code (see the "SpeedCapacity.block" file); and
;         (h) TOLLXX_CC, where XX is a two-character time-period code and CC is a two or three-character vehicle
;         class code, and the value is the dollar value of the toll to go through the link in year 2000 dollars;
;         (i) XXXXOPC, where XXXX is a vehicle class (one of AUTO,SMTR,LRTR), and represents a city-specific
;         operating cost in year 2000 dollars that includes pavement-degradation increases on fuel and repair &
;         maintenance costs.
;
; Output: (A) Five loaded highway networks, one for each time period, containing the following data for each link:
;              (1)  V_1 - volume, in passenger car equivalents (if assigned again, volume would be labeled V_2);
;              (2)  TIME_1 - congested time, in minutes
;              (3)  VC_1 - volume to capacity ratio
;              (4)  CSPD_1 - congested speed, in miles per hour
;              (5)  VDT_1 - vehicle distance traveled, in vehicle miles
;              (6)  VHT_1 - vehicle hours traveled
;              (7)  V1_1  - volume of vehicles in assigment class one: drive alone, no value toll
;              (8)  V2_1  - volume of vehicles in assigment class two: two-occupant vehicles, no value toll
;              (9)  V3_1  - volume of vehicles in assigment class three: three-or-more-occupant vehicles, no value toll
;              (10) V4_1  - volume of vehicles in assigment class four: very small, small, and medium trucks, no value toll
;              (11) V5_1  - volume of vehicles in assigment class five: combination trucks, no value toll 
;              (12) V6_1  - volume of vehicles in assigment class six: drive alone, value toll
;              (13) V7_1  - volume of vehicles in assigment class seven: two-occupant vehicles, value toll
;              (14) V8_1  - volume of vehicles in assigment class eight: three-or-more-occupant vehicles, value toll
;              (15) V9_1  - volume of vehicles in assigment class nine: very small, small, and medium trucks, value toll
;              (16) V10_1 - volume of vehicles in assigment class ten: combination trucks, value toll 
;              (17) VT_1 and VXT_1, where X is 1 through 10, are the b-to-a volumes
;                              
;
; Notes: (1) Four types of commercial vehicle demand is estimated: very small, small, medium, and large commercial
;            trucks.  Two classes of commercial trucks are assigned: (1) very small, small, and medium; and, (2)
;            large trucks.  The characteristics of the small trucks (value of time, toll) is used in the assignment
;            of the very small, small, and medium truck class. 
;        (2) Facility type codes are as follows: (i) freeway-to-freeway ramp; (ii) freeway; (iii) expressway; (iv)
;            collector; (v) freeway ramp; (vi) centroid connector/dummy link; (vii) major arterial; (viii) metered
;            ramp; (ix) freeways with ITS treatments and Golden Gate Bridge; (x) expressways and arterials with
;            ITS treatments.
;        (3) Area type codes are as follows: (0) core; (i) central business district; (ii) urban business district;
;            (iii) urban; (iv) suburban; (v) rural.
;        (4) The capacity class is computed as ten times area type plus facility type. 
;        (5) For v 0.4, return to Frank-Wolfe and use 64 threads
;
; See also: (1) CreateFiveHighwayNetworks.job, which creates the time-specific networks;
;           (2) SetTolls.job, which sets the time- and class-specific bridge and value tools;
;           (3) AddPavementCost.job, which sets the pavement degradation cost.
;
; version:  Travel Model One (v 0.5)
; authors:  dto(2014 08 XX); dto (2014 01 23); dto (2011 12 13); dto (2010 08 10); gde (2009)
;
;
; ----------------------------------------------------------------------------------------------------------------

; do, more or less, the same assignment procedure for each time period
loop period = 1, 5
  
   ; a two letter token is used for each time period  
   if (period = 1)    
      token_period = 'EA'
      
      ; set the capacity factor, which is the number of hours represented in the assignment
      token_capfac = 'parameters capfac = 3'
      
      ; set the processors to be used for the intrastep multithreading
      token_intrastep_processlist = '7-16'
      
      ; switch to use time penalties for transfering to hov lane
      token_hov_xfer_pen = '0'
      
      ; set the relative gap convergence criterion
      token_relativegap = 'parameters relativegap = 0.003'
      
      ; set the maximum number of iterations
      token_maxiters = 'parameters maxiters = 50'
      
   elseif (period = 2)      
      token_period = 'AM'
      token_capfac = 'parameters capfac = 4'
      token_intrastep_processlist = '17-32'
      token_hov_xfer_pen = 'li.HOVXPEN'
      token_relativegap = 'parameters relativegap = 0.0005'
      token_maxiters = 'parameters maxiters = 300'
      
   elseif (period = 3)   
      token_period = 'MD'
      token_capfac = 'parameters capfac = 5'
      token_intrastep_processlist = '33-48'
      token_hov_xfer_pen = '0'
      token_relativegap = 'parameters relativegap = 0.0005'
      token_maxiters = 'parameters maxiters = 300'      
  
   elseif (period = 4)   
      token_period = 'PM'
      token_capfac = 'parameters capfac = 4'
      token_intrastep_processlist = '49-64'
      token_hov_xfer_pen = 'li.HOVXPEN'
      token_relativegap = 'parameters relativegap = 0.0005'
      token_maxiters = 'parameters maxiters = 300'      
  
   elseif (period = 5) 
      token_period = 'EV'
      token_capfac = 'parameters capfac = 8'
      token_intrastep_processlist = '6'
      token_hov_xfer_pen = '0'
      token_relativegap = 'parameters relativegap = 0.003'
      token_maxiters = 'parameters maxiters = 50' 
  
   endif

   ; distribute via cluster
   DistributeMultistep processid = 'CTRAMP', processNum = @period@, commpath = 'm:\commpath'
  
   run pgm = highway
  
      ; distribute via cluster
      DistributeIntrastep processid = 'CTRAMP', processlist = @token_intrastep_processlist@, commpath = 'm:\commpath', saveprn = f
    
      ; time-specific input highway network
      neti    = hwy\avgload@token_period@.net
      
      ; household travel demand
      mati[1] = main\trips@token_period@.tpp
      
      ; internal/external travel demand
      mati[2] = nonres\tripsIx@token_period@.tpp 
      
      ; commercial travel demand
      mati[3] = nonres\tripsTrk@token_period@.tpp
      
      ; air passenger travel demand
      mati[4] = nonres\tripsAirPax@token_period@.tpp
    
      ; loaded time-specific highway network
      neto    = hwy\load@token_period@.net
    
      ; set the assignment paramters -- equilibrium assignment, frank-wolfe
      parameters combine = equi;, enhance = 2            
      
      ; set the assignment parameters -- 1454 internal zones + 21 external zones
      parameters zones = 1475
      
      ; set the assignment parameters -- maximum number of iterations to 300
      @token_maxiters@ 
      
      ; set the assignment parameters -- closure criteria (tighten up as runtime allows)
      @token_relativegap@ 
      
      ; set the assignment parameters -- other closure criteria (do not use)
      parameters gap = 0, aad = 0, raad = 0, rmse = 0
    
      ; set the number of hours in the assignment (see the loop tokens)
      @token_capfac@ 
    
      ; hwyParam.bock contains variables used in the remainder of the script, particularly in the generalized cost expressions
      read file = ctramp\scripts\block\hwyparam.block
      
      ; read in the speed/capacity table
      read file = ctramp\scripts\block\SpeedCapacity_1hour.block 
      
      ; set the working variables
      phase = linkread
      
         ; distance is used in the volume/delay functions and the generalized cost function
         distance = li.DISTANCE
         
         ; facility type is used in the compuation of the volume/delay function parameter
         linkclass = li.FT
         
         ; tollclass determines whether a link is only available to value toll payers
         lw.tollclass = li.TOLLCLASS
         
         ; fixed time links (where TSIN = 1) are indifferent to congestion
         lw.ot = li.OT
         
         ; free-flow speed is used in the volume/delay functions
         lw.ffs = li.FFS
         
         ; free-flow time is a function of free-flow speed and distance and is used in the generalized cost function
         lw.fft = (distance/lw.ffs) * 60 
         
         ; TSIN is a code, where 1 indicates the link has a fixed time and is immune to demand
         lw.tsin = li.TSIN
         
         ; link capacity is a function of the number of lanes
         lw.lanes = li.LANES
         
         ; the speed/capacity table and the computation of the volume/delay function parameter (see FreeFlowSpeed.block) uses the capacity class code
         ; which is area type * 10 + facility type
         lw.capclass = li.CAPCLASS
         
         ; set the input time to OT for fixed time links
         if (lw.tsin = 1)
            t0 = lw.ot
         endif
      
	     ; the setting of critical speeds and computation of the volume/delay function parameter is in the FreeFlowSpeed.block file
	     read file = ctramp\scripts\block\FreeFlowSpeed.block
	 
	     ; compute the generalized cost for passenger vehicles
         lw.gencost_da = lw.fft + (0.6/vot) * (lw.dist*li.autoopc + li.TOLL@token_period@_DA)
         lw.gencost_s2 = lw.fft + (0.6/vot) * (lw.dist*li.autoopc + li.TOLL@token_period@_S2 / sr2costshare)  + @token_hov_xfer_pen@
         lw.gencost_s3 = lw.fft + (0.6/vot) * (lw.dist*li.autoopc + li.TOLL@token_period@_S3 / sr3costshare)  + @token_hov_xfer_pen@
         
         ; compute the generalized cost for very small, small, and medium trucks (use small truck costs) and large trucks
         lw.gencost_sml = lw.fft + (0.6/truckvot) * (lw.dist*li.smtropc + li.TOLL@token_period@_SML)
         lw.gencost_lrg = lw.fft + (0.6/truckvot) * (lw.dist*li.lrtropc + li.TOLL@token_period@_LRG)
         
         ; create the link exclusion classes -- HOV only (23), HOV 3+ only (3), no large trucks (4)                
         if (li.USE = 2,3)   addtogroup = 23 
         if (li.USE = 3)     addtogroup = 3              
         if (li.USE = 2,3,4) addtogroup = 4                            
         
         ; create the link exclusion classes -- value toll links for passenger vehicles
         if (lw.tollclass >= firstvalue && li.TOLL@token_period@_DA > 0) addtogroup = 11
         if (lw.tollclass >= firstvalue && li.TOLL@token_period@_S2 > 0) addtogroup = 12
         if (lw.tollclass >= firstvalue && li.TOLL@token_period@_S3 > 0) addtogroup = 13
         
         ; create the link exclusion classes -- value toll links for commercial vehicles (use SML for very small, small, and medium)
         if (lw.tollclass >= firstvalue && li.TOLL@token_period@_SML > 0) addtogroup = 14
         if (lw.tollclass >= firstvalue && li.TOLL@token_period@_LRG > 0) addtogroup = 15
    
      endphase
  
      ; set the pathload parameters
      phase = iloop
      
         ; no value toll paying classes firsth
  	  
         ; drive alone, no value toll, exclude drive alone value toll and HOV facilities, internal demand plus intra-regional demand plus air passenger demand
         pathload path = lw.gencost_da, excludegrp = 11, 23, vol[1] = mi.1.da + mi.2.da + mi.4.da
         
         ; shared ride 2, no value toll, exclude sr2 value toll and HOV 3+ facilities, internal demand plus intra-regional demand plus air passenger demand
         pathload path = lw.gencost_s2, excludegrp = 12, 3, vol[2] =  mi.1.sr2 / 2 + mi.2.sr2 + mi.4.sr2
         
         ; shared ride 3+, no value toll, exclude sr3 value toll facilities, internal demand plus intra-regional demand plus air passenger demand
         pathload path = lw.gencost_s3, excludegrp = 13, vol[3] = mi.1.sr3 / 3.25 + mi.2.sr3 + mi.4.sr3
         
         ; very small, small, and medium trucks, no value toll, exclude small truck value toll facilities and HOV facilities
         pathload path = lw.gencost_sml, excludegrp = 14, 23, vol[4] = mi.3.vstruck + mi.3.struck + mi.3.mtruck
         
         ; large trucks, no value toll, exclude large truck toll facilities, HOV facilities, and no commercial truck facilities 
         pathload path = lw.gencost_lrg, excludegrp = 15, 23, 4, vol[5] = mi.3.ctruck
         
         ; value toll paying classes second
         
         ; drive alone, value toll paying, exclude HOV facilities, internal demand plus intra-regional demand plus air passenger demand
         pathload path = lw.gencost_da, excludegrp = 23, vol[6] = mi.1.datoll + mi.2.datoll + mi.4.datoll
         
         ; shared ride 2, value toll paying, exclude HOV 3+ facilities, internal demand plus intra-regional demand plus air passenger demand
         pathload path = lw.gencost_s2, excludegrp = 3, vol[7] = mi.1.sr2toll / 2 + mi.2.sr2toll + mi.4.sr2toll
         
         ; shared ride 3+, value toll paying, no exclusions, internal demand plus intra-regional demand plus air passenger demand
         pathload path = lw.gencost_s3, vol[8] = mi.1.sr3toll / 3.25 + mi.2.sr3toll + mi.4.sr3toll
         
         ; very small, small, and medium trucks, value toll paying, excluded from HOV facilities, use the small truck generalized cost
         pathload path = lw.gencost_sml, excludegrp = 23, vol[9]= mi.3.vstrucktoll + mi.3.strucktoll + mi.3.mtrucktoll
         
         ; large trucks, value toll paying, excluded from HOV facilities and no commercial truck facilities
         pathload path = lw.gencost_lrg, excludegrp = 23, 4, vol[10] = mi.3.ctrucktoll

      endphase  
    
      ; set adjust parameters (volume delay functions)
      phase = adjust
 
         ; very small, small, and medium trucks have a passenger car equivalent of, on average 1.0, large trucks see HwyParam.block for PCE
         function v = vol[1] + vol[2] + vol[3] + vol[4] + trkpce*vol[5] + vol[6] + vol[7] + vol[8] + vol[9] + trkpce*vol[10]
           
         ; the volume delay functions are housed in the SpeedFlowCurve.block file
         read file = ctramp\scripts\block\SpeedFlowCurve.block 
      
         ; set the generalized cost functions (same as before, only now we start with "time")
         lw.gencost_da = time + (0.6/vot) * (lw.dist*li.autoopc + li.TOLL@token_period@_DA)
         lw.gencost_s2 = time + (0.6/vot) * (lw.dist*li.autoopc + li.TOLL@token_period@_S2 / sr2costshare)  + @token_hov_xfer_pen@
         lw.gencost_s3 = time + (0.6/vot) * (lw.dist*li.autoopc + li.TOLL@token_period@_S3 / sr3costshare) + @token_hov_xfer_pen@
         
         lw.gencost_sml = time + (0.6/truckvot) * (lw.dist*li.smtropc + li.TOLL@token_period@_SML)
         lw.gencost_lrg = time + (0.6/truckvot) * (lw.dist*li.smtropc + li.TOLL@token_period@_LRG)
         
      endphase
      
   endrun      
  
   EndDistributeMultistep
  
endloop ; time period loop

Wait4Files files = CTRAMP1.script.end, CTRAMP2.script.end, CTRAMP3.script.end, CTRAMP4.script.end, CTRAMP5.script.end, 
          PrintFiles = merge, DelDistribFiles = t, CheckReturnCode = t
