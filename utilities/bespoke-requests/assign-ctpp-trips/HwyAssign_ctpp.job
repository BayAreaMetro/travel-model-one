; HwyAssign_selectLink_ctpp.job - compare to HwyAssign.job
; ----------------------------------------------------------------------------------------------------------------

read file = ctramp\scripts\block\HwyIntraStep_AM.block

; convert the o/d trips to a matrix
run pgm=matrix

  filei mati="CTPP2006-2010_Trip_Matrix_UniqueODs_Incomes_noheader.csv", pattern=ijm:v, fields=#1,2,0,3-10
  fileo mato=main\tripsAM_CTPP.tpp, mo=1-8, name=da_inc1,da_inc2,da_inc3,da_inc4,sr_inc1,sr_inc2,sr_inc3,sr_inc4

  zones=1454
  mw[1] = mi.1.1
  mw[2] = mi.1.2
  mw[3] = mi.1.3
  mw[4] = mi.1.4
  mw[5] = mi.1.5
  mw[6] = mi.1.6
  mw[7] = mi.1.7
  mw[8] = mi.1.8
endrun


; do, more or less, the same assignment procedure for each time period
loop period = 2,2

      token_period = 'AM'
      token_capfac = 'parameters capfac = 4'
      token_intrastep_processlist = token_intrastep_processlist_AM
      token_hov_xfer_pen = 'li.HOVXPEN'
      token_relativegap = 'parameters relativegap = 0.0005'
      token_maxiters = 'parameters maxiters = 1000'

   ; distribute via cluster
   DistributeMultistep processid = 'CTRAMP', processNum = @period@, commpath = '%COMMPATH%'
  
   run pgm = highway
  
      ; distribute via cluster
      DistributeIntrastep processid = 'CTRAMP', processlist = @token_intrastep_processlist@, commpath = '%COMMPATH%', saveprn = f
    
      neti    = hwy\avgload@token_period@.net  ; time-specific input highway network
      mati[1] = main\tripsAM_CTPP.tpp          ; CTPP
      neto    = hwy\loadAM_CTPP.net            ; loaded time-specific highway network
    
      ; set the assignment paramters -- equilibrium assignment, frank-wolfe
      parameters combine = equi; , enhance = 2
      
      ; set the assignment parameters -- 1454 internal zones + 21 external zones
      parameters zones = 1475
      
      ; set the assignment parameters -- maximum number of iterations to 300
      @token_maxiters@ 
      
      ; set the assignment parameters -- closure criteria (tighten up as runtime allows)
      @token_relativegap@ 
      
      ; set the assignment parameters -- other closure criteria (do not use)
      parameters gap = 0, aad = 0, raad = 0, rmse = 0
    
      ; set the number of hours in the assignment (see the loop tokens)
      @token_capfac@ 
    
      ; hwyParam.bock contains variables used in the remainder of the script, particularly in the generalized cost expressions
      read file = ctramp\scripts\block\hwyparam.block
      
      ; read in the speed/capacity table
      read file = ctramp\scripts\block\SpeedCapacity_1hour.block 
      
      ; set the working variables
      phase = linkread
      
         ; distance is used in the volume/delay functions and the generalized cost function
         distance = li.DISTANCE
         
         ; facility type is used in the compuation of the volume/delay function parameter
         linkclass = li.FT
         
         ; tollclass determines whether a link is only available to value toll payers
         lw.tollclass = li.TOLLCLASS
         
         ; fixed time links (where TSIN = 1) are indifferent to congestion
         lw.ot = li.OT
         
         ; free-flow speed is used in the volume/delay functions
         lw.ffs = li.FFS
         
         ; free-flow time is a function of free-flow speed and distance and is used in the generalized cost function
         lw.fft = (distance/lw.ffs) * 60 
         
         ; TSIN is a code, where 1 indicates the link has a fixed time and is immune to demand
         lw.tsin = li.TSIN
         
         ; link capacity is a function of the number of lanes
         lw.lanes = li.LANES
         
         ; the speed/capacity table and the computation of the volume/delay function parameter (see FreeFlowSpeed.block) uses the capacity class code
         ; which is area type * 10 + facility type
         lw.capclass = li.CAPCLASS
         
         ; set the input time to OT for fixed time links
         if (lw.tsin = 1)
            t0 = lw.ot
         endif
      
	     ; the setting of critical speeds and computation of the volume/delay function parameter is in the FreeFlowSpeed.block file
	     read file = ctramp\scripts\block\FreeFlowSpeed.block
	 
	     ; compute the generalized cost for passenger vehicles
         lw.gencost_da = lw.fft + (0.6/vot) * (lw.dist*li.autoopc + li.TOLL@token_period@_DA)
         lw.gencost_s2 = lw.fft + (0.6/vot) * (lw.dist*li.autoopc + li.TOLL@token_period@_S2 / sr2costshare)  + @token_hov_xfer_pen@
         lw.gencost_s3 = lw.fft + (0.6/vot) * (lw.dist*li.autoopc + li.TOLL@token_period@_S3 / sr3costshare)  + @token_hov_xfer_pen@
         
         ; compute the generalized cost for very small, small, and medium trucks (use small truck costs) and large trucks
         lw.gencost_sml = lw.fft + (0.6/truckvot) * (lw.dist*li.smtropc + li.TOLL@token_period@_SML)
         lw.gencost_lrg = lw.fft + (0.6/truckvot) * (lw.dist*li.lrtropc + li.TOLL@token_period@_LRG)
         
         ; create the link exclusion classes -- HOV only (23), HOV 3+ only (3), no large trucks (4)                
         if (li.USE = 2,3)   addtogroup = 23 
         if (li.USE = 3)     addtogroup = 3              
         if (li.USE = 2,3,4) addtogroup = 4                            
         
         ; create the link exclusion classes -- value toll links for passenger vehicles
         if (lw.tollclass >= firstvalue && li.TOLL@token_period@_DA > 0) addtogroup = 11
         if (lw.tollclass >= firstvalue && li.TOLL@token_period@_S2 > 0) addtogroup = 12
         if (lw.tollclass >= firstvalue && li.TOLL@token_period@_S3 > 0) addtogroup = 13
         
         ; create the link exclusion classes -- value toll links for commercial vehicles (use SML for very small, small, and medium)
         if (lw.tollclass >= firstvalue && li.TOLL@token_period@_SML > 0) addtogroup = 14
         if (lw.tollclass >= firstvalue && li.TOLL@token_period@_LRG > 0) addtogroup = 15
    
      endphase
  
      ; set the pathload parameters
      phase = iloop
      
         ; no value toll paying classes firsth
  	  
         ; drive alone
         pathload path = lw.gencost_da, excludegrp = 11, 23, vol[1] = mi.1.da_inc1
         pathload path = lw.gencost_s3, excludegrp = 11, 23, vol[2] = mi.1.da_inc2
         pathload path = lw.gencost_s3, excludegrp = 11, 23, vol[3] = mi.1.da_inc3
         pathload path = lw.gencost_s3, excludegrp = 11, 23, vol[4] = mi.1.da_inc4

         ; shared ride 2
         pathload path = lw.gencost_s2, excludegrp = 12, 3, vol[5] =  mi.1.sr_inc1 / 2
         pathload path = lw.gencost_s2, excludegrp = 12, 3, vol[6] =  mi.1.sr_inc2 / 2
         pathload path = lw.gencost_s2, excludegrp = 12, 3, vol[7] =  mi.1.sr_inc3 / 2
         pathload path = lw.gencost_s2, excludegrp = 12, 3, vol[8] =  mi.1.sr_inc4 / 2

      endphase
      ; set adjust parameters (volume delay functions)
      phase = adjust
 
         function v = vol[1] + vol[2] + vol[3] + vol[4] + vol[5] + vol[6] + vol[7] + vol[8]
           
         ; the volume delay functions are housed in the SpeedFlowCurve.block file
         read file = ctramp\scripts\block\SpeedFlowCurve.block 
      
         ; set the generalized cost functions (same as before, only now we start with "time")
         lw.gencost_da = time + (0.6/vot) * (lw.dist*li.autoopc + li.TOLL@token_period@_DA)
         lw.gencost_s2 = time + (0.6/vot) * (lw.dist*li.autoopc + li.TOLL@token_period@_S2 / sr2costshare)  + @token_hov_xfer_pen@
         lw.gencost_s3 = time + (0.6/vot) * (lw.dist*li.autoopc + li.TOLL@token_period@_S3 / sr3costshare) + @token_hov_xfer_pen@
         
         lw.gencost_sml = time + (0.6/truckvot) * (lw.dist*li.smtropc + li.TOLL@token_period@_SML)
         lw.gencost_lrg = time + (0.6/truckvot) * (lw.dist*li.smtropc + li.TOLL@token_period@_LRG)
         
      endphase
      
   endrun      
  
   EndDistributeMultistep
  
endloop ; time period loop

Wait4Files files = CTRAMP2.script.end,
          PrintFiles = merge, DelDistribFiles = t, CheckReturnCode = t
