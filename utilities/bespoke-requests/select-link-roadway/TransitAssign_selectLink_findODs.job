; TransitAssign_selectLink_findODs.job - compare to TransitAssign.job

token_model_dir = '%MODEL_DIR%'
token_link = '%SELECT_LINK%'
token_link2 = replacestr('%SELECT_LINK%','-','_',1)

; time period loop
loop period = 1, 5

   ; initialize counter to so that no more than 18 tasks are created
   counter = 0
   
   ; set a list of origins to trace (comma-separated)
   token_debug_origin_list = '240'
        
   ; set a list of destinations to trace (comma-separated)
   token_debug_destination_list = '22'

   if (period = 1)   
      token_period   = 'ea'
      
   elseif (period = 2)   
      token_period   = 'am'
      
   elseif (period = 3)   
      token_period   = 'md'
      
   elseif (period = 4)   
      token_period   = 'pm'
      
   elseif (period = 5)   
      token_period   = 'ev' 
      
   endif 

   ; access/egress loop (walk/walk, auto/walk, walk/auto)
   loop accegg = 1,3
   
      if (accegg = 1)         
         token_access = 'wlk'
         token_egress = 'wlk'      
         token_boardpen = 'factor boardpen = 0, 20, 45, 50, 60'
      elseif (accegg = 2)        
         token_access = 'drv'
         token_egress = 'wlk'    
         token_boardpen = 'factor boardpen = 0, 30, 45, 50, 60'
      elseif (accegg = 3)       
         token_access = 'wlk'
         token_egress = 'drv'       
         token_boardpen = 'factor boardpen = 0, 30, 45, 50, 60'
      endif
   
      ; line haul loop
      loop path = 1, 5
      
         ; commuter rail or long-haul premium
         if (path = 1)         

            ; drive access/egress links to this mode (';' means no)
            ; allow higher-class PNRs to be read in case of shared lots
            token_drivelinks_express_bus   = ';'
            token_drivelinks_light_rail    = ';'
            token_drivelinks_ferry         = ';'
            token_drivelinks_heavy_rail    = ';'
            token_drivelinks_commuter_rail = ' '  
               
            ; no KNR access links to local bus
            token_bus_acclinks_KNR = ';'
            
            ; no transit modes are excluded from this path
            token_skipmodes = '; do not skip any modes for this path'
            
            ; mode-specific perceived time factors
            ;                           support  loc bus  exp bus   ferry  lt rail  hvy rail  com rail
            token_modefac = 'modefac   =  9*2.0,  70*1.5,  20*1.2, 10*1.1,  10*1.1,   10*1.1,   10*1.0' 
            
            ; three-letter path name
            token_path = 'com'

         ; heavy rail or medium-haul premium
         elseif (path = 2)

            ; drive access/egress links to this mode (';' means no)
            ; allow higher-class PNRs to be read in case of shared lots
            token_drivelinks_express_bus   = ';'
            token_drivelinks_light_rail    = ';'
            token_drivelinks_ferry         = ';'
            token_drivelinks_heavy_rail    = ' '
            token_drivelinks_commuter_rail = ' ' 
            
            ; no KNR access links to local bus
            token_bus_acclinks_KNR = ';'
            
            ; commuter rail excluded from this path
            token_skipmodes = 'skipmodes =  130-139'
            
            ; mode-specific perceived time factors
            ;                           support  loc bus  exp bus   ferry  lt rail  hvy rail  com rail
            token_modefac = 'modefac   =  9*2.0,  70*1.5,  20*1.2, 10*1.1,  10*1.1,   10*1.0,   10*1.5'
            
            ; three-letter path name
            token_path = 'hvy'

         ; express bus or medium-haul basic
         elseif (path = 3)

            ; drive access/egress links to this mode (';' means no)
            ; allow higher-class PNRs to be read in case of shared lots
            token_drivelinks_express_bus   = ' '
            token_drivelinks_light_rail    = ';'
            token_drivelinks_ferry         = ';'
            token_drivelinks_heavy_rail    = ' '
            token_drivelinks_commuter_rail = ' ' 
            
            ; KNR access links to local bus
            token_bus_acclinks_KNR = ';'
            
            ; commuter rail and heavy rail excluded from this path
            token_skipmodes = 'skipmodes =  130-139,120-139'
            
            ; mode-specific perceived time factors
            ;                        support  loc bus  exp bus   ferry  lt rail  hvy rail  com rail
            token_modefac = 'modefac = 9*2.0,  70*1.5,  20*1.0, 10*1.5,  10*1.5,   10*1.5,   10*1.5'
            
            ; three-letter path name
            token_path = 'exp'


         ; light rail (or ferry) or short-haul premium
         elseif (path = 4)

            ; drive access/egress links to this mode (';' means no)
            ; allow higher-class PNRs to be read in case of shared lots
            token_drivelinks_express_bus   = ' '
            token_drivelinks_light_rail    = ' '
            token_drivelinks_ferry         = ' '
            token_drivelinks_heavy_rail    = ' '
            token_drivelinks_commuter_rail = ' ' 
            
            ; no KNR access links to local bus
            token_bus_acclinks_KNR = ';'
            
            ; commuter rail, heavy rail, and express bus excluded from this path
            token_skipmodes = 'skipmodes =  130-139,120-139,80-99'
            
            ; mode-specific perceived time factors
            ;                           support  loc bus  exp bus   ferry  lt rail  hvy rail  com rail
            token_modefac = 'modefac =    9*2.0,  70*1.5,  20*1.5, 10*1.0,  10*1.0,   10*1.5,   10*1.5'  
            
            ; three-letter path name
            token_path = 'lrf'

         ; local bus or short-haul basic
         elseif (path = 5)
         
            ; drive access/egress links to this mode (';' means no)
            ; allow higher-class PNRs to be read in case of shared lots
            token_drivelinks_express_bus   = ' '
            token_drivelinks_light_rail    = ' '
            token_drivelinks_ferry         = ' '
            token_drivelinks_heavy_rail    = ' '
            token_drivelinks_commuter_rail = ' ' 
            
            ; KNR access links to local bus
            token_bus_acclinks_KNR = ' '
            
            ; commuter rail, heavy rail, express bus, light rail, and ferry excluded from this path
            token_skipmodes = 'skipmodes =  130-139,120-139,80-99,100-119'
            
            ; mode-specific perceived time factors
            ;                           support  loc bus  exp bus   ferry  lt rail  hvy rail  com rail
            token_modefac = 'modefac  =   9*2.0,  70*1.0,  20*1.5, 10*1.5,  10*1.5,   10*1.5,   10*1.5'  
            
            ; three-letter path name
            token_path = 'loc'

         
         endif

         ; increment the counter used to identify the process number 
         counter = counter + 1
         
         ; distribute the tasks
         DistributeMultistep processid = "ctramp", processnum = @counter@,  commpath = '%COMMPATH%' 

         run pgm = trnbuild
             
             ; use the highway network with the computed bus times 
             filei neti = @token_period@_transit_background.net
             
             ; read in the 23-table matrix created by prepAssign.job (see header for content details)
             filei mati = "@token_model_dir@\main\trips@token_period@.tpp"
             
             ; path parameter: do not list (write out) all of the subsequent input
             parameters listinput = no

             ; read in the fare matrices
             read file = "@token_model_dir@\trn\transit_faremat.block"
             read file = "@token_model_dir@\trn\farelinks.far"
             read file = "@token_model_dir@\trn\xfare.far"
        
             ; output the link volumes          
             fileo linko = trnlink@token_period@_@token_access@_@token_path@_@token_egress@_@token_link2@.dbf
             fileo linkvolo = trnlink@token_period@_@token_access@_@token_path@_@token_egress@_@token_link2@.csv, format = csv

             ; output the line volumes
             fileo linevolo = trnline@token_period@_@token_access@_@token_path@_@token_egress@_@token_link2@.csv,
                                      id = @token_period@_@token_access@_@token_path@_@token_egress@, format = csv

            ; output od matrix
            fileo mato = trnselect_@token_period@_@token_access@_@token_path@_@token_egress@_@token_link2@.tpp
     
             ; the bus times are based on those computed in the highway network
             hwytime = BUS_TIME

             
             ; read the transit line and link files
             read file = "@token_model_dir@\trn\transitLines.link"
             read file = transit@token_period@.lin        
             
             ; read in the generated support links
             read file = @token_period@_transit_suplinks_walk.dat
             
             ; read in the generated drive access/egress links for this mode             
             @token_drivelinks_express_bus@    read file = @token_period@_transit_suplinks_express_bus.dat
             @token_drivelinks_light_rail@     read file = @token_period@_transit_suplinks_light_rail.dat
             @token_drivelinks_ferry@          read file = @token_period@_transit_suplinks_ferry.dat
             @token_drivelinks_heavy_rail@     read file = @token_period@_transit_suplinks_heavy_rail.dat
             @token_drivelinks_commuter_rail@  read file = @token_period@_transit_suplinks_commuter_rail.dat  
             
             ; read in the generated KNR links for local bus
             @token_bus_acclinks_KNR@    READ FILE = @token_period@_bus_acclinks_KNR.DAT
             
             ; set the service headways
             freqperiod = @period@
             
             ; we do not need access links built
             zoneaccess generate = no
             
             ; path parameter: 0 - best path by mode; 1 - single best path
             parameters pathstyle = 0
             
             ; path parameter: we want to build paths
             parameters buildpaths = t   
             
             ; path parameter: assumed walking speed is 3.0 miles per hour
             parameters walkspeed = 3.0
             
             
             ; path parameter: we do not use the route time coded in the line files; bus times are a function of highway times
             parameters useruntime = n        
             
             ; path parameter: the maximum path time for a single route is 3 hours or 180 minutes
             parameters maxruntime = 180
             
             ; path parameter: the maximum perceived path time for a single route is 5 hours or 300 minutes
             parameters maxpathtime = 300
             
             ; perceived time factors: first boarding is free; second, third, and fourth boarding adds fiftenn perceived minutes; 
             ; discourage more than four transfers with a 60 minute penalty
             @token_boardpen@

             ; perceived time factors: initial wait time is equivalent to 2.8 minutes of ride time for modes 10 through 255  
             factor iwaitfac = 9*0, 130*2.8
             
             ; perceived time factors: transfer wait time is equivalent to 2.8 minutes of ride time for modes 1 through 255
             factor xwaitfac = 139*2.8             
             
             ; use token_skipmodes to remove modes from the network per the hierarchy
             @token_skipmodes@
              
             ; perceived time factors: slow down non-key modes by 50 percent; walk and drive by 100 percent; use token_modefac
             @token_modefac@
                                        
             ; combine paths if runtimes differ by less than 5 minutes
             read file = "@token_model_dir@\ctramp\scripts\block\transit_combined_headways.block"
             
             ; read in the transfer prohibitors file
             read file = "@token_model_dir@\ctramp\scripts\block\transferprohibitors_@token_access@_trn_@token_egress@.block"
                                                
             ; specify the table to assign from the demand matrix
             trips matrix = mi.1.@token_access@_@token_path@_@token_egress@,  assign = true, OLINKS=@token_link@

             ; output OD matrix
             matrices name = ivt, mw[1] = time(1001)
             
             ; specify which paths to trace
             trace = (i = @token_debug_origin_list@ && j = @token_debug_destination_list@)
            
         endrun
         
         enddistributemultistep
         
      endloop ; line haul loop
      
   endloop ; access/egress mode loop
   
   wait4files files = ctramp1.script.end, 
   	              ctramp2.script.end, 
   	              ctramp3.script.end, 
   	              ctramp4.script.end, 
   	              ctramp5.script.end, 
   	              ctramp6.script.end, 
   	              ctramp7.script.end, 
   	              ctramp8.script.end, 
   	              ctramp9.script.end, 
   	              ctramp10.script.end, 
   	              ctramp11.script.end, 
   	              ctramp12.script.end, 
   	              ctramp13.script.end, 
   	              ctramp14.script.end, 
   	              ctramp15.script.end,                
           printfiles = save, DelDistribFiles = t, CheckReturnCode = t

   ; combine all access/egress/submodes
   run PGM=matrix
      filei mati[1]   ="trnselect_@token_period@_wlk_com_wlk_@token_link2@.tpp"
      filei mati[2]   ="trnselect_@token_period@_wlk_hvy_wlk_@token_link2@.tpp"
      filei mati[3]   ="trnselect_@token_period@_wlk_exp_wlk_@token_link2@.tpp"
      filei mati[4]   ="trnselect_@token_period@_wlk_lrf_wlk_@token_link2@.tpp"
      filei mati[5]   ="trnselect_@token_period@_wlk_loc_wlk_@token_link2@.tpp"

      filei mati[6]   ="trnselect_@token_period@_drv_com_wlk_@token_link2@.tpp"
      filei mati[7]   ="trnselect_@token_period@_drv_hvy_wlk_@token_link2@.tpp"
      filei mati[8]   ="trnselect_@token_period@_drv_exp_wlk_@token_link2@.tpp"
      filei mati[9]   ="trnselect_@token_period@_drv_lrf_wlk_@token_link2@.tpp"
      filei mati[10]  ="trnselect_@token_period@_drv_loc_wlk_@token_link2@.tpp"

      filei mati[11]  ="trnselect_@token_period@_wlk_com_drv_@token_link2@.tpp"
      filei mati[12]  ="trnselect_@token_period@_wlk_hvy_drv_@token_link2@.tpp"
      filei mati[13]  ="trnselect_@token_period@_wlk_exp_drv_@token_link2@.tpp"
      filei mati[14]  ="trnselect_@token_period@_wlk_lrf_drv_@token_link2@.tpp"
      filei mati[15]  ="trnselect_@token_period@_wlk_loc_drv_@token_link2@.tpp"

      fileo mato[1]   ="trnselect_@token_period@_@token_link2@_noheader.csv", FORMAT=txt, PATTERN=IJM:V, MO=1-16, DELIMITER=',', MAXFIELDS=16
      fileo mato[2]   ="trnselect_@token_period@_@token_link2@.tpp", mo=1-16

      mw[1] = 2

      mw[2] = mi.1.1
      mw[3] = mi.2.1
      mw[4] = mi.3.1
      mw[5] = mi.4.1
      mw[6] = mi.5.1

      mw[7] = mi.6.1
      mw[8] = mi.7.1
      mw[9] = mi.8.1
      mw[10] = mi.9.1
      mw[11]= mi.10.1

      mw[12] = mi.11.1
      mw[13] = mi.12.1
      mw[14] = mi.13.1
      mw[15] = mi.14.1
      mw[16] = mi.15.1
   endrun

   ; add header
   *echo OTAZ,DTAZ,one,two,wlk_com_wlk,wlk_hvy_wlk,wlk_exp_wlk,wlk_lrf_wlk,wlk_loc_wlk,drv_com_wlk,drv_hvy_wlk,drv_exp_wlk,drv_lrf_wlk,drv_loc_wlk,wlk_com_drv,wlk_hvy_drv,wlk_exp_drv,wlk_lrf_drv,wlk_loc_drv > "trnselect_@token_period@_@token_link2@.csv"
   *type "trnselect_@token_period@_@token_link2@_noheader.csv" >> "trnselect_@token_period@_@token_link2@.csv"
   *del "trnselect_@token_period@_@token_link2@_noheader.csv"

endloop ; time of day
