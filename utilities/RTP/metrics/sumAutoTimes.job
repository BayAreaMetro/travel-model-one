*del metrics\auto_times.csv

; Create auto summary based on trips per day by income quartile and mode of:
; - Average travel time in minutes
; - Average travel distance in miles
; - Average travel cost (auto operating cost, including pavement costs and
;   NOT including BRIDGE OR VALUE TOLLS)
; - Total bridge tolls paid
; - Total value tolls paid
;   by mode and income quartile
;   in year 2000 cents
;

; find no access zones
RUN PGM=MATRIX
  FILEI MATI[1]   = "skims\HWYSKMAM.tpp"
  FILEO RECO[1]   = "skims\unconnected_zones.dbf", FIELDS=ZONE(5.0), UNCONNECTED(3.0)

  MW[1] = MI.1.DISTDA
  IF (ROWMIN(1) == 500000)
    RO.ZONE = I
    RO.UNCONNECTED = 1
    WRITE RECO=1
  ENDIF
ENDRUN

; Convert to has access matrix -- all ones if has access
RUN PGM=MATRIX
  FILEI ZDATI[1] = "skims\unconnected_zones.dbf"
  FILEO MATO[1]  = "skims\connected_zones.tpp", MO=1, NAME=CONNECTED
  ZONES=1475

  MW[1] = 1
  IF (ZI.1.UNCONNECTED=1) MW[1] = 0
ENDRUN


; Loop thru Auto modes
loop auto = 1,15

  if (auto  = 1)
   token_auto   = 'da'
   token_time   = 'TIMEDA'
   token_dist   = 'DISTDA'
   token_btoll  = 'BTOLLDA'
   token_vtoll  = 'TOLLVTOLLDA'
  elseif (auto  = 2)
   token_auto   = 'datoll'
   token_time   = 'TOLLTIMEDA'
   token_dist   = 'TOLLDISTDA'
   token_btoll  = 'TOLLBTOLLDA'
   token_vtoll  = 'TOLLVTOLLDA'
  elseif (auto  = 3)
   token_auto   = 'sr2'
   token_time   = 'TIMES2'
   token_dist   = 'DISTS2'
   token_btoll  = 'BTOLLS2'
   token_vtoll  = 'TOLLVTOLLS2'
  elseif (auto  = 4)
   token_auto   = 'sr2toll'
   token_time   = 'TOLLTIMES2'
   token_dist   = 'TOLLDISTS2'
   token_btoll  = 'TOLLBTOLLS2'
   token_vtoll  = 'TOLLVTOLLS2'
  elseif (auto  = 5)
   token_auto   = 'sr3'
   token_time   = 'TIMES3'
   token_dist   = 'DISTS3'
   token_btoll  = 'BTOLLS3'
   token_vtoll  = 'TOLLVTOLLS3'
  elseif (auto  = 6)
   token_auto   = 'sr3toll'
   token_time   = 'TOLLTIMES3'
   token_dist   = 'TOLLDISTS3'
   token_btoll  = 'TOLLBTOLLS3'
   token_vtoll  = 'TOLLVTOLLS3'
  elseif (auto  = 7)
   token_auto   = 'taxi'
   token_time   = 'TOLLTIMEs2'
   token_dist   = 'TOLLDISTS2'
   token_btoll  = 'TOLLBTOLLS2'
   token_vtoll  = 'TOLLVTOLLS2'
  elseif (auto  = 8)
   token_auto   = 'tnc_single'
   token_time   = 'TOLLTIMES2'
   token_dist   = 'TOLLDISTS2'
   token_btoll  = 'TOLLBTOLLS2'
   token_vtoll  = 'TOLLVTOLLS2'
  elseif (auto  = 9)
   token_auto   = 'tnc_shared'
   token_time   = 'TOLLTIMES3'
   token_dist   = 'TOLLDISTS3'
   token_btoll  = 'TOLLBTOLLS3'
   token_vtoll  = 'TOLLVTOLLS3'
  elseif (auto  = 10)
   token_auto   = 'da_av_notoll'
   token_time   = 'TIMEDA'
   token_dist   = 'DISTDA'
   token_btoll  = 'BTOLLDA'
   token_vtoll  = 'TOLLVTOLLDA'
  elseif (auto  = 11)
   token_auto   = 'da_av_toll'
   token_time   = 'TOLLTIMEDA'
   token_dist   = 'TOLLDISTDA'
   token_btoll  = 'TOLLBTOLLDA'
   token_vtoll  = 'TOLLVTOLLDA'
  elseif (auto  = 12)
   token_auto   = 's2_av_notoll'
   token_time   = 'TIMES2'
   token_dist   = 'DISTS2'
   token_btoll  = 'BTOLLS2'
   token_vtoll  = 'TOLLVTOLLS2'
  elseif (auto  = 13)
   token_auto   = 's2_av_toll'
   token_time   = 'TOLLTIMES2'
   token_dist   = 'TOLLDISTS2'
   token_btoll  = 'TOLLBTOLLS2'
   token_vtoll  = 'TOLLVTOLLS2'
  elseif (auto  = 14)
   token_auto   = 's3_av_notoll'
   token_time   = 'TIMES3'
   token_dist   = 'DISTS3'
   token_btoll  = 'BTOLLS3'
   token_vtoll  = 'TOLLVTOLLS3'
  elseif (auto  = 15)
   token_auto   = 's3_av_toll'
   token_time   = 'TOLLTIMES3'
   token_dist   = 'TOLLDISTS3'
   token_btoll  = 'TOLLBTOLLS3'
   token_vtoll  = 'TOLLVTOLLS3'
  endif

  DistributeMultistep processid = 'ctramp', processNum = auto, commpath = '%COMMPATH%'

    ; Read toll discounts from the block file
    Read File = "CTRAMP\scripts\block\hwyParam.block"

    ; Loop thru time periods
    loop inc = 1,4
    if (inc = 1)  token_inc   = 'inc1'
    if (inc = 2)  token_inc   = 'inc2'
    if (inc = 3)  token_inc   = 'inc3'
    if (inc = 4)  token_inc   = 'inc4'

    vtoll_factor = 1.0
    if (inc = 1)  vtoll_factor = Means_Based_Tolling_Q1Factor
    if (inc = 2)  vtoll_factor = Means_Based_Tolling_Q2Factor

  RUN PGM = MATRIX

  ; Read person trips for an income quartile for all time periods
     FILEI MATI[1] = "main\tripsEA_no_zpv_@token_inc@.tpp"
     FILEI MATI[2] = "main\tripsAM_no_zpv_@token_inc@.tpp"
     FILEI MATI[3] = "main\tripsMD_no_zpv_@token_inc@.tpp"
     FILEI MATI[4] = "main\tripsPM_no_zpv_@token_inc@.tpp"
     FILEI MATI[5] = "main\tripsEV_no_zpv_@token_inc@.tpp"

  ; Read Highway Skims
     FILEI MATI[6] = "skims\HWYSKMEA.tpp"
     FILEI MATI[7] = "skims\HWYSKMAM.tpp"
     FILEI MATI[8] = "skims\HWYSKMMD.tpp"
     FILEI MATI[9] = "skims\HWYSKMPM.tpp"
     FILEI MATI[10]= "skims\HWYSKMEV.tpp"

     FILEI LOOKUPI[1] = taxi_tnc_occ_factors.csv

     ; Specify output file
     FILEO PRINTO[1] = "metrics\auto_times_@token_auto@.csv",APPEND=T

    ; load lookup values for factoring taxi and TNC modes
    lookup lookupi=1, LIST=y, name=occ_factors,
      lookup[1]=1, result=2,      ; (occ,taxi)
      lookup[2]=1, result=3,      ; (occ,single_tnc)
      lookup[3]=1, result=4       ; (occ,shared_tnc)

    IF (I=1)
      IF (@auto@==1 || @auto@==2 || @auto@==10 || @auto@==11)
        _occupancy = 1.0
      ELSEIF (@auto@==3 || @auto@==4 || @auto@==12 || @auto@==13)
        _occupancy = 2.0
      ELSEIF (@auto@==5 || @auto@==6 || @auto@==14 || @auto@==15)
        _occupancy = 3.5

      ; calculate the average occupancy
      ; the multiplication factors for s3 is calculated based on MTC's TNC pilot survey conducted in Oct/Nov 2018
      ; the spreadsheet is here: M:\Application\Model One\Mock Futures\TNC occupancy\tnc occupancy.xlsx
      ELSEIF (@auto@==7)
       ; taxi
       _occupancy = occ_factors(1, 1)*1 + occ_factors(1, 2)*2 + occ_factors(1, 3)*3.60
      ELSEIF (@auto@==8)
       ; tnc single
       _occupancy = occ_factors(2, 1)*1 + occ_factors(2, 2)*2 + occ_factors(2, 3)*3.60
      ELSEIF (@auto@==9)
       ; tnc shared
       _occupancy = occ_factors(3, 1)*1 + occ_factors(3, 2)*2 + occ_factors(3, 3)*3.83
      ENDIF
    ENDIF


     ; Trips EA * Skims EA
      MW[1]   =  mi.1.@token_auto@ * mi.6.@token_time@               ; Person minutes
      MW[2]   = (mi.1.@token_auto@ * mi.6.@token_time@)/_occupancy  ; Vehicle minutes
      MW[3]   =  mi.1.@token_auto@ * mi.6.@token_dist@               ; Person miles
      MW[4]   = (mi.1.@token_auto@ * mi.6.@token_dist@)/_occupancy  ; Vehicle miles
      MW[5]   = (mi.1.@token_auto@/_occupancy) * (mi.6.@token_dist@ * @AUTOOPC@) ; not including tolls
      MW[6]   = (mi.1.@token_auto@/_occupancy) *  mi.6.@token_btoll@             ; Bridge tolls
      MW[7]   = (mi.1.@token_auto@/_occupancy) *  mi.6.@token_vtoll@ * @vtoll_factor@            ; Value tolls

     ; Trips AM * Skims AM
      MW[8]   =  mi.2.@token_auto@ * mi.7.@token_time@               ; Person minutes
      MW[9]   = (mi.2.@token_auto@ * mi.7.@token_time@)/_occupancy  ; Vehicle minutes
      MW[10]  =  mi.2.@token_auto@ * mi.7.@token_dist@               ; Person miles
      MW[11]  = (mi.2.@token_auto@ * mi.7.@token_dist@)/_occupancy  ; Vehilce miles
      MW[12]  = (mi.2.@token_auto@/_occupancy) * (mi.7.@token_dist@ * @AUTOOPC@) ; not including tolls
      MW[13]  = (mi.2.@token_auto@/_occupancy) *  mi.7.@token_btoll@             ; Bridge tolls
      MW[14]  = (mi.2.@token_auto@/_occupancy) *  mi.7.@token_vtoll@ * @vtoll_factor@             ; Value tolls

      ; Trips MD * Skims MD
      MW[15]  =  mi.3.@token_auto@ * mi.8.@token_time@               ; Person minutes
      MW[16]  = (mi.3.@token_auto@ * mi.8.@token_time@)/_occupancy  ; Vehicle minutes
      MW[17]  =  mi.3.@token_auto@ * mi.8.@token_dist@               ; Person miles
      MW[18]  = (mi.3.@token_auto@ * mi.8.@token_dist@)/_occupancy  ; Vehicle miles
      MW[19]  = (mi.3.@token_auto@/_occupancy) * (mi.8.@token_dist@ * @AUTOOPC@) ; not including tolls
      MW[20]  = (mi.3.@token_auto@/_occupancy) *  mi.8.@token_btoll@             ; Bridge tolls
      MW[21]  = (mi.3.@token_auto@/_occupancy) *  mi.8.@token_vtoll@ * @vtoll_factor@            ; Value tolls

      ; Trips PM * Skims PM
      MW[22]   =  mi.4.@token_auto@ * mi.9.@token_time@                ; Person minutes
      MW[23]   = (mi.4.@token_auto@ * mi.9.@token_time@)/_occupancy   ; Vehicle minutes
      MW[24]   =  mi.4.@token_auto@ * mi.9.@token_dist@                ; Person miles
      MW[25]   = (mi.4.@token_auto@ * mi.9.@token_dist@)/_occupancy   ; Vehicle miles
      MW[26]   = (mi.4.@token_auto@/_occupancy) * (mi.9.@token_dist@ * @AUTOOPC@) ; not including tolls
      MW[27]   = (mi.4.@token_auto@/_occupancy) *  mi.9.@token_btoll@             ; Bridge tolls
      MW[28]   = (mi.4.@token_auto@/_occupancy) *  mi.9.@token_vtoll@ * @vtoll_factor@            ; Value tolls

      ; Trips EV * Skims EV
      MW[29]   =  mi.5.@token_auto@ * mi.10.@token_time@               ; Person minutes
      MW[30]   = (mi.5.@token_auto@ * mi.10.@token_time@)/_occupancy  ; Vehicle minutes
      MW[31]   =  mi.5.@token_auto@ * mi.10.@token_dist@               ; Person miles
      MW[32]   = (mi.5.@token_auto@ * mi.10.@token_dist@)/_occupancy  ; Vehicle miles
      MW[33]   = (mi.5.@token_auto@/_occupancy) * (mi.10.@token_dist@ * @AUTOOPC@) ; not including tolls
      MW[34]   = (mi.5.@token_auto@/_occupancy) *  mi.10.@token_btoll@             ; Bridge tolls
      MW[35]   = (mi.5.@token_auto@/_occupancy) *  mi.10.@token_vtoll@ * @vtoll_factor@            ; Value tolls

     ; Compute Daily Person Trips, Daily Vehicle Trips, PersonTime, VehicleTime, PersonMiles, VehicleMiles, TotalCost, Bridge Tolls, Value Tolls
     MW[36] =  mi.1.@token_auto@ + mi.2.@token_auto@ + mi.3.@token_auto@ + mi.4.@token_auto@ +mi.5.@token_auto@
     MW[37] = (mi.1.@token_auto@ + mi.2.@token_auto@ + mi.3.@token_auto@ + mi.4.@token_auto@ +mi.5.@token_auto@)/_occupancy
     MW[38] = MW[1] + MW[8]  + MW[15] + MW[22] + MW[29]   ; Person minutes
     MW[39] = MW[2] + MW[9]  + MW[16] + MW[23] + MW[30]   ; Vehicle minutes
     MW[40] = MW[3] + MW[10] + MW[17] + MW[24] + MW[31]   ; Person miles
     MW[41] = MW[4] + MW[11] + MW[18] + MW[25] + MW[32]   ; Vehicle miles
     MW[42] = MW[5] + MW[12] + MW[19] + MW[26] + MW[33]   ; Trip Cost
     MW[43] = MW[6] + MW[13] + MW[20] + MW[27] + MW[34]   ; Bridge Tolls
     MW[44] = MW[7] + MW[14] + MW[21] + MW[28] + MW[35]   ; Value Tolls

     ; count value tolls for toll options, including taxi and tnc
     IF (@auto@==2 || @auto@==4 || @auto@==6 || @auto@==7 || @auto@==8 || @auto@==9 || @auto@==11 || @auto@==13 || @auto@==15)
       ; count non-zero paths in the AM
       MW[45] = mi.7.@token_vtoll@
       MW[46] = mi.8.@token_vtoll@
       _vtoll_am_nonzero = _vtoll_am_nonzero  + ROWCNT(45)
       _vtoll_md_nonzero = _vtoll_md_nonzero  + ROWCNT(46)

       ; only for tolls
       Value_tolls       = Value_tolls        + ROWSUM(44)
     else
       _vtoll_am_nonzero = 0
       _vtoll_md_nonzero = 0
       Value_tolls       = 0
     ENDIF

      Person_trips  = Person_trips  + ROWSUM(36)
      Vehicle_trips = Vehicle_trips + ROWSUM(37)
      Person_min    = Person_min    + ROWSUM(38)
      Vehicle_min   = Vehicle_min   + ROWSUM(39)
      Person_miles  = Person_miles  + ROWSUM(40)
      Vehicle_miles = Vehicle_miles + ROWSUM(41)
      Total_cost    = Total_cost    + ROWSUM(42)
      Bridge_tolls  = Bridge_tolls  + ROWSUM(43)

      Mode   = '@token_auto@'
      Income = '@token_inc@'

      if(I = 1 & @inc@=1 & @auto@ = 1) PRINT PRINTO=1 LIST="Income,Mode,Daily Person Trips,Daily Vehicle Trips,Person Minutes,Vehicle Minutes,Person Miles,Vehicle Miles,Total Cost,VTOLL nonzero AM,VTOLL nonzero MD,Bridge Tolls,Value Tolls"
      if(I = ZONES) PRINT PRINTO=1 CSV=T LIST= Income, Mode, Person_trips(10.2L), Vehicle_trips(10.2L),
                                                            Person_min(10.2L),   Vehicle_min(10.2L),
                                                            Person_miles(10.2L), Vehicle_miles(10.2L),
                                                            Total_cost(10.2L),
                                                            _vtoll_am_nonzero(10L), _vtoll_md_nonzero(10L),
                                                            Bridge_tolls(10.2L), Value_tolls(10.2L)
    ENDRUN

    ; owned zpv by income
    IF (auto=10) ; da_av_notoll
      RUN PGM = MATRIX
        ; Read person trips for an income quartile for all time periods
        FILEI MATI[1] = "main\tripsEA_zpv_@token_inc@.tpp"
        FILEI MATI[2] = "main\tripsAM_zpv_@token_inc@.tpp"
        FILEI MATI[3] = "main\tripsMD_zpv_@token_inc@.tpp"
        FILEI MATI[4] = "main\tripsPM_zpv_@token_inc@.tpp"
        FILEI MATI[5] = "main\tripsEV_zpv_@token_inc@.tpp"

        ; Read Highway Skims
        FILEI MATI[6] = "skims\HWYSKMEA.tpp"
        FILEI MATI[7] = "skims\HWYSKMAM.tpp"
        FILEI MATI[8] = "skims\HWYSKMMD.tpp"
        FILEI MATI[9] = "skims\HWYSKMPM.tpp"
        FILEI MATI[10]= "skims\HWYSKMEV.tpp"

        ; Specify output file
        FILEO PRINTO[1] = "metrics\auto_times_zpv_av.csv",APPEND=T

        ; Trips EA * Skims EA
        MW[ 1] =  0                                             ; Person minutes
        MW[ 2] =  mi.1.zpv_av * mi.6.@token_time@               ; Vehicle minutes
        MW[ 3] =  0                                             ; Person miles
        MW[ 4] =  mi.1.zpv_av * mi.6.@token_dist@               ; Vehicle miles
        MW[ 5] =  mi.1.zpv_av * (mi.6.@token_dist@ * @AUTOOPC@) ; not including tolls
        MW[ 6] =  mi.1.zpv_av *  mi.6.@token_btoll@             ; Bridge tolls
        MW[ 7] =  mi.1.zpv_av *  mi.6.@token_vtoll@             ; Value tolls

        ; Trips AM * Skims AM
        MW[ 8]   =  0                                             ; Person minutes
        MW[ 9]   =  mi.2.zpv_av * mi.7.@token_time@               ; Vehicle minutes
        MW[10]   =  0                                             ; Person miles
        MW[11]   =  mi.2.zpv_av * mi.7.@token_dist@               ; Vehicle miles
        MW[12]   =  mi.2.zpv_av * (mi.7.@token_dist@ * @AUTOOPC@) ; not including tolls
        MW[13]   =  mi.2.zpv_av *  mi.7.@token_btoll@             ; Bridge tolls
        MW[14]   =  mi.2.zpv_av *  mi.7.@token_vtoll@             ; Value tolls

        ; Trips MD * Skims MD
        MW[15]   =  0                                             ; Person minutes
        MW[16]   =  mi.3.zpv_av * mi.8.@token_time@               ; Vehicle minutes
        MW[17]   =  0                                             ; Person miles
        MW[18]   =  mi.3.zpv_av * mi.8.@token_dist@               ; Vehicle miles
        MW[19]   =  mi.3.zpv_av * (mi.8.@token_dist@ * @AUTOOPC@) ; not including tolls
        MW[20]   =  mi.3.zpv_av *  mi.8.@token_btoll@             ; Bridge tolls
        MW[21]   =  mi.3.zpv_av *  mi.8.@token_vtoll@             ; Value tolls

        ; Trips PM * Skims PM
        MW[22]   =  0                                             ; Person minutes
        MW[23]   =  mi.4.zpv_av * mi.9.@token_time@               ; Vehicle minutes
        MW[24]   =  0                                             ; Person miles
        MW[25]   =  mi.4.zpv_av * mi.9.@token_dist@               ; Vehicle miles
        MW[26]   =  mi.4.zpv_av * (mi.9.@token_dist@ * @AUTOOPC@) ; not including tolls
        MW[27]   =  mi.4.zpv_av *  mi.9.@token_btoll@             ; Bridge tolls
        MW[28]   =  mi.4.zpv_av *  mi.9.@token_vtoll@             ; Value tolls

        ; Trips EV * Skims EV
        MW[29]   =  0                                              ; Person minutes
        MW[30]   =  mi.5.zpv_av * mi.10.@token_time@               ; Vehicle minutes
        MW[31]   =  0                                              ; Person miles
        MW[32]   =  mi.5.zpv_av * mi.10.@token_dist@               ; Vehicle miles
        MW[33]   =  mi.5.zpv_av * (mi.10.@token_dist@ * @AUTOOPC@) ; not including tolls
        MW[34]   =  mi.5.zpv_av *  mi.10.@token_btoll@             ; Bridge tolls
        MW[35]   =  mi.5.zpv_av *  mi.10.@token_vtoll@             ; Value tolls

       ; Compute Daily Person Trips, Daily Vehicle Trips, PersonTime, VehicleTime, PersonMiles, VehicleMiles, TotalCost, Bridge Tolls,   Value Tolls
       MW[36] = 0                                                    ; Person Trips
       MW[37] = mi.1.zpv_av + mi.2.zpv_av + mi.3.zpv_av + mi.4.zpv_av + mi.5.zpv_av  ; Vehicle Trips
       MW[38] = MW[1] + MW[8]  + MW[15] + MW[22] + MW[29]            ; Person minutes
       MW[39] = MW[2] + MW[9]  + MW[16] + MW[23] + MW[30]            ; Vehicle minutes
       MW[40] = MW[3] + MW[10] + MW[17] + MW[24] + MW[31]            ; Person miles
       MW[41] = MW[4] + MW[11] + MW[18] + MW[25] + MW[32]            ; Vehicle miles
       MW[42] = MW[5] + MW[12] + MW[19] + MW[26] + MW[33]            ; Trip Cost
       MW[43] = MW[6] + MW[13] + MW[20] + MW[27] + MW[34]            ; Bridge Tolls
       MW[44] = MW[7] + MW[14] + MW[21] + MW[28] + MW[35]            ; Value Tolls

      Person_trips  = Person_trips  + ROWSUM(36)
      Vehicle_trips = Vehicle_trips + ROWSUM(37)
      Person_min    = Person_min    + ROWSUM(38)
      Vehicle_min   = Vehicle_min   + ROWSUM(39)
      Person_miles  = Person_miles  + ROWSUM(40)
      Vehicle_miles = Vehicle_miles + ROWSUM(41)
      Total_cost    = Total_cost    + ROWSUM(42)
      Bridge_tolls  = Bridge_tolls  + ROWSUM(43)

      ; assuming no value tolls for deadheading AV
      Value_tolls       = 0
      _vtoll_am_nonzero = 0
      _vtoll_md_nonzero = 0

      Mode   = 'owned_zpv'
      Income = '@token_inc@'

      if(I = ZONES) PRINT PRINTO=1 CSV=T LIST= Income, Mode, Person_trips(10.2L), Vehicle_trips(10.2L),
                                                            Person_min(10.2L),   Vehicle_min(10.2L),
                                                            Person_miles(10.2L), Vehicle_miles(10.2L),
                                                            Total_cost(10.2L),
                                                            _vtoll_am_nonzero(10L), _vtoll_md_nonzero(10L),
                                                            Bridge_tolls(10.2L), Value_tolls(10.2L)
      ENDRUN
    ENDIF ; IF (auto=10) ; da_av_notoll

  endloop ; income loop

  ; the next steps are only relevant to the da/sr2/sr3 and toll versions of those
  IF (auto<=6)
   RUN PGM = MATRIX
     ; Read internal/external travel demand - vehicle trips
     FILEI MATI[1] = "nonres\tripsIxEA.tpp"
     FILEI MATI[2] = "nonres\tripsIxAM.tpp"
     FILEI MATI[3] = "nonres\tripsIxMD.tpp"
     FILEI MATI[4] = "nonres\tripsIxPM.tpp"
     FILEI MATI[5] = "nonres\tripsIxEV.tpp"

     ; Read Highway Skims
     FILEI MATI[6] = "skims\HWYSKMEA.tpp"
     FILEI MATI[7] = "skims\HWYSKMAM.tpp"
     FILEI MATI[8] = "skims\HWYSKMMD.tpp"
     FILEI MATI[9] = "skims\HWYSKMPM.tpp"
     FILEI MATI[10]= "skims\HWYSKMEV.tpp"

     ; don't use unconnected zones
     FILEI MATI[11] = "skims\connected_zones.tpp"

     FILEI LOOKUPI[1] = taxi_tnc_occ_factors.csv

     FILEO PRINTO[1] = "metrics\auto_times_@token_auto@.csv",APPEND=T

    ; load lookup values for factoring taxi and TNC modes
    lookup lookupi=1, LIST=y, name=occ_factors,
      lookup[1]=1, result=2,      ; (occ,taxi)
      lookup[2]=1, result=3,      ; (occ,single_tnc)
      lookup[3]=1, result=4       ; (occ,shared_tnc)

    IF (I=1)
      IF (@auto@==1 || @auto@==2 || @auto@==10 || @auto@==11)
        _occupancy = 1.0
      ELSEIF (@auto@==3 || @auto@==4 || @auto@==12 || @auto@==13)
        _occupancy = 2.0
      ELSEIF (@auto@==5 || @auto@==6 || @auto@==14 || @auto@==15)
        _occupancy = 3.5

      ; calculate the average occupancy
      ; the multiplication factors for s3 is calculated based on MTC's TNC pilot survey conducted in Oct/Nov 2018
      ; the spreadsheet is here: M:\Application\Model One\Mock Futures\TNC occupancy\tnc occupancy.xlsx
      ELSEIF (@auto@==7)
       ; taxi
       _occupancy = occ_factors(1, 1)*1 + occ_factors(1, 2)*2 + occ_factors(1, 3)*3.60
      ELSEIF (@auto@==8)
       ; tnc single
       _occupancy = occ_factors(2, 1)*1 + occ_factors(2, 2)*2 + occ_factors(2, 3)*3.60
      ELSEIF (@auto@==9)
       ; tnc shared
       _occupancy = occ_factors(3, 1)*1 + occ_factors(3, 2)*2 + occ_factors(3, 3)*3.83
      ENDIF
    ENDIF

     ; Trips EA * Skims EA
      MW[1]   =  mi.1.@token_auto@ * mi.6.@token_time@ * _occupancy ; Person minutes
      MW[2]   =  mi.1.@token_auto@ * mi.6.@token_time@               ; Vehicle minutes
      MW[3]   =  mi.1.@token_auto@ * mi.6.@token_dist@ * _occupancy ; Person miles
      MW[4]   =  mi.1.@token_auto@ * mi.6.@token_dist@               ; Vehicle miles
      MW[5]   =  mi.1.@token_auto@ * (mi.6.@token_dist@ * @AUTOOPC@) ; not including tolls
      MW[6]   =  mi.1.@token_auto@ *  mi.6.@token_btoll@             ; Bridge tolls
      MW[7]   =  mi.1.@token_auto@ *  mi.6.@token_vtoll@             ; Value tolls

     ; Trips AM * Skims AM
      MW[8]   =  mi.2.@token_auto@ * mi.7.@token_time@ * _occupancy ; Person minutes
      MW[9]   =  mi.2.@token_auto@ * mi.7.@token_time@               ; Vehicle minutes
      MW[10]  =  mi.2.@token_auto@ * mi.7.@token_dist@ * _occupancy ; Person miles
      MW[11]  =  mi.2.@token_auto@ * mi.7.@token_dist@               ; Vehilce miles
      MW[12]  =  mi.2.@token_auto@ * (mi.7.@token_dist@ * @AUTOOPC@) ; not including tolls
      MW[13]  =  mi.2.@token_auto@ *  mi.7.@token_btoll@             ; Bridge tolls
      MW[14]  =  mi.2.@token_auto@ *  mi.7.@token_vtoll@             ; Value tolls

      ; Trips MD * Skims MD
      MW[15]  =  mi.3.@token_auto@ * mi.8.@token_time@ * _occupancy ; Person minutes
      MW[16]  =  mi.3.@token_auto@ * mi.8.@token_time@               ; Vehicle minutes
      MW[17]  =  mi.3.@token_auto@ * mi.8.@token_dist@ * _occupancy ; Person miles
      MW[18]  =  mi.3.@token_auto@ * mi.8.@token_dist@               ; Vehicle miles
      MW[19]  =  mi.3.@token_auto@ * (mi.8.@token_dist@ * @AUTOOPC@) ; not including tolls
      MW[20]  =  mi.3.@token_auto@ *  mi.8.@token_btoll@             ; Bridge tolls
      MW[21]  =  mi.3.@token_auto@ *  mi.8.@token_vtoll@             ; Value tolls

      ; Trips PM * Skims PM
      MW[22]  =  mi.4.@token_auto@ * mi.9.@token_time@ * _occupancy ; Person minutes
      MW[23]  =  mi.4.@token_auto@ * mi.9.@token_time@               ; Vehicle minutes
      MW[24]  =  mi.4.@token_auto@ * mi.9.@token_dist@ * _occupancy ; Person miles
      MW[25]  =  mi.4.@token_auto@ * mi.9.@token_dist@               ; Vehicle miles
      MW[26]  =  mi.4.@token_auto@ * (mi.9.@token_dist@ * @AUTOOPC@) ; not including tolls
      MW[27]  =  mi.4.@token_auto@ *  mi.9.@token_btoll@             ; Bridge tolls
      MW[28]  =  mi.4.@token_auto@ *  mi.9.@token_vtoll@             ; Value tolls

      ; Trips EV * Skims EV
      MW[29]  =  mi.5.@token_auto@ * mi.10.@token_time@ * _occupancy ; Person minutes
      MW[30]  =  mi.5.@token_auto@ * mi.10.@token_time@               ; Vehicle minutes
      MW[31]  =  mi.5.@token_auto@ * mi.10.@token_dist@ * _occupancy ; Person miles
      MW[32]  =  mi.5.@token_auto@ * mi.10.@token_dist@               ; Vehicle miles
      MW[33]  =  mi.5.@token_auto@ * (mi.10.@token_dist@ * @AUTOOPC@) ; not including tolls
      MW[34]  =  mi.5.@token_auto@ *  mi.10.@token_btoll@             ; Bridge tolls
      MW[35]  =  mi.5.@token_auto@ *  mi.10.@token_vtoll@             ; Value tolls

     ; Compute Daily Person Trips, Daily Vehicle Trips, PersonTime, VehicleTime, PersonMiles, VehicleMiles, TotalCost, Bridge Tolls, Value Tolls
     ;
     ; NOTE that the zones may be unconnected, resulting in huge skim values, so we need to exclude those here

     MW[36] = mi.11.connected*mi.11.connected.t*( mi.1.@token_auto@ + mi.2.@token_auto@ + mi.3.@token_auto@ + mi.4.@token_auto@ +mi.5.@token_auto@)
     MW[37] = mi.11.connected*mi.11.connected.t*((mi.1.@token_auto@ + mi.2.@token_auto@ + mi.3.@token_auto@ + mi.4.@token_auto@ +mi.5.@token_auto@)/_occupancy)
     MW[38] = mi.11.connected*mi.11.connected.t*(MW[1] + MW[8]  + MW[15] + MW[22] + MW[29])   ; Person minutes
     MW[39] = mi.11.connected*mi.11.connected.t*(MW[2] + MW[9]  + MW[16] + MW[23] + MW[30])   ; Vehicle minutes
     MW[40] = mi.11.connected*mi.11.connected.t*(MW[3] + MW[10] + MW[17] + MW[24] + MW[31])   ; Person miles
     MW[41] = mi.11.connected*mi.11.connected.t*(MW[4] + MW[11] + MW[18] + MW[25] + MW[32])   ; Vehicle miles
     MW[42] = mi.11.connected*mi.11.connected.t*(MW[5] + MW[12] + MW[19] + MW[26] + MW[33])   ; Trip Cost
     MW[43] = mi.11.connected*mi.11.connected.t*(MW[6] + MW[13] + MW[20] + MW[27] + MW[34])   ; Bridge Tolls
     MW[44] = mi.11.connected*mi.11.connected.t*(MW[7] + MW[14] + MW[21] + MW[28] + MW[35])   ; Value Tolls

     IF (@auto@=2 || @auto@==4 || @auto@==6)
       ; only for tolls
       Value_tolls       = Value_tolls        + ROWSUM(44)
     else
       Value_tolls       = 0
     ENDIF

     Person_trips  = Person_trips  + ROWSUM(36)
     Vehicle_trips = Vehicle_trips + ROWSUM(37)
     Person_min    = Person_min    + ROWSUM(38)
     Vehicle_min   = Vehicle_min   + ROWSUM(39)
     Person_miles  = Person_miles  + ROWSUM(40)
     Vehicle_miles = Vehicle_miles + ROWSUM(41)
     Total_cost    = Total_cost    + ROWSUM(42)
     Bridge_tolls  = Bridge_tolls  + ROWSUM(43)

      Mode   = '@token_auto@' + '_ix'

      if(I = ZONES) PRINT PRINTO=1 CSV=T LIST= "na",   Mode, Person_trips(10.2L), Vehicle_trips(10.2L),
                                                            Person_min(10.2L),   Vehicle_min(10.2L),
                                                            Person_miles(10.2L), Vehicle_miles(10.2L),
                                                            Total_cost(10.2L),
                                                            "na","na",
                                                            Bridge_tolls(10.2L), Value_tolls(10.2L)
    ENDRUN

   RUN PGM = MATRIX
     ; Read air passenger travel demand - vehicle trips
     FILEI MATI[1] = "nonres\tripsAirPaxEA.tpp"
     FILEI MATI[2] = "nonres\tripsAirPaxAM.tpp"
     FILEI MATI[3] = "nonres\tripsAirPaxMD.tpp"
     FILEI MATI[4] = "nonres\tripsAirPaxPM.tpp"
     FILEI MATI[5] = "nonres\tripsAirPaxEV.tpp"

     ; Read Highway Skims
     FILEI MATI[6] = "skims\HWYSKMEA.tpp"
     FILEI MATI[7] = "skims\HWYSKMAM.tpp"
     FILEI MATI[8] = "skims\HWYSKMMD.tpp"
     FILEI MATI[9] = "skims\HWYSKMPM.tpp"
     FILEI MATI[10]= "skims\HWYSKMEV.tpp"

     FILEI MATI[11] = "skims\connected_zones.tpp"

     FILEI LOOKUPI[1] = taxi_tnc_occ_factors.csv

     FILEO PRINTO[1] = "metrics\auto_times_@token_auto@.csv",APPEND=T

    ; load lookup values for factoring taxi and TNC modes
    lookup lookupi=1, LIST=y, name=occ_factors,
      lookup[1]=1, result=2,      ; (occ,taxi)
      lookup[2]=1, result=3,      ; (occ,single_tnc)
      lookup[3]=1, result=4       ; (occ,shared_tnc)

    IF (I=1)
      IF (@auto@==1 || @auto@==2 || @auto@==10 || @auto@==11)
        _occupancy = 1.0
      ELSEIF (@auto@==3 || @auto@==4 || @auto@==12 || @auto@==13)
        _occupancy = 2.0
      ELSEIF (@auto@==5 || @auto@==6 || @auto@==14 || @auto@==15)
        _occupancy = 3.5

      ; calculate the average occupancy
      ; the multiplication factors for s3 is calculated based on MTC's TNC pilot survey conducted in Oct/Nov 2018
      ; the spreadsheet is here: M:\Application\Model One\Mock Futures\TNC occupancy\tnc occupancy.xlsx
      ELSEIF (@auto@==7)
       ; taxi
       _occupancy = occ_factors(1, 1)*1 + occ_factors(1, 2)*2 + occ_factors(1, 3)*3.60
      ELSEIF (@auto@==8)
       ; tnc single
       _occupancy = occ_factors(2, 1)*1 + occ_factors(2, 2)*2 + occ_factors(2, 3)*3.60
      ELSEIF (@auto@==9)
       ; tnc shared
       _occupancy = occ_factors(3, 1)*1 + occ_factors(3, 2)*2 + occ_factors(3, 3)*3.83
      ENDIF
    ENDIF

     ; Trips EA * Skims EA
      MW[1]   =  mi.1.@token_auto@ * mi.6.@token_time@ * _occupancy ; Person minutes
      MW[2]   =  mi.1.@token_auto@ * mi.6.@token_time@               ; Vehicle minutes
      MW[3]   =  mi.1.@token_auto@ * mi.6.@token_dist@ * _occupancy ; Person miles
      MW[4]   =  mi.1.@token_auto@ * mi.6.@token_dist@               ; Vehicle miles
      MW[5]   =  mi.1.@token_auto@ * (mi.6.@token_dist@ * @AUTOOPC@) ; not including tolls
      MW[6]   =  mi.1.@token_auto@ *  mi.6.@token_btoll@             ; Bridge tolls
      MW[7]   =  mi.1.@token_auto@ *  mi.6.@token_vtoll@             ; Value tolls

     ; Trips AM * Skims AM
      MW[8]   =  mi.2.@token_auto@ * mi.7.@token_time@ * _occupancy ; Person minutes
      MW[9]   =  mi.2.@token_auto@ * mi.7.@token_time@               ; Vehicle minutes
      MW[10]  =  mi.2.@token_auto@ * mi.7.@token_dist@ * _occupancy ; Person miles
      MW[11]  =  mi.2.@token_auto@ * mi.7.@token_dist@               ; Vehilce miles
      MW[12]  =  mi.2.@token_auto@ * (mi.7.@token_dist@ * @AUTOOPC@) ; not including tolls
      MW[13]  =  mi.2.@token_auto@ *  mi.7.@token_btoll@             ; Bridge tolls
      MW[14]  =  mi.2.@token_auto@ *  mi.7.@token_vtoll@             ; Value tolls

      ; Trips MD * Skims MD
      MW[15]  =  mi.3.@token_auto@ * mi.8.@token_time@ * _occupancy ; Person minutes
      MW[16]  =  mi.3.@token_auto@ * mi.8.@token_time@               ; Vehicle minutes
      MW[17]  =  mi.3.@token_auto@ * mi.8.@token_dist@ * _occupancy ; Person miles
      MW[18]  =  mi.3.@token_auto@ * mi.8.@token_dist@               ; Vehicle miles
      MW[19]  =  mi.3.@token_auto@ * (mi.8.@token_dist@ * @AUTOOPC@) ; not including tolls
      MW[20]  =  mi.3.@token_auto@ *  mi.8.@token_btoll@             ; Bridge tolls
      MW[21]  =  mi.3.@token_auto@ *  mi.8.@token_vtoll@             ; Value tolls

      ; Trips PM * Skims PM
      MW[22]   =  mi.4.@token_auto@ * mi.9.@token_time@ * _occupancy ; Person minutes
      MW[23]   =  mi.4.@token_auto@ * mi.9.@token_time@               ; Vehicle minutes
      MW[24]   =  mi.4.@token_auto@ * mi.9.@token_dist@ * _occupancy ; Person miles
      MW[25]   =  mi.4.@token_auto@ * mi.9.@token_dist@               ; Vehicle miles
      MW[26]   =  mi.4.@token_auto@ * (mi.9.@token_dist@ * @AUTOOPC@) ; not including tolls
      MW[27]   =  mi.4.@token_auto@ *  mi.9.@token_btoll@             ; Bridge tolls
      MW[28]   =  mi.4.@token_auto@ *  mi.9.@token_vtoll@             ; Value tolls

      ; Trips EV * Skims EV
      MW[29]   =  mi.5.@token_auto@ * mi.10.@token_time@ * _occupancy ; Person minutes
      MW[30]   =  mi.5.@token_auto@ * mi.10.@token_time@               ; Vehicle minutes
      MW[31]   =  mi.5.@token_auto@ * mi.10.@token_dist@ * _occupancy ; Person miles
      MW[32]   =  mi.5.@token_auto@ * mi.10.@token_dist@               ; Vehicle miles
      MW[33]   =  mi.5.@token_auto@ * (mi.10.@token_dist@ * @AUTOOPC@) ; not including tolls
      MW[34]   =  mi.5.@token_auto@ *  mi.10.@token_btoll@             ; Bridge tolls
      MW[35]   =  mi.5.@token_auto@ *  mi.10.@token_vtoll@             ; Value tolls

     ; Compute Daily Person Trips, Daily Vehicle Trips, PersonTime, VehicleTime, PersonMiles, VehicleMiles, TotalCost, Bridge Tolls, Value Tolls
     ;
     ; NOTE that the zones may be unconnected, resulting in huge skim values, so we need to exclude those here

     MW[36] = mi.11.connected*mi.11.connected.t*( mi.1.@token_auto@ + mi.2.@token_auto@ + mi.3.@token_auto@ + mi.4.@token_auto@ +mi.5.@token_auto@ )*_occupancy
     MW[37] = mi.11.connected*mi.11.connected.t*( mi.1.@token_auto@ + mi.2.@token_auto@ + mi.3.@token_auto@ + mi.4.@token_auto@ +mi.5.@token_auto@)
     MW[38] = mi.11.connected*mi.11.connected.t*(MW[1] + MW[8]  + MW[15] + MW[22] + MW[29])   ; Person minutes
     MW[39] = mi.11.connected*mi.11.connected.t*(MW[2] + MW[9]  + MW[16] + MW[23] + MW[30])   ; Vehicle minutes
     MW[40] = mi.11.connected*mi.11.connected.t*(MW[3] + MW[10] + MW[17] + MW[24] + MW[31])   ; Person miles
     MW[41] = mi.11.connected*mi.11.connected.t*(MW[4] + MW[11] + MW[18] + MW[25] + MW[32])   ; Vehicle miles
     MW[42] = mi.11.connected*mi.11.connected.t*(MW[5] + MW[12] + MW[19] + MW[26] + MW[33])   ; Trip Cost
     MW[43] = mi.11.connected*mi.11.connected.t*(MW[6] + MW[13] + MW[20] + MW[27] + MW[34])   ; Bridge Tolls
     MW[44] = mi.11.connected*mi.11.connected.t*(MW[7] + MW[14] + MW[21] + MW[28] + MW[35])   ; Value Tolls

     IF (@auto@==2 || @auto@==4 || @auto@==6)
       ; only for tolls
       Value_tolls       = Value_tolls        + ROWSUM(44)
     else
       Value_tolls       = 0
     ENDIF

     Person_trips  = Person_trips  + ROWSUM(36)
     Vehicle_trips = Vehicle_trips + ROWSUM(37)
     Person_min    = Person_min    + ROWSUM(38)
     Vehicle_min   = Vehicle_min   + ROWSUM(39)
     Person_miles  = Person_miles  + ROWSUM(40)
     Vehicle_miles = Vehicle_miles + ROWSUM(41)
     Total_cost    = Total_cost    + ROWSUM(42)
     Bridge_tolls  = Bridge_tolls  + ROWSUM(43)

      Mode   = '@token_auto@' + '_air'

      if(I = ZONES) PRINT PRINTO=1 CSV=T LIST= "na",   Mode, Person_trips(10.2L), Vehicle_trips(10.2L),
                                                            Person_min(10.2L),   Vehicle_min(10.2L),
                                                            Person_miles(10.2L), Vehicle_miles(10.2L),
                                                            Total_cost(10.2L),
                                                            "na","na",
                                                            Bridge_tolls(10.2L), Value_tolls(10.2L)
    ENDRUN
  ENDIF ; for the first six auto modes

  EndDistributeMultistep

endloop

Wait4Files files=CTRAMP1.script.end, CTRAMP2.script.end, CTRAMP3.script.end, CTRAMP4.script.end, CTRAMP5.script.end, CTRAMP6.script.end,
                 CTRAMP7.script.end, CTRAMP8.script.end, CTRAMP9.script.end, CTRAMP10.script.end, CTRAMP11.script.end, CTRAMP12.script.end,
                 CTRAMP13.script.end, CTRAMP14.script.end, CTRAMP15.script.end,
           printfiles = merge, deldistribfiles = t, CheckReturnCode = t

; combine the income files into one
* copy metrics\auto_times_da.csv+metrics\auto_times_datoll.csv+metrics\auto_times_sr2.csv+metrics\auto_times_sr2toll.csv+metrics\auto_times_sr3.csv+metrics\auto_times_sr3toll.csv+metrics\auto_times_taxi.csv+metrics\auto_times_tnc_single.csv+metrics\auto_times_tnc_shared.csv+metrics\auto_times_da_av_notoll.csv+metrics\auto_times_da_av_toll.csv+metrics\auto_times_s2_av_notoll.csv+metrics\auto_times_s2_av_toll.csv+metrics\auto_times_s3_av_notoll.csv+metrics\auto_times_s3_av_toll.csv+metrics\auto_times_zpv_av.csv metrics\auto_times.csv
; delete the individual ones
* del metrics\auto_times_*.csv

; tnc zpv
RUN PGM = MATRIX
  ; Read person trips for an income quartile for all time periods
  FILEI MATI[1] = "main\tripsEA_zpv.tpp"
  FILEI MATI[2] = "main\tripsAM_zpv.tpp"
  FILEI MATI[3] = "main\tripsMD_zpv.tpp"
  FILEI MATI[4] = "main\tripsPM_zpv.tpp"
  FILEI MATI[5] = "main\tripsEV_zpv.tpp"

  ; Read Highway Skims
  FILEI MATI[6] = "skims\HWYSKMEA.tpp"
  FILEI MATI[7] = "skims\HWYSKMAM.tpp"
  FILEI MATI[8] = "skims\HWYSKMMD.tpp"
  FILEI MATI[9] = "skims\HWYSKMPM.tpp"
  FILEI MATI[10]= "skims\HWYSKMEV.tpp"

  ; Specify output file
  FILEO PRINTO[1] = "metrics\auto_times.csv",APPEND=T

  ; Trips EA * Skims EA
  MW[ 1] =  0                                        ; Person minutes
  MW[ 2] =  mi.1.zpv_tnc * mi.6.TIMEDA               ; Vehicle minutes
  MW[ 3] =  0                                        ; Person miles
  MW[ 4] =  mi.1.zpv_tnc * mi.6.DISTDA               ; Vehicle miles
  MW[ 5] =  mi.1.zpv_tnc * (mi.6.DISTDA * @AUTOOPC@) ; not including tolls
  MW[ 6] =  mi.1.zpv_tnc *  mi.6.BTOLLDA             ; Bridge tolls
  MW[ 7] =  0                                        ; Value tolls

  ; Trips AM * Skims AM
  MW[ 8]   =  0                                        ; Person minutes
  MW[ 9]   =  mi.2.zpv_tnc * mi.7.TIMEDA               ; Vehicle minutes
  MW[10]   =  0                                        ; Person miles
  MW[11]   =  mi.2.zpv_tnc * mi.7.DISTDA               ; Vehicle miles
  MW[12]   =  mi.2.zpv_tnc * (mi.7.DISTDA * @AUTOOPC@) ; not including tolls
  MW[13]   =  mi.2.zpv_tnc *  mi.7.BTOLLDA             ; Bridge tolls
  MW[14]   =  0                                        ; Value tolls

  ; Trips MD * Skims MD
  MW[15]   =  0                                        ; Person minutes
  MW[16]   =  mi.3.zpv_tnc * mi.8.TIMEDA               ; Vehicle minutes
  MW[17]   =  0                                        ; Person miles
  MW[18]   =  mi.3.zpv_tnc * mi.8.DISTDA               ; Vehicle miles
  MW[19]   =  mi.3.zpv_tnc * (mi.8.DISTDA * @AUTOOPC@) ; not including tolls
  MW[20]   =  mi.3.zpv_tnc *  mi.8.BTOLLDA             ; Bridge tolls
  MW[21]   =  0                                        ; Value tolls

  ; Trips PM * Skims PM
  MW[22]   =  0                                        ; Person minutes
  MW[23]   =  mi.4.zpv_tnc * mi.9.TIMEDA               ; Vehicle minutes
  MW[24]   =  0                                        ; Person miles
  MW[25]   =  mi.4.zpv_tnc * mi.9.DISTDA               ; Vehicle miles
  MW[26]   =  mi.4.zpv_tnc * (mi.9.DISTDA * @AUTOOPC@) ; not including tolls
  MW[27]   =  mi.4.zpv_tnc *  mi.9.BTOLLDA             ; Bridge tolls
  MW[28]   =  0                                        ; Value tolls

  ; Trips EV * Skims EV
  MW[29]   =  0                                         ; Person minutes
  MW[30]   =  mi.5.zpv_tnc * mi.10.TIMEDA               ; Vehicle minutes
  MW[31]   =  0                                         ; Person miles
  MW[32]   =  mi.5.zpv_tnc * mi.10.DISTDA               ; Vehicle miles
  MW[33]   =  mi.5.zpv_tnc * (mi.10.DISTDA * @AUTOOPC@) ; not including tolls
  MW[34]   =  mi.5.zpv_tnc *  mi.10.BTOLLDA             ; Bridge tolls
  MW[35]   =  0                                         ; Value tolls

  ; Compute Daily Person Trips, Daily Vehicle Trips, PersonTime, VehicleTime, PersonMiles, VehicleMiles, TotalCost, Bridge Tolls,   Value Tolls
  MW[36] = 0                                                    ; Person Trips
  MW[37] = mi.1.zpv_tnc + mi.2.zpv_tnc + mi.3.zpv_tnc + mi.4.zpv_tnc + mi.5.zpv_tnc  ; Vehicle Trips
  MW[38] = MW[1] + MW[8]  + MW[15] + MW[22] + MW[29]            ; Person minutes
  MW[39] = MW[2] + MW[9]  + MW[16] + MW[23] + MW[30]            ; Vehicle minutes
  MW[40] = MW[3] + MW[10] + MW[17] + MW[24] + MW[31]            ; Person miles
  MW[41] = MW[4] + MW[11] + MW[18] + MW[25] + MW[32]            ; Vehicle miles
  MW[42] = MW[5] + MW[12] + MW[19] + MW[26] + MW[33]            ; Trip Cost
  MW[43] = MW[6] + MW[13] + MW[20] + MW[27] + MW[34]            ; Bridge Tolls
  MW[44] = MW[7] + MW[14] + MW[21] + MW[28] + MW[35]            ; Value Tolls

  Person_trips  = Person_trips  + ROWSUM(36)
  Vehicle_trips = Vehicle_trips + ROWSUM(37)
  Person_min    = Person_min    + ROWSUM(38)
  Vehicle_min   = Vehicle_min   + ROWSUM(39)
  Person_miles  = Person_miles  + ROWSUM(40)
  Vehicle_miles = Vehicle_miles + ROWSUM(41)
  Total_cost    = Total_cost    + ROWSUM(42)
  Bridge_tolls  = Bridge_tolls  + ROWSUM(43)
  Value_tolls   = Value_tolls   + ROWSUM(44)
  _vtoll_am_nonzero = 0
  _vtoll_md_nonzero = 0

  Mode   = 'zpv_tnc'
  Income = 'na'

  if(I = ZONES) PRINT PRINTO=1 CSV=T LIST= Income, Mode, Person_trips(10.2L), Vehicle_trips(10.2L),
                                          Person_min(10.2L),   Vehicle_min(10.2L),
                                          Person_miles(10.2L), Vehicle_miles(10.2L),
                                          Total_cost(10.2L),
                                          _vtoll_am_nonzero(10L), _vtoll_md_nonzero(10L),
                                          Bridge_tolls(10.2L), Value_tolls(10.2L)
ENDRUN

RUN PGM = MATRIX
  ; Read truck trips for all time periods
  FILEI MATI[1] = "nonres\tripstrkEA.tpp"
  FILEI MATI[2] = "nonres\tripstrkAM.tpp"
  FILEI MATI[3] = "nonres\tripstrkMD.tpp"
  FILEI MATI[4] = "nonres\tripstrkPM.tpp"
  FILEI MATI[5] = "nonres\tripstrkEV.tpp"

  ; Read Highway Skims
  FILEI MATI[6] = "skims\COM_HWYSKIMEA.tpp"
  FILEI MATI[7] = "skims\COM_HWYSKIMAM.tpp"
  FILEI MATI[8] = "skims\COM_HWYSKIMMD.tpp"
  FILEI MATI[9] = "skims\COM_HWYSKIMPM.tpp"
  FILEI MATI[10]= "skims\COM_HWYSKIMEV.tpp"

  FILEI MATI[11] = "skims\connected_zones.tpp"

  ; Read Truck Operating Cost from Properties file
  Read File = "CTRAMP\scripts\block\hwyParam.block"

  FILEO PRINTO[1] = "metrics\auto_times.csv",APPEND=T

  ; Trips EA * Skims EA
  MW[1]   = (mi.1.vstruck * mi.6.timevsm) +
            ( mi.1.struck * mi.6.timesml) +
            ( mi.1.mtruck * mi.6.timemed) +
            ( mi.1.ctruck * mi.6.timelrg)
  MW[2]   = (mi.1.vstruck * mi.6.distvsm) +
            ( mi.1.struck * mi.6.distsml) +
            ( mi.1.mtruck * mi.6.distmed) +
            ( mi.1.ctruck * mi.6.distlrg)
  MW[3]   = (mi.1.vstruck *(mi.6.distvsm * SMTROPC)) +
            ( mi.1.struck *(mi.6.distsml * SMTROPC)) +
            ( mi.1.mtruck *(mi.6.distmed * SMTROPC)) +
            ( mi.1.ctruck *(mi.6.distlrg * LRTROPC))
  MW[4]   = (mi.1.vstruck * mi.6.btollvsm) +
            ( mi.1.struck * mi.6.btollsml) +
            ( mi.1.mtruck * mi.6.btollmed) +
            ( mi.1.ctruck * mi.6.btolllrg) ; Bridge tolls

  ; TOLL Trips EA * Skims EA
  MW[5]   = (mi.1.vstrucktoll *  mi.6.tolltimevsm) +
            ( mi.1.strucktoll *  mi.6.tolltimesml) +
            ( mi.1.mtrucktoll *  mi.6.tolltimemed) +
            ( mi.1.ctrucktoll *  mi.6.tolltimelrg)
  MW[6]   = (mi.1.vstrucktoll *  mi.6.tolldistvsm) +
            ( mi.1.strucktoll *  mi.6.tolldistsml) +
            ( mi.1.mtrucktoll *  mi.6.tolldistmed) +
            ( mi.1.ctrucktoll *  mi.6.tolldistlrg)
  MW[7]   = (mi.1.vstrucktoll * (mi.6.tolldistvsm * SMTROPC)) +
            ( mi.1.strucktoll * (mi.6.tolldistsml * SMTROPC)) +
            ( mi.1.mtrucktoll * (mi.6.tolldistmed * SMTROPC)) +
            ( mi.1.ctrucktoll * (mi.6.tolldistlrg * LRTROPC))
  MW[8]   = (mi.1.vstrucktoll * mi.6.tollbtollvsm) +
            ( mi.1.strucktoll * mi.6.tollbtollsml) +
            ( mi.1.mtrucktoll * mi.6.tollbtollmed) +
            ( mi.1.ctrucktoll * mi.6.tollbtolllrg) ; Bridge tolls
  MW[9]   = (mi.1.vstrucktoll * mi.6.tollvtollvsm) +
            ( mi.1.strucktoll * mi.6.tollvtollsml) +
            ( mi.1.mtrucktoll * mi.6.tollvtollmed) +
            ( mi.1.ctrucktoll * mi.6.tollvtolllrg) ; Value tolls

  ; Trips AM * Skims AM
  MW[10]  = (mi.2.vstruck * mi.7.timevsm) +
            ( mi.2.struck * mi.7.timesml) +
            ( mi.2.mtruck * mi.7.timemed) +
            ( mi.2.ctruck * mi.7.timelrg)
  MW[11]  = (mi.2.vstruck * mi.7.distvsm) +
            ( mi.2.struck * mi.7.distsml) +
            ( mi.2.mtruck * mi.7.distmed) +
            ( mi.2.ctruck * mi.7.distlrg)
  MW[12]  = (mi.2.vstruck *(mi.7.distvsm * SMTROPC)) +
            ( mi.2.struck *(mi.7.distsml * SMTROPC)) +
            ( mi.2.mtruck *(mi.7.distmed * SMTROPC)) +
            ( mi.2.ctruck *(mi.7.distlrg * LRTROPC))
  MW[13]  = (mi.2.vstruck * mi.7.btollvsm) +
            ( mi.2.struck * mi.7.btollsml) +
            ( mi.2.mtruck * mi.7.btollmed) +
            ( mi.2.ctruck * mi.7.btolllrg) ; Bridge tolls

  ; TOLL Trips AM * Skims AM
  MW[14]  = (mi.2.vstrucktoll *  mi.7.tolltimevsm) +
            ( mi.2.strucktoll *  mi.7.tolltimesml) +
            ( mi.2.mtrucktoll *  mi.7.tolltimemed) +
            ( mi.2.ctrucktoll *  mi.7.tolltimelrg)
  MW[15]  = (mi.2.vstrucktoll *  mi.7.tolldistvsm) +
            ( mi.2.strucktoll *  mi.7.tolldistsml) +
            ( mi.2.mtrucktoll *  mi.7.tolldistmed) +
            ( mi.2.ctrucktoll *  mi.7.tolldistlrg)
  MW[16]  = (mi.2.vstrucktoll * (mi.7.tolldistvsm * SMTROPC)) +
            ( mi.2.strucktoll * (mi.7.tolldistsml * SMTROPC)) +
            ( mi.2.mtrucktoll * (mi.7.tolldistmed * SMTROPC)) +
            ( mi.2.ctrucktoll * (mi.7.tolldistlrg * LRTROPC))
  MW[17]  = (mi.2.vstrucktoll * mi.7.tollbtollvsm) +
            ( mi.2.strucktoll * mi.7.tollbtollsml) +
            ( mi.2.mtrucktoll * mi.7.tollbtollmed) +
            ( mi.2.ctrucktoll * mi.7.tollbtolllrg) ; Bridge tolls
  MW[18]  = (mi.2.vstrucktoll * mi.7.tollvtollvsm) +
            ( mi.2.strucktoll * mi.7.tollvtollsml) +
            ( mi.2.mtrucktoll * mi.7.tollvtollmed) +
            ( mi.2.ctrucktoll * mi.7.tollvtolllrg) ; Value tolls

  ; Trips MD * Skims MD
  MW[19]  = (mi.3.vstruck * mi.8.timevsm) +
            ( mi.3.struck * mi.8.timesml) +
            ( mi.3.mtruck * mi.8.timemed) +
            ( mi.3.ctruck * mi.8.timelrg)
  MW[20]  = (mi.3.vstruck * mi.8.distvsm) +
            ( mi.3.struck * mi.8.distsml) +
            ( mi.3.mtruck * mi.8.distmed) +
            ( mi.3.ctruck * mi.8.distlrg)
  MW[21]  = (mi.3.vstruck *(mi.8.distvsm * SMTROPC)) +
            ( mi.3.struck *(mi.8.distsml * SMTROPC)) +
            ( mi.3.mtruck *(mi.8.distmed * SMTROPC)) +
            ( mi.3.ctruck *(mi.8.distlrg * LRTROPC))
  MW[22]  = (mi.3.vstruck * mi.8.btollvsm) +
            ( mi.3.struck * mi.8.btollsml) +
            ( mi.3.mtruck * mi.8.btollmed) +
            ( mi.3.ctruck * mi.8.btolllrg) ; Bridge tolls

  ; TOLL Trips MD * Skims MD
  MW[23]  = (mi.3.vstrucktoll *  mi.8.tolltimevsm) +
            ( mi.3.strucktoll *  mi.8.tolltimesml) +
            ( mi.3.mtrucktoll *  mi.8.tolltimemed) +
            ( mi.3.ctrucktoll *  mi.8.tolltimelrg)
  MW[24]  = (mi.3.vstrucktoll *  mi.8.tolldistvsm) +
            ( mi.3.strucktoll *  mi.8.tolldistsml) +
            ( mi.3.mtrucktoll *  mi.8.tolldistmed) +
            ( mi.3.ctrucktoll *  mi.8.tolldistlrg)
  MW[25]  = (mi.3.vstrucktoll * (mi.8.tolldistvsm * SMTROPC)) +
            ( mi.3.strucktoll * (mi.8.tolldistsml * SMTROPC)) +
            ( mi.3.mtrucktoll * (mi.8.tolldistmed * SMTROPC)) +
            ( mi.3.ctrucktoll * (mi.8.tolldistlrg * LRTROPC))
  MW[26]  = (mi.3.vstrucktoll *  mi.8.tollbtollvsm) +
            ( mi.3.strucktoll *  mi.8.tollbtollsml) +
            ( mi.3.mtrucktoll *  mi.8.tollbtollmed) +
            ( mi.3.ctrucktoll *  mi.8.tollbtolllrg) ; Bridge tolls
  MW[27]  = (mi.3.vstrucktoll * mi.8.tollvtollvsm) +
            ( mi.3.strucktoll * mi.8.tollvtollsml) +
            ( mi.3.mtrucktoll * mi.8.tollvtollmed) +
            ( mi.3.ctrucktoll * mi.8.tollvtolllrg) ; Value tolls

  ; Trips PM * Skims PM
  MW[28]  = (mi.4.vstruck * mi.9.timevsm) +
            ( mi.4.struck * mi.9.timesml) +
            ( mi.4.mtruck * mi.9.timemed) +
            ( mi.4.ctruck * mi.9.timelrg)
  MW[29]  = (mi.4.vstruck * mi.9.distvsm) +
            ( mi.4.struck * mi.9.distsml) +
            ( mi.4.mtruck * mi.9.distmed) +
            ( mi.4.ctruck * mi.9.distlrg)
  MW[30]  = (mi.4.vstruck *(mi.9.distvsm * SMTROPC)) +
            ( mi.4.struck *(mi.9.distsml * SMTROPC)) +
            ( mi.4.mtruck *(mi.9.distmed * SMTROPC)) +
            ( mi.4.ctruck *(mi.9.distlrg * LRTROPC))
  MW[31]  = (mi.4.vstruck * mi.9.btollvsm) +
            ( mi.4.struck * mi.9.btollsml) +
            ( mi.4.mtruck * mi.9.btollmed) +
            ( mi.4.ctruck * mi.9.btolllrg) ; Bridge tolls

  ; TOLL Trips PM * Skims PM
  MW[32]  = (mi.4.vstrucktoll *  mi.9.tolltimevsm) +
            ( mi.4.strucktoll *  mi.9.tolltimesml) +
            ( mi.4.mtrucktoll *  mi.9.tolltimemed) +
            ( mi.4.ctrucktoll *  mi.9.tolltimelrg)
  MW[33]  = (mi.4.vstrucktoll *  mi.9.tolldistvsm) +
            ( mi.4.strucktoll *  mi.9.tolldistsml) +
            ( mi.4.mtrucktoll *  mi.9.tolldistmed) +
            ( mi.4.ctrucktoll *  mi.9.tolldistlrg)
  MW[34]  = (mi.4.vstrucktoll * (mi.9.tolldistvsm * SMTROPC)) +
            ( mi.4.strucktoll * (mi.9.tolldistsml * SMTROPC)) +
            ( mi.4.mtrucktoll * (mi.9.tolldistmed * SMTROPC)) +
            ( mi.4.ctrucktoll * (mi.9.tolldistlrg * LRTROPC))
  MW[35]  = (mi.4.vstrucktoll * mi.9.tollbtollvsm) +
            ( mi.4.strucktoll * mi.9.tollbtollsml) +
            ( mi.4.mtrucktoll * mi.9.tollbtollmed) +
            ( mi.4.ctrucktoll * mi.9.tollbtolllrg) ; Bridge tolls
  MW[36]  = (mi.4.vstrucktoll * mi.9.tollvtollvsm) +
            ( mi.4.strucktoll * mi.9.tollvtollsml) +
            ( mi.4.mtrucktoll * mi.9.tollvtollmed) +
            ( mi.4.ctrucktoll * mi.9.tollvtolllrg) ; Value tolls

  ; Trips EV * Skims EV
  MW[37]  = (mi.5.vstruck * mi.10.timevsm) +
            ( mi.5.struck * mi.10.timesml) +
            ( mi.5.mtruck * mi.10.timemed) +
            ( mi.5.ctruck * mi.10.timelrg)
  MW[38]  = (mi.5.vstruck * mi.10.distvsm) +
            ( mi.5.struck * mi.10.distsml) +
            ( mi.5.mtruck * mi.10.distmed) +
            ( mi.5.ctruck * mi.10.distlrg)
  MW[39]  = (mi.5.vstruck *(mi.10.distvsm * SMTROPC)) +
            ( mi.5.struck *(mi.10.distsml * SMTROPC)) +
            ( mi.5.mtruck *(mi.10.distmed * SMTROPC)) +
            ( mi.5.ctruck *(mi.10.distlrg * LRTROPC))
  MW[40]  = (mi.5.vstruck * mi.10.btollvsm) +
            ( mi.5.struck * mi.10.btollsml) +
            ( mi.5.mtruck * mi.10.btollmed) +
            ( mi.5.ctruck * mi.10.btolllrg) ; Bridge tolls

  ; TOLL Trips EV * Skims EV
  MW[41]  = (mi.5.vstrucktoll *  mi.10.tolltimevsm) +
            ( mi.5.strucktoll *  mi.10.tolltimesml) +
            ( mi.5.mtrucktoll *  mi.10.tolltimemed) +
            ( mi.5.ctrucktoll *  mi.10.tolltimelrg)
  MW[42]  = (mi.5.vstrucktoll *  mi.10.tolldistvsm) +
            ( mi.5.strucktoll *  mi.10.tolldistsml) +
            ( mi.5.mtrucktoll *  mi.10.tolldistmed) +
            ( mi.5.ctrucktoll *  mi.10.tolldistlrg)
  MW[43]  = (mi.5.vstrucktoll * (mi.10.tolldistvsm * SMTROPC)) +
            ( mi.5.strucktoll * (mi.10.tolldistsml * SMTROPC)) +
            ( mi.5.mtrucktoll * (mi.10.tolldistmed * SMTROPC)) +
            ( mi.5.ctrucktoll * (mi.10.tolldistlrg * LRTROPC))
  MW[44]  = (mi.5.vstrucktoll * mi.10.tollbtollvsm) +
            ( mi.5.strucktoll * mi.10.tollbtollsml) +
            ( mi.5.mtrucktoll * mi.10.tollbtollmed) +
            ( mi.5.ctrucktoll * mi.10.tollbtolllrg) ; Bridge tolls
  MW[45]  = (mi.5.vstrucktoll * mi.10.tollvtollvsm) +
            ( mi.5.strucktoll * mi.10.tollvtollsml) +
            ( mi.5.mtrucktoll * mi.10.tollvtollmed) +
            ( mi.5.ctrucktoll * mi.10.tollvtolllrg) ; Value tolls

  ; Compute Daily Trips, TripTime, TripDist, TripCost, BridgeToll, ValueToll
  ;
  ; NOTE that the zones may be unconnected, resulting in huge skim values, so we need to exclude those here
  MW[46] = mi.11.connected*mi.11.connected.t*
          (mi.1.vstruck + mi.1.struck + mi.1.mtruck + mi.1.ctruck + mi.1.vstrucktoll + mi.1.strucktoll + mi.1.mtrucktoll + mi.1.ctrucktoll +
           mi.2.vstruck + mi.2.struck + mi.2.mtruck + mi.2.ctruck + mi.2.vstrucktoll + mi.2.strucktoll + mi.2.mtrucktoll + mi.2.ctrucktoll +
           mi.3.vstruck + mi.3.struck + mi.3.mtruck + mi.3.ctruck + mi.3.vstrucktoll + mi.3.strucktoll + mi.3.mtrucktoll + mi.3.ctrucktoll +
           mi.4.vstruck + mi.4.struck + mi.4.mtruck + mi.4.ctruck + mi.4.vstrucktoll + mi.4.strucktoll + mi.4.mtrucktoll + mi.4.ctrucktoll +
           mi.5.vstruck + mi.5.struck + mi.5.mtruck + mi.5.ctruck + mi.5.vstrucktoll + mi.5.strucktoll + mi.5.mtrucktoll + mi.5.ctrucktoll)
  MW[47] = mi.11.connected*mi.11.connected.t*(MW[1] + MW[5] + MW[10] + MW[14] + MW[19] + MW[23] + MW[28] + MW[32] + MW[37] + MW[41]) ; TripTime
  MW[48] = mi.11.connected*mi.11.connected.t*(MW[2] + MW[6] + MW[11] + MW[15] + MW[20] + MW[24] + MW[29] + MW[33] + MW[38] + Mw[42]) ; TripDist
  MW[49] = mi.11.connected*mi.11.connected.t*(MW[3] + MW[7] + MW[12] + MW[16] + MW[21] + MW[25] + MW[30] + MW[34] + MW[39] + MW[43]) ; TripCost
  MW[50] = mi.11.connected*mi.11.connected.t*(MW[4] + MW[8] + MW[13] + MW[17] + MW[22] + MW[26] + MW[31] + MW[35] + MW[40] + MW[44]) ; BridgeToll
  MW[51] = mi.11.connected*mi.11.connected.t*(        MW[9]          + MW[18]          + MW[27]          + MW[36]          + MW[45]) ; ValueToll

  Daily_Trips   = Daily_Trips   + ROWSUM(46)
  TripTime      = TripTime      + ROWSUM(47)
  TripDist      = TripDist      + ROWSUM(48)
  TripCost      = TripCost      + ROWSUM(49)
  Bridge_tolls  = Bridge_tolls  + ROWSUM(50)
  Value_tolls   = Value_tolls   + ROWSUM(51)

  ; "Income,Mode,Daily Person Trips,Daily Vehicle Trips,Person Minutes,Vehicle Minutes,Person Miles,Vehicle Miles,Total Cost"
  if(I = ZONES) PRINT PRINTO=1 CSV=T LIST= "na", "truck", Daily_Trips(10.2L), Daily_Trips(10.2L),
                                                         TripTime(10.2L),   TripTime(10.2L),
                                                         TripDist(10.2L),   TripDist(10.2L),
                                                         TripCost(10.2L),
                                                         "na","na",
                                                         Bridge_tolls(10.2L), Value_tolls(10.2L)
ENDRUN
