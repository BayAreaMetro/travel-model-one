*del metrics\auto_times.csv

; Create auto summary based on trips per day by income quartile and mode of:
; - Average travel time in minutes
; - Average travel distance in miles
; - Average travel cost (auto operating cost, NOT including BRIDGE OR VALUE TOLLS)
; - Total bridge tolls paid (includes cordon tolls)
; - Total value tolls paid
;   by mode and income quartile
;   in year 2000 cents
;

; find no access zones
RUN PGM=MATRIX
  FILEI MATI[1]   = "skims\HWYSKMAM.tpp"
  FILEO RECO[1]   = "skims\unconnected_zones.dbf", FIELDS=ZONE(5.0), UNCONNECTED(3.0)

  MW[1] = MI.1.DISTDA
  IF (ROWMIN(1) == 500000)
    RO.ZONE = I
    RO.UNCONNECTED = 1
    WRITE RECO=1
  ENDIF
ENDRUN

; Convert to has access matrix -- all ones if has access
RUN PGM=MATRIX
  FILEI ZDATI[1] = "skims\unconnected_zones.dbf"
  FILEO MATO[1]  = "skims\connected_zones.tpp", MO=1, NAME=CONNECTED
  ZONES=1475

  MW[1] = 1
  IF (ZI.1.UNCONNECTED=1) MW[1] = 0
ENDRUN


; Loop thru Auto modes
loop auto = 1,15

  if (auto  = 1)
   token_auto   = 'da'
   token_time   = 'TIMEDA'
   token_dist   = 'DISTDA'
   token_btoll  = 'BTOLLDA'
   token_vtoll  = 'TOLLVTOLLDA'
  elseif (auto  = 2)
   token_auto   = 'datoll'
   token_time   = 'TOLLTIMEDA'
   token_dist   = 'TOLLDISTDA'
   token_btoll  = 'TOLLBTOLLDA'
   token_vtoll  = 'TOLLVTOLLDA'
  elseif (auto  = 3)
   token_auto   = 'sr2'
   token_time   = 'TIMES2'
   token_dist   = 'DISTS2'
   token_btoll  = 'BTOLLS2'
   token_vtoll  = 'TOLLVTOLLS2'
  elseif (auto  = 4)
   token_auto   = 'sr2toll'
   token_time   = 'TOLLTIMES2'
   token_dist   = 'TOLLDISTS2'
   token_btoll  = 'TOLLBTOLLS2'
   token_vtoll  = 'TOLLVTOLLS2'
  elseif (auto  = 5)
   token_auto   = 'sr3'
   token_time   = 'TIMES3'
   token_dist   = 'DISTS3'
   token_btoll  = 'BTOLLS3'
   token_vtoll  = 'TOLLVTOLLS3'
  elseif (auto  = 6)
   token_auto   = 'sr3toll'
   token_time   = 'TOLLTIMES3'
   token_dist   = 'TOLLDISTS3'
   token_btoll  = 'TOLLBTOLLS3'
   token_vtoll  = 'TOLLVTOLLS3'
  elseif (auto  = 7)
   token_auto   = 'taxi'
   token_time   = 'TOLLTIMEs2'
   token_dist   = 'TOLLDISTS2'
   token_btoll  = 'TOLLBTOLLS2'
   token_vtoll  = 'TOLLVTOLLS2'
  elseif (auto  = 8)
   token_auto   = 'tnc_single'
   token_time   = 'TOLLTIMES2'
   token_dist   = 'TOLLDISTS2'
   token_btoll  = 'TOLLBTOLLS2'
   token_vtoll  = 'TOLLVTOLLS2'
  elseif (auto  = 9)
   token_auto   = 'tnc_shared'
   token_time   = 'TOLLTIMES3'
   token_dist   = 'TOLLDISTS3'
   token_btoll  = 'TOLLBTOLLS3'
   token_vtoll  = 'TOLLVTOLLS3'
  elseif (auto  = 10)
   token_auto   = 'da_av_notoll'
   token_time   = 'TIMEDA'
   token_dist   = 'DISTDA'
   token_btoll  = 'BTOLLDA'
   token_vtoll  = 'TOLLVTOLLDA'
  elseif (auto  = 11)
   token_auto   = 'da_av_toll'
   token_time   = 'TOLLTIMEDA'
   token_dist   = 'TOLLDISTDA'
   token_btoll  = 'TOLLBTOLLDA'
   token_vtoll  = 'TOLLVTOLLDA'
  elseif (auto  = 12)
   token_auto   = 's2_av_notoll'
   token_time   = 'TIMES2'
   token_dist   = 'DISTS2'
   token_btoll  = 'BTOLLS2'
   token_vtoll  = 'TOLLVTOLLS2'
  elseif (auto  = 13)
   token_auto   = 's2_av_toll'
   token_time   = 'TOLLTIMES2'
   token_dist   = 'TOLLDISTS2'
   token_btoll  = 'TOLLBTOLLS2'
   token_vtoll  = 'TOLLVTOLLS2'
  elseif (auto  = 14)
   token_auto   = 's3_av_notoll'
   token_time   = 'TIMES3'
   token_dist   = 'DISTS3'
   token_btoll  = 'BTOLLS3'
   token_vtoll  = 'TOLLVTOLLS3'
  elseif (auto  = 15)
   token_auto   = 's3_av_toll'
   token_time   = 'TOLLTIMES3'
   token_dist   = 'TOLLDISTS3'
   token_btoll  = 'TOLLBTOLLS3'
   token_vtoll  = 'TOLLVTOLLS3'
  endif

  DistributeMultistep processid = 'ctramp', processNum = auto, commpath = '%COMMPATH%'

    ; Read toll discounts from the block file
    Read File = "CTRAMP\scripts\block\hwyParam.block"

    ; Loop thru time periods
    loop inc = 1,4
    if (inc = 1)  token_inc   = 'inc1'
    if (inc = 2)  token_inc   = 'inc2'
    if (inc = 3)  token_inc   = 'inc3'
    if (inc = 4)  token_inc   = 'inc4'

    vtoll_factor = 1.0
    if (inc = 1)  vtoll_factor = Means_Based_Tolling_Q1Factor
    if (inc = 2)  vtoll_factor = Means_Based_Tolling_Q2Factor
    btoll_factor = 1.0
    if (inc = 1)  btoll_factor = Means_Based_Cordon_Tolling_Q1Factor
    if (inc = 2)  btoll_factor = Means_Based_Cordon_Tolling_Q2Factor

    TripTollCap = 9999.0
    if (inc = 1)  TripTollCap = TripTollCap_Q1 
    if (inc = 2)  TripTollCap = TripTollCap_firstXpercentOfQ2
    ; will need to come back here to differentiate the two subgroups within Q2 using hhldinc_cutoff             

  RUN PGM = MATRIX

  ; Read person trips for an income quartile for all time periods
     FILEI MATI[1] = "main\tripsEA_no_zpv_@token_inc@.tpp"
     FILEI MATI[2] = "main\tripsAM_no_zpv_@token_inc@.tpp"
     FILEI MATI[3] = "main\tripsMD_no_zpv_@token_inc@.tpp"
     FILEI MATI[4] = "main\tripsPM_no_zpv_@token_inc@.tpp"
     FILEI MATI[5] = "main\tripsEV_no_zpv_@token_inc@.tpp"

  ; Read Highway Skims
     FILEI MATI[6] = "skims\HWYSKMEA.tpp"
     FILEI MATI[7] = "skims\HWYSKMAM.tpp"
     FILEI MATI[8] = "skims\HWYSKMMD.tpp"
     FILEI MATI[9] = "skims\HWYSKMPM.tpp"
     FILEI MATI[10]= "skims\HWYSKMEV.tpp"

     FILEI LOOKUPI[1] = taxi_tnc_occ_factors.csv
     FILEI ZDATI[1] = "landuse\tazData.dbf"  ; need cordon and cordon cost information

     ; Specify output file
     FILEO PRINTO[1] = "metrics\auto_times_@token_auto@.csv",APPEND=T      ; Daily output
     FILEO PRINTO[2] = "metrics\auto_times_EA_@token_auto@.csv",APPEND=T   ; EA output
     FILEO PRINTO[3] = "metrics\auto_times_AM_@token_auto@.csv",APPEND=T   ; AM output
     FILEO PRINTO[4] = "metrics\auto_times_MD_@token_auto@.csv",APPEND=T   ; MD output
     FILEO PRINTO[5] = "metrics\auto_times_PM_@token_auto@.csv",APPEND=T   ; PM output
     FILEO PRINTO[6] = "metrics\auto_times_EV_@token_auto@.csv",APPEND=T   ; EV output

    ; load lookup values for factoring taxi and TNC modes
    lookup lookupi=1, LIST=y, name=occ_factors,
      lookup[1]=1, result=2,      ; (occ,taxi)
      lookup[2]=1, result=3,      ; (occ,single_tnc)
      lookup[3]=1, result=4       ; (occ,shared_tnc)

    IF (I=1)
      IF (@auto@==1 || @auto@==2 || @auto@==10 || @auto@==11)
        _occupancy = 1.0
      ELSEIF (@auto@==3 || @auto@==4 || @auto@==12 || @auto@==13)
        _occupancy = 2.0
      ELSEIF (@auto@==5 || @auto@==6 || @auto@==14 || @auto@==15)
        _occupancy = 3.5

      ; calculate the average occupancy
      ; the multiplication factors for s3 is calculated based on MTC's TNC pilot survey conducted in Oct/Nov 2018
      ; the spreadsheet is here: M:\Application\Model One\Mock Futures\TNC occupancy\tnc occupancy.xlsx
      ELSEIF (@auto@==7)
       ; taxi
       _occupancy = occ_factors(1, 1)*1 + occ_factors(1, 2)*2 + occ_factors(1, 3)*3.60
      ELSEIF (@auto@==8)
       ; tnc single
       _occupancy = occ_factors(2, 1)*1 + occ_factors(2, 2)*2 + occ_factors(2, 3)*3.60
      ELSEIF (@auto@==9)
       ; tnc shared
       _occupancy = occ_factors(3, 1)*1 + occ_factors(3, 2)*2 + occ_factors(3, 3)*3.83
      ENDIF
    ENDIF


     ; Trips EA * Skims EA
      MW[1]   =  mi.1.@token_auto@ * mi.6.@token_time@                                   ; Person minutes
      MW[2]   = (mi.1.@token_auto@ * mi.6.@token_time@)/_occupancy                       ; Vehicle minutes
      MW[3]   =  mi.1.@token_auto@ * mi.6.@token_dist@                                   ; Person miles
      MW[4]   = (mi.1.@token_auto@ * mi.6.@token_dist@)/_occupancy                       ; Vehicle miles
      MW[5]   = (mi.1.@token_auto@/_occupancy) * (mi.6.@token_dist@ * @AUTOOPC@)         ; not including tolls
      MW[6]   = (mi.1.@token_auto@/_occupancy) *  mi.6.@token_btoll@                     ; Bridge tolls
      MW[7]   = (mi.1.@token_auto@/_occupancy) *  min(mi.6.@token_vtoll@, @TripTollCap@) * @vtoll_factor@    ; Value tolls (considering discounts)
      MW[8]   = (mi.1.@token_auto@/_occupancy) *  mi.6.@token_vtoll@                     ; Value tolls (without discounts)

     ; Trips AM * Skims AM
      MW[9]   =  mi.2.@token_auto@ * mi.7.@token_time@                                   ; Person minutes
      MW[10]   = (mi.2.@token_auto@ * mi.7.@token_time@)/_occupancy                      ; Vehicle minutes
      MW[11]  =  mi.2.@token_auto@ * mi.7.@token_dist@                                   ; Person miles
      MW[12]  = (mi.2.@token_auto@ * mi.7.@token_dist@)/_occupancy                       ; Vehilce miles
      MW[13]  = (mi.2.@token_auto@/_occupancy) * (mi.7.@token_dist@ * @AUTOOPC@)         ; not including tolls
      ; MW[14] bridge tolls done in jloop below
      MW[15]  = (mi.2.@token_auto@/_occupancy) *  min(mi.7.@token_vtoll@, @TripTollCap@) * @vtoll_factor@    ; Value tolls (considering discounts)
      MW[16]  = (mi.2.@token_auto@/_occupancy) *  mi.7.@token_vtoll@                     ; Value tolls (without discounts)
      ; MW[17] Cordon tolls (considering discounts) done in jloop below
      ; MW[18] Cordon tolls (without discounts) done in jloop below
      jloop
        dest_cordon_cost = zi.1.CORDONCOST[j]
        MW[14] = (mi.2.@token_auto@/_occupancy) * (mi.7.@token_btoll@ - dest_cordon_cost); Bridge tolls (btolls - cordon tolls at full price)
        MW[17] = (mi.2.@token_auto@/_occupancy) * (@btoll_factor@) * dest_cordon_cost    ; Cordon tolls (considering discounts)
        MW[18] = (mi.2.@token_auto@/_occupancy) * dest_cordon_cost                       ; Cordon tolls (without discounts)
      endjloop

      ; Trips MD * Skims MD
      MW[19]  =  mi.3.@token_auto@ * mi.8.@token_time@                                   ; Person minutes
      MW[20]  = (mi.3.@token_auto@ * mi.8.@token_time@)/_occupancy                       ; Vehicle minutes
      MW[21]  =  mi.3.@token_auto@ * mi.8.@token_dist@                                   ; Person miles
      MW[22]  = (mi.3.@token_auto@ * mi.8.@token_dist@)/_occupancy                       ; Vehicle miles
      MW[23]  = (mi.3.@token_auto@/_occupancy) * (mi.8.@token_dist@ * @AUTOOPC@)         ; not including tolls
      MW[24]  = (mi.3.@token_auto@/_occupancy) *  mi.8.@token_btoll@                     ; Bridge tolls
      MW[25]  = (mi.3.@token_auto@/_occupancy) *  min(mi.8.@token_vtoll@, @TripTollCap@) * @vtoll_factor@    ; Value tolls (considering discounts)
      MW[26]  = (mi.3.@token_auto@/_occupancy) *  mi.8.@token_vtoll@                     ; Value tolls (without discounts)

      ; Trips PM * Skims PM
      MW[27]   =  mi.4.@token_auto@ * mi.9.@token_time@                                  ; Person minutes
      MW[28]   = (mi.4.@token_auto@ * mi.9.@token_time@)/_occupancy                      ; Vehicle minutes
      MW[29]   =  mi.4.@token_auto@ * mi.9.@token_dist@                                  ; Person miles
      MW[30]   = (mi.4.@token_auto@ * mi.9.@token_dist@)/_occupancy                      ; Vehicle miles
      MW[31]   = (mi.4.@token_auto@/_occupancy) * (mi.9.@token_dist@ * @AUTOOPC@)        ; not including tolls
      ; MW[32] bridge tolls done in jloop below
      MW[33]   = (mi.4.@token_auto@/_occupancy) *  min(mi.9.@token_vtoll@, @TripTollCap@) * @vtoll_factor@   ; Value tolls (considering discounts)
      MW[34]   = (mi.4.@token_auto@/_occupancy) *  mi.9.@token_vtoll@                    ; Value tolls (without discounts)
      ; MW[35] Cordon tolls (considering discounts) done in jloop below
      ; MW[36] Cordon tolls (without discounts) done in jloop below
      jloop
        dest_cordon_cost = zi.1.CORDONCOST[j]
        MW[32] = (mi.4.@token_auto@/_occupancy) * (mi.9.@token_btoll@ - dest_cordon_cost); Bridge tolls (btolls - cordon tolls at full price)
        MW[35] = (mi.4.@token_auto@/_occupancy) * (@btoll_factor@) * dest_cordon_cost    ; Cordon tolls (considering discounts)
        MW[36] = (mi.4.@token_auto@/_occupancy) * dest_cordon_cost                       ; Cordon tolls (without discounts)
      endjloop

      ; Trips EV * Skims EV
      MW[37]   =  mi.5.@token_auto@ * mi.10.@token_time@                                 ; Person minutes
      MW[38]   = (mi.5.@token_auto@ * mi.10.@token_time@)/_occupancy                     ; Vehicle minutes
      MW[39]   =  mi.5.@token_auto@ * mi.10.@token_dist@                                 ; Person miles
      MW[40]   = (mi.5.@token_auto@ * mi.10.@token_dist@)/_occupancy                     ; Vehicle miles
      MW[41]   = (mi.5.@token_auto@/_occupancy) * (mi.10.@token_dist@ * @AUTOOPC@)       ; not including tolls
      MW[42]   = (mi.5.@token_auto@/_occupancy) *  mi.10.@token_btoll@                   ; Bridge tolls
      MW[43]   = (mi.5.@token_auto@/_occupancy) *  min(mi.10.@token_vtoll@, @TripTollCap@) * @vtoll_factor@  ; Value tolls (considering discounts)
      MW[44]   = (mi.5.@token_auto@/_occupancy) *  mi.10.@token_vtoll@                   ; Value tolls (without discounts)

     ; Compute Daily Person Trips, Daily Vehicle Trips, PersonTime, VehicleTime, PersonMiles, VehicleMiles, TotalCost, Bridge Tolls, Value Tolls
     MW[45] =  mi.1.@token_auto@ + mi.2.@token_auto@ + mi.3.@token_auto@ + mi.4.@token_auto@ +mi.5.@token_auto@              ; Daily Person Trips
     MW[46] = (mi.1.@token_auto@ + mi.2.@token_auto@ + mi.3.@token_auto@ + mi.4.@token_auto@ +mi.5.@token_auto@)/_occupancy  ; Daily Vehicle Trips
     MW[47] = MW[1] + MW[9]  + MW[19] + MW[27] + MW[37]   ; Person minutes
     MW[48] = MW[2] + MW[10] + MW[20] + MW[28] + MW[38]   ; Vehicle minutes
     MW[49] = MW[3] + MW[11] + MW[21] + MW[29] + MW[39]   ; Person miles
     MW[50] = MW[4] + MW[12] + MW[22] + MW[30] + MW[40]   ; Vehicle miles
     MW[51] = MW[5] + MW[13] + MW[23] + MW[31] + MW[41]   ; Trip Cost
     MW[52] = MW[6] + MW[14] + MW[24] + MW[32] + MW[42]   ; Bridge Tolls
     MW[53] = MW[7] + MW[15] + MW[25] + MW[33] + MW[43]   ; Value Tolls  (considering discounts)
     MW[54] = MW[8] + MW[16] + MW[26] + MW[34] + MW[44]   ; Value Tolls  (without discounts)
     MW[55] =         MW[17] +          MW[35]            ; Cordon tolls (considering discounts)
     MW[56] =         MW[18] +          MW[36]            ; Cordon tolls (without discounts)


     ; count value tolls for toll options, including taxi and tnc
     IF (@auto@==2 || @auto@==4 || @auto@==6 || @auto@==7 || @auto@==8 || @auto@==9 || @auto@==11 || @auto@==13 || @auto@==15)
       ; count non-zero paths in the AM
       MW[57] = mi.7.@token_vtoll@
       MW[58] = mi.8.@token_vtoll@
       _vtoll_am_nonzero = _vtoll_am_nonzero  + ROWCNT(57)
       _vtoll_md_nonzero = _vtoll_md_nonzero  + ROWCNT(58)

       ; only for tolls
       Value_tolls_w_discount       = Value_tolls_w_discount    + ROWSUM(53)
       Value_tolls_no_discount       = Value_tolls_no_discount  + ROWSUM(54)
     else
       _vtoll_am_nonzero = 0
       _vtoll_md_nonzero = 0
       Value_tolls_w_discount  = 0
       Value_tolls_no_discount = 0
     ENDIF

      Person_trips  = Person_trips  + ROWSUM(45)
      Vehicle_trips = Vehicle_trips + ROWSUM(46)
      Person_min    = Person_min    + ROWSUM(47)
      Vehicle_min   = Vehicle_min   + ROWSUM(48)
      Person_miles  = Person_miles  + ROWSUM(49)
      Vehicle_miles = Vehicle_miles + ROWSUM(50)
      Total_cost    = Total_cost    + ROWSUM(51)
      Bridge_tolls  = Bridge_tolls  + ROWSUM(52)
      Cordon_tolls_w_discount  = Cordon_tolls_w_discount  + ROWSUM(55)
      Cordon_tolls_no_discount = Cordon_tolls_no_discount + ROWSUM(56)

     ; Compute each time period's Person Trips, Daily Vehicle Trips, PersonTime, VehicleTime, PersonMiles, VehicleMiles, TotalCost, Bridge Tolls, Value Tolls
     ; EA
     MW[57] =  mi.1.@token_auto@                          ; EA Person Trips
     MW[58] = (mi.1.@token_auto@)/_occupancy              ; EA Vehicle Trips
     MW[59] = MW[1]                                       ; EA Person minutes
     MW[60] = MW[2]                                       ; EA Vehicle minutes
     MW[61] = MW[3]                                       ; EA Person miles
     MW[62] = MW[4]                                       ; EA Vehicle miles
     MW[63] = MW[5]                                       ; EA Trip Cost
     MW[64] = MW[6]                                       ; EA Bridge Tolls
     MW[65] = MW[7]                                       ; EA Value Tolls  (considering discounts)
     MW[66] = MW[8]                                       ; EA Value Tolls  (without discounts)
     MW[67] = 0                                           ; EA doesn't have Cordon tolls (considering discounts)
     MW[68] = 0                                           ; EA doesn't have Cordon tolls (without discounts)
     
     ; EA: count value tolls for toll options, including taxi and tnc
     IF (@auto@==2 || @auto@==4 || @auto@==6 || @auto@==7 || @auto@==8 || @auto@==9 || @auto@==11 || @auto@==13 || @auto@==15)
       ; EA doesn't count non-zero paths in the AM
       _vtoll_am_nonzero = 0
       _vtoll_md_nonzero = 0

       ; only for EA tolls
       Value_tolls_w_discount_EA        = Value_tolls_w_discount_EA    + ROWSUM(65)
       Value_tolls_no_discount_EA       = Value_tolls_no_discount_EA   + ROWSUM(66)
     else
       _vtoll_am_nonzero = 0
       _vtoll_md_nonzero = 0     
       Value_tolls_w_discount_EA  = 0
       Value_tolls_no_discount_EA = 0
     ENDIF

      Person_trips_EA  = Person_trips_EA  + ROWSUM(57)
      Vehicle_trips_EA = Vehicle_trips_EA + ROWSUM(58)
      Person_min_EA    = Person_min_EA    + ROWSUM(59)
      Vehicle_min_EA   = Vehicle_min_EA   + ROWSUM(60)
      Person_miles_EA  = Person_miles_EA  + ROWSUM(61)
      Vehicle_miles_EA = Vehicle_miles_EA + ROWSUM(62)
      Total_cost_EA    = Total_cost_EA    + ROWSUM(63)
      Bridge_tolls_EA  = Bridge_tolls_EA  + ROWSUM(64)
      Cordon_tolls_w_discount_EA  = Cordon_tolls_w_discount_EA  + ROWSUM(67)
      Cordon_tolls_no_discount_EA = Cordon_tolls_no_discount_EA + ROWSUM(68)

     ; AM
     MW[69] =  mi.2.@token_auto@               ; Daily Person Trips
     MW[70] = (mi.2.@token_auto@ )/_occupancy  ; Daily Vehicle Trips
     MW[71] = MW[9]                            ; Person minutes
     MW[72] = MW[10]   ; Vehicle minutes
     MW[73] = MW[11]   ; Person miles
     MW[74] = MW[12]   ; Vehicle miles
     MW[75] = MW[13]   ; Trip Cost
     MW[76] = MW[14]   ; Bridge Tolls
     MW[77] = MW[15]   ; Value Tolls  (considering discounts)
     MW[78] = MW[16]   ; Value Tolls  (without discounts)
     MW[79] = MW[17]   ; Cordon tolls (considering discounts)
     MW[80] = MW[18]   ; Cordon tolls (without discounts)
     
     ; AM: count value tolls for toll options, including taxi and tnc
     IF (@auto@==2 || @auto@==4 || @auto@==6 || @auto@==7 || @auto@==8 || @auto@==9 || @auto@==11 || @auto@==13 || @auto@==15)
       ; count non-zero paths in the AM
       MW[81] = mi.7.@token_vtoll@
       _vtoll_am_nonzero = _vtoll_am_nonzero  + ROWCNT(81)
       _vtoll_md_nonzero = 0

       ; only for tolls
       Value_tolls_w_discount_AM       = Value_tolls_w_discount_AM    + ROWSUM(77)
       Value_tolls_no_discount_AM       = Value_tolls_no_discount_AM  + ROWSUM(78)
     else
       _vtoll_am_nonzero = 0
       _vtoll_md_nonzero = 0
       Value_tolls_w_discount  = 0
       Value_tolls_no_discount = 0
     ENDIF

      Person_trips_AM  = Person_trips_AM  + ROWSUM(69)
      Vehicle_trips_AM = Vehicle_trips_AM + ROWSUM(70)
      Person_min_AM    = Person_min_AM    + ROWSUM(71)
      Vehicle_min_AM   = Vehicle_min_AM   + ROWSUM(72)
      Person_miles_AM  = Person_miles_AM  + ROWSUM(73)
      Vehicle_miles_AM = Vehicle_miles_AM + ROWSUM(74)
      Total_cost_AM    = Total_cost_AM    + ROWSUM(75)
      Bridge_tolls_AM  = Bridge_tolls_AM  + ROWSUM(76)
      Cordon_tolls_w_discount_AM  = Cordon_tolls_w_discount_AM  + ROWSUM(79)
      Cordon_tolls_no_discount_AM = Cordon_tolls_no_discount_AM + ROWSUM(80)

     ; MD
     MW[81] =  mi.3.@token_auto@               ; Daily Person Trips
     MW[82] = (mi.3.@token_auto@)/_occupancy  ; Daily Vehicle Trips
     MW[83] = MW[19]   ; Person minutes
     MW[84] = MW[20]   ; Vehicle minutes
     MW[85] = MW[21]   ; Person miles
     MW[86] = MW[22]   ; Vehicle miles
     MW[87] = MW[23]   ; Trip Cost
     MW[88] = MW[24]   ; Bridge Tolls
     MW[89] = MW[25]   ; Value Tolls  (considering discounts)
     MW[90] = MW[26]   ; Value Tolls  (without discounts)
     MW[91] = 0        ; Cordon tolls (considering discounts)
     MW[92] = 0        ; Cordon tolls (without discounts)


     ; MD: count value tolls for toll options, including taxi and tnc
     IF (@auto@==2 || @auto@==4 || @auto@==6 || @auto@==7 || @auto@==8 || @auto@==9 || @auto@==11 || @auto@==13 || @auto@==15)
       ; count non-zero paths in the AM
       MW[93] = mi.8.@token_vtoll@
       _vtoll_am_nonzero = 0
       _vtoll_md_nonzero = _vtoll_md_nonzero  + ROWCNT(93)

       ; only for tolls
       Value_tolls_w_discount_MD       = Value_tolls_w_discount_MD    + ROWSUM(89)
       Value_tolls_no_discount_MD       = Value_tolls_no_discount_MD  + ROWSUM(90)
     else
       _vtoll_am_nonzero = 0
       _vtoll_md_nonzero = 0
       Value_tolls_w_discount  = 0
       Value_tolls_no_discount = 0
     ENDIF

      Person_trips_MD  = Person_trips_MD  + ROWSUM(81)
      Vehicle_trips_MD = Vehicle_trips_MD + ROWSUM(82)
      Person_min_MD    = Person_min_MD    + ROWSUM(83)
      Vehicle_min_MD   = Vehicle_min_MD   + ROWSUM(84)
      Person_miles_MD  = Person_miles_MD  + ROWSUM(85)
      Vehicle_miles_MD = Vehicle_miles_MD + ROWSUM(86)
      Total_cost_MD    = Total_cost_MD    + ROWSUM(87)
      Bridge_tolls_MD  = Bridge_tolls_MD  + ROWSUM(88)
      Cordon_tolls_w_discount_MD  = Cordon_tolls_w_discount_MD  + ROWSUM(91)
      Cordon_tolls_no_discount_MD = Cordon_tolls_no_discount_MD + ROWSUM(92)

     ; PM
     MW[93]  =  mi.4.@token_auto@               ; Daily Person Trips
     MW[94]  = (mi.4.@token_auto@)/_occupancy   ; Daily Vehicle Trips
     MW[95]  = MW[27]   ; Person minutes
     MW[96]  = MW[28]   ; Vehicle minutes
     MW[97]  = MW[29]   ; Person miles
     MW[98]  = MW[30]   ; Vehicle miles
     MW[99]  = MW[31]   ; Trip Cost
     MW[100] = MW[32]   ; Bridge Tolls
     MW[101] = MW[33]   ; Value Tolls  (considering discounts)
     MW[102] = MW[34]   ; Value Tolls  (without discounts)
     MW[103] = MW[35]   ; Cordon tolls (considering discounts)
     MW[104] = MW[36]   ; Cordon tolls (without discounts)


     ; count value tolls for toll options, including taxi and tnc
     IF (@auto@==2 || @auto@==4 || @auto@==6 || @auto@==7 || @auto@==8 || @auto@==9 || @auto@==11 || @auto@==13 || @auto@==15)
       ; count non-zero paths in the AM
       _vtoll_am_nonzero = 0
       _vtoll_md_nonzero = 0

       ; only for tolls
       Value_tolls_w_discount_PM       = Value_tolls_w_discount_PM    + ROWSUM(101)
       Value_tolls_no_discount_PM       = Value_tolls_no_discount_PM  + ROWSUM(102)
     else
       _vtoll_am_nonzero = 0
       _vtoll_md_nonzero = 0
       Value_tolls_w_discount  = 0
       Value_tolls_no_discount = 0
     ENDIF

      Person_trips_PM  = Person_trips_PM  + ROWSUM(93)
      Vehicle_trips_PM = Vehicle_trips_PM + ROWSUM(94)
      Person_min_PM    = Person_min_PM    + ROWSUM(95)
      Vehicle_min_PM   = Vehicle_min_PM   + ROWSUM(96)
      Person_miles_PM  = Person_miles_PM  + ROWSUM(97)
      Vehicle_miles_PM = Vehicle_miles_PM + ROWSUM(98)
      Total_cost_PM    = Total_cost_PM   + ROWSUM(99)
      Bridge_tolls_PM  = Bridge_tolls_PM  + ROWSUM(100)
      Cordon_tolls_w_discount_PM  = Cordon_tolls_w_discount_PM  + ROWSUM(103)
      Cordon_tolls_no_discount_PM = Cordon_tolls_no_discount_PM + ROWSUM(104)

     ; EV
     MW[105] =  mi.5.@token_auto@              ; Daily Person Trips
     MW[106] = (mi.5.@token_auto@)/_occupancy  ; Daily Vehicle Trips
     MW[107] = MW[37]   ; Person minutes
     MW[108] = MW[38]   ; Vehicle minutes
     MW[109] = MW[39]   ; Person miles
     MW[110] = MW[40]   ; Vehicle miles
     MW[111] = MW[41]   ; Trip Cost
     MW[112] = MW[42]   ; Bridge Tolls
     MW[113] = MW[43]   ; Value Tolls  (considering discounts)
     MW[114] = MW[44]   ; Value Tolls  (without discounts)
     MW[115] = 0            ; Cordon tolls (considering discounts)
     MW[116] = 0            ; Cordon tolls (without discounts)


     ; EV: count value tolls for toll options, including taxi and tnc
     IF (@auto@==2 || @auto@==4 || @auto@==6 || @auto@==7 || @auto@==8 || @auto@==9 || @auto@==11 || @auto@==13 || @auto@==15)
       ; count non-zero paths in the AM
       _vtoll_am_nonzero = 0
       _vtoll_md_nonzero = 0

       ; only for tolls
       Value_tolls_w_discount_EV       = Value_tolls_w_discount_EV    + ROWSUM(113)
       Value_tolls_no_discount_EV       = Value_tolls_no_discount_EV  + ROWSUM(114)
     else
       _vtoll_am_nonzero = 0
       _vtoll_md_nonzero = 0
       Value_tolls_w_discount  = 0
       Value_tolls_no_discount = 0
     ENDIF

      Person_trips_EV  = Person_trips_EV  + ROWSUM(105)
      Vehicle_trips_EV = Vehicle_trips_EV + ROWSUM(106)
      Person_min_EV    = Person_min_EV    + ROWSUM(107)
      Vehicle_min_EV   = Vehicle_min_EV   + ROWSUM(108)
      Person_miles_EV  = Person_miles_EV  + ROWSUM(109)
      Vehicle_miles_EV = Vehicle_miles_EV + ROWSUM(110)
      Total_cost_EV    = Total_cost_EV    + ROWSUM(111)
      Bridge_tolls_EV  = Bridge_tolls_EV  + ROWSUM(112)
      Cordon_tolls_w_discount_EV  = Cordon_tolls_w_discount_EV  + ROWSUM(115)
      Cordon_tolls_no_discount_EV = Cordon_tolls_no_discount_EV + ROWSUM(116)

      Mode   = '@token_auto@'
      Income = '@token_inc@'


      Mode   = '@token_auto@'
      Income = '@token_inc@'
      ; Daily results
      if(I = 1 & @inc@=1 & @auto@ = 1) PRINT PRINTO=1 LIST="Income,Mode,Person Trips,Vehicle Trips,Person Minutes,Vehicle Minutes,Person Miles,Vehicle Miles,Total Cost,VTOLL nonzero AM,VTOLL nonzero MD,Bridge Tolls,Value Tolls with discount, Value Tolls without discount,Cordon tolls with discount,Cordon tolls without discount"
      if(I = ZONES) PRINT PRINTO=1 CSV=T LIST= Income, Mode, Person_trips(10.2L), Vehicle_trips(10.2L),
                                                            Person_min(10.2L),   Vehicle_min(10.2L),
                                                            Person_miles(10.2L), Vehicle_miles(10.2L),
                                                            Total_cost(10.2L),
                                                            _vtoll_am_nonzero(10L), _vtoll_md_nonzero(10L),
                                                            Bridge_tolls(10.2L), Value_tolls_w_discount(10.2L), Value_tolls_no_discount(10.2L),
                                                            Cordon_tolls_w_discount(10.2L), Cordon_tolls_no_discount(10.2L)
      ; Time period results
      Period = 'EA'
      if(I = 1 & @inc@=1 & @auto@ = 1) PRINT PRINTO=2 LIST="Period, Income,Mode,Person Trips,Vehicle Trips,Person Minutes,Vehicle Minutes,Person Miles,Vehicle Miles,Total Cost,VTOLL nonzero AM,VTOLL nonzero MD,Bridge Tolls,Value Tolls with discount, Value Tolls without discount,Cordon tolls with discount,Cordon tolls without discount"
      if(I = ZONES) PRINT PRINTO=2 CSV=T LIST= Period, Income, Mode, Person_trips_EA(10.2L), Vehicle_trips_EA(10.2L),
                                                            Person_min_EA(10.2L),   Vehicle_min_EA(10.2L),
                                                            Person_miles_EA(10.2L), Vehicle_miles_EA(10.2L),
                                                            Total_cost_EA(10.2L),
                                                            _vtoll_am_nonzero(10L), _vtoll_md_nonzero(10L),
                                                            Bridge_tolls_EA(10.2L), Value_tolls_w_discount_EA(10.2L), Value_tolls_no_discount_EA(10.2L),
                                                            Cordon_tolls_w_discount_EA(10.2L), Cordon_tolls_no_discount_EA(10.2L)     

      Period = 'AM'
      ; if(I = 1 & @inc@=1 & @auto@ = 1) PRINT PRINTO=3 LIST="Period, Income,Mode, Person Trips, Vehicle Trips,Person Minutes,Vehicle Minutes,Person Miles,Vehicle Miles,Total Cost,VTOLL nonzero AM,VTOLL nonzero MD,Bridge Tolls,Value Tolls with discount, Value Tolls without discount,Cordon tolls with discount,Cordon tolls without discount"
      if(I = ZONES) PRINT PRINTO=3 CSV=T LIST= Period, Income, Mode, Person_trips_AM(10.2L), Vehicle_trips_AM(10.2L),
                                                            Person_min_AM(10.2L),   Vehicle_min_AM(10.2L),
                                                            Person_miles_AM(10.2L), Vehicle_miles_AM(10.2L),
                                                            Total_cost_AM(10.2L),
                                                            _vtoll_am_nonzero(10L), _vtoll_md_nonzero(10L),
                                                            Bridge_tolls_AM(10.2L), Value_tolls_w_discount_AM(10.2L), Value_tolls_no_discount_AM(10.2L),
                                                            Cordon_tolls_w_discount_AM(10.2L), Cordon_tolls_no_discount_AM(10.2L)        

      Period = 'MD'
      ; if(I = 1 & @inc@=1 & @auto@ = 1) PRINT PRINTO=4 LIST="Period, Income,Mode, Person Trips, Vehicle Trips,Person Minutes,Vehicle Minutes,Person Miles,Vehicle Miles,Total Cost,VTOLL nonzero AM,VTOLL nonzero MD,Bridge Tolls,Value Tolls with discount, Value Tolls without discount,Cordon tolls with discount,Cordon tolls without discount"
      if(I = ZONES) PRINT PRINTO=4 CSV=T LIST= Period, Income, Mode, Person_trips_MD(10.2L), Vehicle_trips_MD(10.2L),
                                                            Person_min_MD(10.2L),   Vehicle_min_MD(10.2L),
                                                            Person_miles_MD(10.2L), Vehicle_miles_MD(10.2L),
                                                            Total_cost_MD(10.2L),
                                                            _vtoll_am_nonzero(10L), _vtoll_md_nonzero(10L),
                                                            Bridge_tolls_MD(10.2L), Value_tolls_w_discount_MD(10.2L), Value_tolls_no_discount_MD(10.2L),
                                                            Cordon_tolls_w_discount_MD(10.2L), Cordon_tolls_no_discount_MD(10.2L)

      Period = 'PM'
      ; if(I = 1 & @inc@=1 & @auto@ = 1) PRINT PRINTO=5 LIST="Period, Income,Mode, Person Trips, Vehicle Trips,Person Minutes,Vehicle Minutes,Person Miles,Vehicle Miles,Total Cost,VTOLL nonzero AM,VTOLL nonzero MD,Bridge Tolls,Value Tolls with discount, Value Tolls without discount,Cordon tolls with discount,Cordon tolls without discount"
      if(I = ZONES) PRINT PRINTO=5 CSV=T LIST= Period, Income, Mode, Person_trips_PM(10.2L), Vehicle_trips_PM(10.2L),
                                                            Person_min_PM(10.2L),   Vehicle_min_PM(10.2L),
                                                            Person_miles_PM(10.2L), Vehicle_miles_PM(10.2L),
                                                            Total_cost_PM(10.2L),
                                                            _vtoll_am_nonzero(10L), _vtoll_md_nonzero(10L),
                                                            Bridge_tolls_PM(10.2L), Value_tolls_w_discount_PM(10.2L), Value_tolls_no_discount_PM(10.2L),
                                                            Cordon_tolls_w_discount_PM(10.2L), Cordon_tolls_no_discount_PM(10.2L)      

      Period = 'EV'
      ; if(I = 1 & @inc@=1 & @auto@ = 1) PRINT PRINTO=6 LIST="Period, Income,Mode, Person Trips, Vehicle Trips,Person Minutes,Vehicle Minutes,Person Miles,Vehicle Miles,Total Cost,VTOLL nonzero AM,VTOLL nonzero MD,Bridge Tolls,Value Tolls with discount, Value Tolls without discount,Cordon tolls with discount,Cordon tolls without discount"
      if(I = ZONES) PRINT PRINTO=6 CSV=T LIST= Period, Income, Mode, Person_trips_EV(10.2L), Vehicle_trips_EV(10.2L),
                                                            Person_min_EV(10.2L),   Vehicle_min_EV(10.2L),
                                                            Person_miles_EV(10.2L), Vehicle_miles_EV(10.2L),
                                                            Total_cost_EV(10.2L),
                                                            _vtoll_am_nonzero(10L), _vtoll_md_nonzero(10L),
                                                            Bridge_tolls_EV(10.2L), Value_tolls_w_discount_EV(10.2L), Value_tolls_no_discount_EV(10.2L),
                                                            Cordon_tolls_w_discount_EV(10.2L), Cordon_tolls_no_discount_EV(10.2L)                                                                                                                                                                                                                                                                                               
    ENDRUN

    ; owned zpv by income
    IF (auto=11) ; da_av_toll
      RUN PGM = MATRIX
        ; Read person trips for an income quartile for all time periods
        FILEI MATI[1] = "main\tripsEA_zpv_@token_inc@.tpp"
        FILEI MATI[2] = "main\tripsAM_zpv_@token_inc@.tpp"
        FILEI MATI[3] = "main\tripsMD_zpv_@token_inc@.tpp"
        FILEI MATI[4] = "main\tripsPM_zpv_@token_inc@.tpp"
        FILEI MATI[5] = "main\tripsEV_zpv_@token_inc@.tpp"

        ; Read Highway Skims
        FILEI MATI[6] = "skims\HWYSKMEA.tpp"
        FILEI MATI[7] = "skims\HWYSKMAM.tpp"
        FILEI MATI[8] = "skims\HWYSKMMD.tpp"
        FILEI MATI[9] = "skims\HWYSKMPM.tpp"
        FILEI MATI[10]= "skims\HWYSKMEV.tpp"

        FILEI ZDATI[1] = "landuse\tazData.dbf"  ; need cordon and cordon cost information

        ; Specify output file
        FILEO PRINTO[1] = "metrics\auto_times_zpv_av.csv",APPEND=T            ; Daily output
        FILEO PRINTO[2] = "metrics\auto_times_EA_zpv_av.csv",APPEND=T         ; EA output
        FILEO PRINTO[3] = "metrics\auto_times_AM_zpv_av.csv",APPEND=T         ; AM output
        FILEO PRINTO[4] = "metrics\auto_times_MD_zpv_av.csv",APPEND=T         ; MD output
        FILEO PRINTO[5] = "metrics\auto_times_PM_zpv_av.csv",APPEND=T         ; PM output
        FILEO PRINTO[6] = "metrics\auto_times_EV_zpv_av.csv",APPEND=T         ; EV output

        ; Trips EA * Skims EA
        MW[ 1] =  0                                             ; Person minutes
        MW[ 2] =  mi.1.zpv_av * mi.6.@token_time@               ; Vehicle minutes
        MW[ 3] =  0                                             ; Person miles
        MW[ 4] =  mi.1.zpv_av * mi.6.@token_dist@               ; Vehicle miles
        MW[ 5] =  mi.1.zpv_av * (mi.6.@token_dist@ * @AUTOOPC@) ; not including tolls
        MW[ 6] =  mi.1.zpv_av *  mi.6.@token_btoll@             ; Bridge tolls
        MW[ 7] =  mi.1.zpv_av *  mi.6.@token_vtoll@             ; Value tolls

        ; Trips AM * Skims AM
        MW[ 8]   =  0                                             ; Person minutes
        MW[ 9]   =  mi.2.zpv_av * mi.7.@token_time@               ; Vehicle minutes
        MW[10]   =  0                                             ; Person miles
        MW[11]   =  mi.2.zpv_av * mi.7.@token_dist@               ; Vehicle miles
        MW[12]   =  mi.2.zpv_av * (mi.7.@token_dist@ * @AUTOOPC@) ; not including tolls
        ; MW[13] bridge tolls done in jloop below
        MW[14]   =  mi.2.zpv_av *  mi.7.@token_vtoll@             ; Value tolls
        ; MW[15] Cordon tolls (considering discounts) done in jloop below
        ; MW[16] Cordon tolls (without discounts) done in jloop below
        jloop
          dest_cordon_cost = zi.1.CORDONCOST[j]
          MW[13] = mi.2.zpv_av * (mi.7.@token_btoll@ - dest_cordon_cost)  ; Bridge tolls (btolls - cordon tolls at full price)
          MW[15] = mi.2.zpv_av * dest_cordon_cost                         ; Cordon tolls (considering discounts, no discounts for zpv)
          MW[16] = mi.2.zpv_av * dest_cordon_cost                         ; Cordon tolls (without discounts, no discounts for zpv)
        endjloop

        ; Trips MD * Skims MD
        MW[17]   =  0                                             ; Person minutes
        MW[18]   =  mi.3.zpv_av * mi.8.@token_time@               ; Vehicle minutes
        MW[19]   =  0                                             ; Person miles
        MW[20]   =  mi.3.zpv_av * mi.8.@token_dist@               ; Vehicle miles
        MW[21]   =  mi.3.zpv_av * (mi.8.@token_dist@ * @AUTOOPC@) ; not including tolls
        MW[22]   =  mi.3.zpv_av *  mi.8.@token_btoll@             ; Bridge tolls
        MW[23]   =  mi.3.zpv_av *  mi.8.@token_vtoll@             ; Value tolls

        ; Trips PM * Skims PM
        MW[24]   =  0                                             ; Person minutes
        MW[25]   =  mi.4.zpv_av * mi.9.@token_time@               ; Vehicle minutes
        MW[26]   =  0                                             ; Person miles
        MW[27]   =  mi.4.zpv_av * mi.9.@token_dist@               ; Vehicle miles
        MW[28]   =  mi.4.zpv_av * (mi.9.@token_dist@ * @AUTOOPC@) ; not including tolls
        ; MW[29] bridge tolls done in jloop below
        MW[30]   =  mi.4.zpv_av *  mi.9.@token_vtoll@             ; Value tolls
        ; MW[31] Cordon tolls (considering discounts) done in jloop below
        ; MW[32] Cordon tolls (without discounts) done in jloop below
        jloop
          dest_cordon_cost = zi.1.CORDONCOST[j]
          MW[29] = mi.4.zpv_av * (mi.9.@token_btoll@ - dest_cordon_cost); Bridge tolls (btolls - cordon tolls at full price)
          MW[31] = mi.4.zpv_av * dest_cordon_cost                       ; Cordon tolls (considering discounts, no discounts for zpv)
          MW[32] = mi.4.zpv_av * dest_cordon_cost                       ; Cordon tolls (without discounts, no discounts for zpv)
        endjloop

        ; Trips EV * Skims EV
        MW[33]   =  0                                              ; Person minutes
        MW[34]   =  mi.5.zpv_av * mi.10.@token_time@               ; Vehicle minutes
        MW[35]   =  0                                              ; Person miles
        MW[36]   =  mi.5.zpv_av * mi.10.@token_dist@               ; Vehicle miles
        MW[37]   =  mi.5.zpv_av * (mi.10.@token_dist@ * @AUTOOPC@) ; not including tolls
        MW[38]   =  mi.5.zpv_av *  mi.10.@token_btoll@             ; Bridge tolls
        MW[39]   =  mi.5.zpv_av *  mi.10.@token_vtoll@             ; Value tolls

       ; Compute Daily Person Trips, Daily Vehicle Trips, PersonTime, VehicleTime, PersonMiles, VehicleMiles, TotalCost, Bridge Tolls,   Value Tolls
       MW[40] = 0                                                    ; Person Trips
       MW[41] = mi.1.zpv_av + mi.2.zpv_av + mi.3.zpv_av + mi.4.zpv_av + mi.5.zpv_av  ; Vehicle Trips
       MW[42] = MW[1] + MW[8]  + MW[17] + MW[24] + MW[33]   ; Person minutes
       MW[43] = MW[2] + MW[9]  + MW[18] + MW[25] + MW[34]   ; Vehicle minutes
       MW[44] = MW[3] + MW[10] + MW[19] + MW[26] + MW[35]   ; Person miles
       MW[45] = MW[4] + MW[11] + MW[20] + MW[27] + MW[36]   ; Vehicle miles
       MW[46] = MW[5] + MW[12] + MW[21] + MW[28] + MW[37]   ; Trip Cost
       MW[47] = MW[6] + MW[13] + MW[22] + MW[29] + MW[38]   ; Bridge Tolls
       MW[48] = MW[7] + MW[14] + MW[23] + MW[30] + MW[39]   ; Value Tolls
       MW[49] =         MW[15]      +     MW[31]            ; Cordon tolls (considering discounts)
       MW[50] =         MW[16] +          MW[32]            ; Cordon tolls (without discounts)

      Person_trips  = Person_trips  + ROWSUM(40)
      Vehicle_trips = Vehicle_trips + ROWSUM(41)
      Person_min    = Person_min    + ROWSUM(42)
      Vehicle_min   = Vehicle_min   + ROWSUM(43)
      Person_miles  = Person_miles  + ROWSUM(44)
      Vehicle_miles = Vehicle_miles + ROWSUM(45)
      Total_cost    = Total_cost    + ROWSUM(46)
      Bridge_tolls  = Bridge_tolls  + ROWSUM(47)
      ; assuming deadheading AVs pay tolls
      Value_tolls_w_discount   = Value_tolls_w_discount   + ROWSUM(48)
      Value_tolls_no_discount  = Value_tolls_no_discount  + ROWSUM(48)
      Cordon_tolls_w_discount  = Cordon_tolls_w_discount  + ROWSUM(49)
      Cordon_tolls_no_discount = Cordon_tolls_no_discount + ROWSUM(50)

       ; Compute each time period's Person Trips, Daily Vehicle Trips, PersonTime, VehicleTime, PersonMiles, VehicleMiles, TotalCost, Bridge Tolls,   Value Tolls
       ; EA
       MW[51] = 0                                           ; Person Trips
       MW[52] = mi.1.zpv_av                                 ; EA Vehicle Trips
       MW[53] = MW[1]                                       ; EA Person minutes
       MW[54] = MW[2]                                       ; EA Vehicle minutes
       MW[55] = MW[3]                                       ; EA Person miles
       MW[56] = MW[4]                                       ; EA Vehicle miles
       MW[57] = MW[5]                                       ; EA Trip Cost
       MW[58] = MW[6]                                       ; EA Bridge Tolls
       MW[59] = MW[7]                                       ; EA Value Tolls
       MW[60] = 0                                           ; EA doesn't have Cordon tolls (considering discounts)
       MW[61] = 0                                           ; EA doesn't have Cordon tolls (without discounts)

      Person_trips_EA  = Person_trips_EA  + ROWSUM(51)
      Vehicle_trips_EA = Vehicle_trips_EA + ROWSUM(52)
      Person_min_EA    = Person_min_EA    + ROWSUM(53)
      Vehicle_min_EA   = Vehicle_min_EA   + ROWSUM(54)
      Person_miles_EA  = Person_miles_EA  + ROWSUM(55)
      Vehicle_miles_EA = Vehicle_miles_EA + ROWSUM(56)
      Total_cost_EA    = Total_cost_EA    + ROWSUM(57)
      Bridge_tolls_EA  = Bridge_tolls_EA  + ROWSUM(58)
      ; assuming deadheading AVs pay tolls
      Value_tolls_w_discount_EA   = Value_tolls_w_discount_EA   + ROWSUM(59)
      Value_tolls_no_discount_EA  = Value_tolls_no_discount_EA  + ROWSUM(59)
      Cordon_tolls_w_discount_EA  = Cordon_tolls_w_discount_EA  + ROWSUM(60)
      Cordon_tolls_no_discount_EA = Cordon_tolls_no_discount_EA + ROWSUM(61)
      ; assuming value tolls for deadheading AV

       ; AM
       MW[62] = 0                                           ; Person Trips
       MW[63] = mi.2.zpv_av                                 ; Vehicle Trips
       MW[64] = MW[8]                                       ; Person minutes
       MW[65] = MW[9]                                       ; Vehicle minutes
       MW[66] = MW[10]                                      ; Person miles
       MW[67] = MW[11]                                      ; Vehicle miles
       MW[68] = MW[12]                                      ; Trip Cost
       MW[69] = MW[13]                                      ; Bridge Tolls
       MW[70] = MW[14]                                      ; Value Tolls
       MW[71] = MW[15]                                      ; Cordon tolls (considering discounts)
       MW[72] = MW[16]                                      ; Cordon tolls (without discounts)

      Person_trips_AM  = Person_trips_AM  + ROWSUM(62)
      Vehicle_trips_AM = Vehicle_trips_AM + ROWSUM(63)
      Person_min_AM    = Person_min_AM    + ROWSUM(64)
      Vehicle_min_AM   = Vehicle_min_AM   + ROWSUM(65)
      Person_miles_AM  = Person_miles_AM  + ROWSUM(66)
      Vehicle_miles_AM = Vehicle_miles_AM + ROWSUM(67)
      Total_cost_AM    = Total_cost_AM    + ROWSUM(68)
      Bridge_tolls_AM  = Bridge_tolls_AM  + ROWSUM(69)
      ; assuming deadheading AVs pay tolls
      Value_tolls_w_discount_AM   = Value_tolls_w_discount_AM   + ROWSUM(70)
      Value_tolls_no_discount_AM  = Value_tolls_no_discount_AM  + ROWSUM(70)
      Cordon_tolls_w_discount_AM  = Cordon_tolls_w_discount_AM  + ROWSUM(71)
      Cordon_tolls_no_discount_AM = Cordon_tolls_no_discount_AM + ROWSUM(72)

      ; MD
       MW[73] = 0            ; Person Trips
       MW[74] = mi.3.zpv_av  ; Vehicle Trips
       MW[75] = MW[17]   ; Person minutes
       MW[76] = MW[18]   ; Vehicle minutes
       MW[77] = MW[19]   ; Person miles
       MW[78] = MW[20]   ; Vehicle miles
       MW[79] = MW[21]   ; Trip Cost
       MW[80] = MW[22]   ; Bridge Tolls
       MW[81] = MW[23]   ; Value Tolls
       MW[82] = 0            ; Cordon tolls (considering discounts)
       MW[83] = 0            ; Cordon tolls (without discounts)

      Person_trips_MD  = Person_trips_MD  + ROWSUM(73)
      Vehicle_trips_MD = Vehicle_trips_MD + ROWSUM(74)
      Person_min_MD    = Person_min_MD    + ROWSUM(75)
      Vehicle_min_MD   = Vehicle_min_MD   + ROWSUM(76)
      Person_miles_MD  = Person_miles_MD  + ROWSUM(77)
      Vehicle_miles_MD = Vehicle_miles_MD + ROWSUM(78)
      Total_cost_MD    = Total_cost_MD    + ROWSUM(79)
      Bridge_tolls_MD  = Bridge_tolls_MD  + ROWSUM(80)
      ; assuming deadheading AVs pay tolls
      Value_tolls_w_discount_MD   = Value_tolls_w_discount_MD   + ROWSUM(81)
      Value_tolls_no_discount_MD  = Value_tolls_no_discount_MD  + ROWSUM(81)
      Cordon_tolls_w_discount_MD  = Cordon_tolls_w_discount_MD  + ROWSUM(82)
      Cordon_tolls_no_discount_MD = Cordon_tolls_no_discount_MD + ROWSUM(83)

      ; PM
       MW[84] = 0                                                    ; Person Trips
       MW[85] = mi.4.zpv_av                                          ; Vehicle Trips
       MW[86] = MW[24]   ; Person minutes
       MW[87] = MW[25]   ; Vehicle minutes
       MW[88] = MW[26]   ; Person miles
       MW[89] = MW[27]   ; Vehicle miles
       MW[90] = MW[28]   ; Trip Cost
       MW[91] = MW[29]   ; Bridge Tolls
       MW[92] = MW[30]   ; Value Tolls
       MW[93] = MW[31]   ; Cordon tolls (considering discounts)
       MW[94] = MW[32]   ; Cordon tolls (without discounts)

      Person_trips_PM  = Person_trips_PM  + ROWSUM(84)
      Vehicle_trips_PM = Vehicle_trips_PM + ROWSUM(85)
      Person_min_PM    = Person_min_PM    + ROWSUM(86)
      Vehicle_min_PM   = Vehicle_min_PM   + ROWSUM(87)
      Person_miles_PM  = Person_miles_PM  + ROWSUM(88)
      Vehicle_miles_PM = Vehicle_miles_PM + ROWSUM(89)
      Total_cost_PM    = Total_cost_PM    + ROWSUM(90)
      Bridge_tolls_PM  = Bridge_tolls_PM  + ROWSUM(91)
      ; assuming deadheading AVs pay tolls
      Value_tolls_w_discount_PM   = Value_tolls_w_discount_PM   + ROWSUM(92)
      Value_tolls_no_discount_PM  = Value_tolls_no_discount_PM  + ROWSUM(92)
      Cordon_tolls_w_discount_PM  = Cordon_tolls_w_discount_PM  + ROWSUM(93)
      Cordon_tolls_no_discount_PM = Cordon_tolls_no_discount_PM + ROWSUM(94)


      ; EV
       MW[95]  = 0                                                    ; Person Trips
       MW[96]  = mi.5.zpv_av  ; Vehicle Trips
       MW[97]  = MW[33]   ; Person minutes
       MW[98]  = MW[34]   ; Vehicle minutes
       MW[99]  = MW[35]   ; Person miles
       MW[100] = MW[36]   ; Vehicle miles
       MW[101] = MW[37]   ; Trip Cost
       MW[102] = MW[38]   ; Bridge Tolls
       MW[103] = MW[39]   ; Value Tolls
       MW[104] = 0            ; Cordon tolls (considering discounts)
       MW[105] = 0            ; Cordon tolls (without discounts)

      Person_trips_EV  = Person_trips_EV  + ROWSUM(95)
      Vehicle_trips_EV = Vehicle_trips_EV + ROWSUM(96)
      Person_min_EV    = Person_min_EV    + ROWSUM(97)
      Vehicle_min_EV   = Vehicle_min_EV   + ROWSUM(98)
      Person_miles_EV  = Person_miles_EV  + ROWSUM(99)
      Vehicle_miles_EV = Vehicle_miles_EV + ROWSUM(100)
      Total_cost_EV    = Total_cost_EV    + ROWSUM(101)
      Bridge_tolls_EV  = Bridge_tolls_EV  + ROWSUM(102)
      ; assuming deadheading AVs pay tolls
      Value_tolls_w_discount_EV   = Value_tolls_w_discount_EV   + ROWSUM(103)
      Value_tolls_no_discount_EV  = Value_tolls_no_discount_EV  + ROWSUM(103)
      Cordon_tolls_w_discount_EV  = Cordon_tolls_w_discount_EV  + ROWSUM(104)
      Cordon_tolls_no_discount_EV = Cordon_tolls_no_discount_EV + ROWSUM(105)


      ; assuming value tolls for deadheading AV
      _vtoll_am_nonzero = 0
      _vtoll_md_nonzero = 0

      Mode   = 'owned_zpv'
      Income = '@token_inc@'

      ; Daily rsults
      if(I = ZONES) PRINT PRINTO=1 CSV=T LIST= Income, Mode, Person_trips(10.2L), Vehicle_trips(10.2L),
                                                            Person_min(10.2L),   Vehicle_min(10.2L),
                                                            Person_miles(10.2L), Vehicle_miles(10.2L),
                                                            Total_cost(10.2L),
                                                            _vtoll_am_nonzero(10L), _vtoll_md_nonzero(10L),
                                                            Bridge_tolls(10.2L), Value_tolls_w_discount(10.2L), Value_tolls_no_discount(10.2L),
                                                            Cordon_tolls_w_discount(10.2L), Cordon_tolls_no_discount(10.2L)
      ; Time period results
      Period = 'EA'
      if(I = ZONES) PRINT PRINTO=2 CSV=T LIST= Period, Income, Mode, Person_trips_EA(10.2L), Vehicle_trips_EA(10.2L),
                                                            Person_min_EA(10.2L),   Vehicle_min_EA(10.2L),
                                                            Person_miles_EA(10.2L), Vehicle_miles_EA(10.2L),
                                                            Total_cost_EA(10.2L),
                                                            _vtoll_am_nonzero(10L), _vtoll_md_nonzero(10L),
                                                            Bridge_tolls_EA(10.2L), Value_tolls_w_discount_EA(10.2L), Value_tolls_no_discount_EA(10.2L),
                                                            Cordon_tolls_w_discount_EA(10.2L), Cordon_tolls_no_discount_EA(10.2L)        
      Period = 'AM'
      if(I = ZONES) PRINT PRINTO=3 CSV=T LIST= Period, Income, Mode, Person_trips_AM(10.2L), Vehicle_trips_AM(10.2L),
                                                            Person_min_AM(10.2L),   Vehicle_min_AM(10.2L),
                                                            Person_miles_AM(10.2L), Vehicle_miles_AM(10.2L),
                                                            Total_cost_AM(10.2L),
                                                            _vtoll_am_nonzero(10L), _vtoll_md_nonzero(10L),
                                                            Bridge_tolls_AM(10.2L), Value_tolls_w_discount_AM(10.2L), Value_tolls_no_discount_AM(10.2L),
                                                            Cordon_tolls_w_discount_AM(10.2L), Cordon_tolls_no_discount_AM(10.2L)       
      Period = 'MD'
      if(I = ZONES) PRINT PRINTO=4 CSV=T LIST= Period, Income, Mode, Person_trips_MD(10.2L), Vehicle_trips_MD(10.2L),
                                                            Person_min_MD(10.2L),   Vehicle_min_MD(10.2L),
                                                            Person_miles_MD(10.2L), Vehicle_miles_MD(10.2L),
                                                            Total_cost_MD(10.2L),
                                                            _vtoll_am_nonzero(10L), _vtoll_md_nonzero(10L),
                                                            Bridge_tolls_MD(10.2L), Value_tolls_w_discount_MD(10.2L), Value_tolls_no_discount_MD(10.2L),
                                                            Cordon_tolls_w_discount_MD(10.2L), Cordon_tolls_no_discount_MD(10.2L)                                                             
      Period = 'PM'
      if(I = ZONES) PRINT PRINTO=5 CSV=T LIST= Period, Income, Mode, Person_trips_PM(10.2L), Vehicle_trips_PM(10.2L),
                                                            Person_min_PM(10.2L),   Vehicle_min_PM(10.2L),
                                                            Person_miles_PM(10.2L), Vehicle_miles_PM(10.2L),
                                                            Total_cost_PM(10.2L),
                                                            _vtoll_am_nonzero(10L), _vtoll_md_nonzero(10L),
                                                            Bridge_tolls_PM(10.2L), Value_tolls_w_discount_PM(10.2L), Value_tolls_no_discount_PM(10.2L),
                                                            Cordon_tolls_w_discount_PM(10.2L), Cordon_tolls_no_discount_PM(10.2L)    
      Period = 'EV'
      if(I = ZONES) PRINT PRINTO=6 CSV=T LIST= Period, Income, Mode, Person_trips_EV(10.2L), Vehicle_trips_EV(10.2L),
                                                            Person_min_EV(10.2L),   Vehicle_min_EV(10.2L),
                                                            Person_miles_EV(10.2L), Vehicle_miles_EV(10.2L),
                                                            Total_cost_EV(10.2L),
                                                            _vtoll_am_nonzero(10L), _vtoll_md_nonzero(10L),
                                                            Bridge_tolls_EV(10.2L), Value_tolls_w_discount_EV(10.2L), Value_tolls_no_discount_EV(10.2L),
                                                            Cordon_tolls_w_discount_EV(10.2L), Cordon_tolls_no_discount_EV(10.2L)  
      ENDRUN
    ENDIF ; IF (auto=11) ; da_av_toll

  endloop ; income loop

  ; the next steps are only relevant to the da/sr2/sr3 and toll versions of those
  IF (auto<=6)
   RUN PGM = MATRIX
     ; Read internal/external travel demand - vehicle trips
     FILEI MATI[1] = "nonres\tripsIxEA.tpp"
     FILEI MATI[2] = "nonres\tripsIxAM.tpp"
     FILEI MATI[3] = "nonres\tripsIxMD.tpp"
     FILEI MATI[4] = "nonres\tripsIxPM.tpp"
     FILEI MATI[5] = "nonres\tripsIxEV.tpp"

     ; Read Highway Skims
     FILEI MATI[6] = "skims\HWYSKMEA.tpp"
     FILEI MATI[7] = "skims\HWYSKMAM.tpp"
     FILEI MATI[8] = "skims\HWYSKMMD.tpp"
     FILEI MATI[9] = "skims\HWYSKMPM.tpp"
     FILEI MATI[10]= "skims\HWYSKMEV.tpp"

     ; don't use unconnected zones
     FILEI MATI[11] = "skims\connected_zones.tpp"

     FILEI LOOKUPI[1] = taxi_tnc_occ_factors.csv

     FILEO PRINTO[1] = "metrics\auto_times_@token_auto@.csv",APPEND=T      ; Daily output
     FILEO PRINTO[2] = "metrics\auto_times_EA_@token_auto@.csv",APPEND=T   ; EA output
     FILEO PRINTO[3] = "metrics\auto_times_AM_@token_auto@.csv",APPEND=T   ; AM output
     FILEO PRINTO[4] = "metrics\auto_times_MD_@token_auto@.csv",APPEND=T   ; MD output
     FILEO PRINTO[5] = "metrics\auto_times_PM_@token_auto@.csv",APPEND=T   ; PM_ output
     FILEO PRINTO[6] = "metrics\auto_times_EV_@token_auto@.csv",APPEND=T   ; EV output

     FILEI ZDATI[1] = "landuse\tazData.dbf"  ; need cordon and cordon cost information

    ; load lookup values for factoring taxi and TNC modes
    lookup lookupi=1, LIST=y, name=occ_factors,
      lookup[1]=1, result=2,      ; (occ,taxi)
      lookup[2]=1, result=3,      ; (occ,single_tnc)
      lookup[3]=1, result=4       ; (occ,shared_tnc)

    IF (I=1)
      IF (@auto@==1 || @auto@==2 || @auto@==10 || @auto@==11)
        _occupancy = 1.0
      ELSEIF (@auto@==3 || @auto@==4 || @auto@==12 || @auto@==13)
        _occupancy = 2.0
      ELSEIF (@auto@==5 || @auto@==6 || @auto@==14 || @auto@==15)
        _occupancy = 3.5

      ; calculate the average occupancy
      ; the multiplication factors for s3 is calculated based on MTC's TNC pilot survey conducted in Oct/Nov 2018
      ; the spreadsheet is here: M:\Application\Model One\Mock Futures\TNC occupancy\tnc occupancy.xlsx
      ELSEIF (@auto@==7)
       ; taxi
       _occupancy = occ_factors(1, 1)*1 + occ_factors(1, 2)*2 + occ_factors(1, 3)*3.60
      ELSEIF (@auto@==8)
       ; tnc single
       _occupancy = occ_factors(2, 1)*1 + occ_factors(2, 2)*2 + occ_factors(2, 3)*3.60
      ELSEIF (@auto@==9)
       ; tnc shared
       _occupancy = occ_factors(3, 1)*1 + occ_factors(3, 2)*2 + occ_factors(3, 3)*3.83
      ENDIF
    ENDIF

     ; Trips EA * Skims EA
      MW[1]   =  mi.1.@token_auto@ * mi.6.@token_time@ * _occupancy ; Person minutes
      MW[2]   =  mi.1.@token_auto@ * mi.6.@token_time@               ; Vehicle minutes
      MW[3]   =  mi.1.@token_auto@ * mi.6.@token_dist@ * _occupancy ; Person miles
      MW[4]   =  mi.1.@token_auto@ * mi.6.@token_dist@               ; Vehicle miles
      MW[5]   =  mi.1.@token_auto@ * (mi.6.@token_dist@ * @AUTOOPC@) ; not including tolls
      MW[6]   =  mi.1.@token_auto@ *  mi.6.@token_btoll@             ; Bridge tolls
      MW[7]   =  mi.1.@token_auto@ *  mi.6.@token_vtoll@             ; Value tolls

     ; Trips AM * Skims AM
      MW[8]   =  mi.2.@token_auto@ * mi.7.@token_time@ * _occupancy ; Person minutes
      MW[9]   =  mi.2.@token_auto@ * mi.7.@token_time@               ; Vehicle minutes
      MW[10]  =  mi.2.@token_auto@ * mi.7.@token_dist@ * _occupancy ; Person miles
      MW[11]  =  mi.2.@token_auto@ * mi.7.@token_dist@               ; Vehilce miles
      MW[12]  =  mi.2.@token_auto@ * (mi.7.@token_dist@ * @AUTOOPC@) ; not including tolls
      ; MW[13] bridge tolls done in jloop below
      MW[14]  =  mi.2.@token_auto@ *  mi.7.@token_vtoll@             ; Value tolls
      ; MW[15] Cordon tolls (considering discounts) done in jloop below
      ; MW[16] Cordon tolls (without discounts) done in jloop below
      jloop
        dest_cordon_cost = zi.1.CORDONCOST[j]
        MW[13] = (mi.2.@token_auto@) * (mi.7.@token_btoll@ - dest_cordon_cost); Bridge tolls (btolls - cordon tolls at full price)
        MW[15] = (mi.2.@token_auto@) * (@btoll_factor@) * dest_cordon_cost    ; Cordon tolls (considering discounts)
        MW[16] = (mi.2.@token_auto@) * dest_cordon_cost                       ; Cordon tolls (without discounts)
      endjloop

      ; Trips MD * Skims MD
      MW[17]  =  mi.3.@token_auto@ * mi.8.@token_time@ * _occupancy ; Person minutes
      MW[18]  =  mi.3.@token_auto@ * mi.8.@token_time@               ; Vehicle minutes
      MW[19]  =  mi.3.@token_auto@ * mi.8.@token_dist@ * _occupancy ; Person miles
      MW[20]  =  mi.3.@token_auto@ * mi.8.@token_dist@               ; Vehicle miles
      MW[21]  =  mi.3.@token_auto@ * (mi.8.@token_dist@ * @AUTOOPC@) ; not including tolls
      MW[22]  =  mi.3.@token_auto@ *  mi.8.@token_btoll@             ; Bridge tolls
      MW[23]  =  mi.3.@token_auto@ *  mi.8.@token_vtoll@             ; Value tolls

      ; Trips PM * Skims PM
      MW[24]  =  mi.4.@token_auto@ * mi.9.@token_time@ * _occupancy ; Person minutes
      MW[25]  =  mi.4.@token_auto@ * mi.9.@token_time@               ; Vehicle minutes
      MW[26]  =  mi.4.@token_auto@ * mi.9.@token_dist@ * _occupancy ; Person miles
      MW[27]  =  mi.4.@token_auto@ * mi.9.@token_dist@               ; Vehicle miles
      MW[28]  =  mi.4.@token_auto@ * (mi.9.@token_dist@ * @AUTOOPC@) ; not including tolls
      ; MW[29] bridge tolls done in jloop below
      MW[30]  =  mi.4.@token_auto@ *  mi.9.@token_vtoll@             ; Value tolls
      ; MW[31] Cordon tolls (considering discounts) done in jloop below
      ; MW[32] Cordon tolls (without discounts) done in jloop below
      jloop
        dest_cordon_cost = zi.1.CORDONCOST[j]
        MW[29] = (mi.4.@token_auto@) * (mi.9.@token_btoll@ - dest_cordon_cost); Bridge tolls (btolls - cordon tolls at full price)
        MW[31] = (mi.4.@token_auto@) * (@btoll_factor@) * dest_cordon_cost    ; Cordon tolls (considering discounts)
        MW[32] = (mi.4.@token_auto@) * dest_cordon_cost                       ; Cordon tolls (without discounts)
      endjloop

      ; Trips EV * Skims EV
      MW[33]  =  mi.5.@token_auto@ * mi.10.@token_time@ * _occupancy ; Person minutes
      MW[34]  =  mi.5.@token_auto@ * mi.10.@token_time@               ; Vehicle minutes
      MW[35]  =  mi.5.@token_auto@ * mi.10.@token_dist@ * _occupancy ; Person miles
      MW[36]  =  mi.5.@token_auto@ * mi.10.@token_dist@               ; Vehicle miles
      MW[37]  =  mi.5.@token_auto@ * (mi.10.@token_dist@ * @AUTOOPC@) ; not including tolls
      MW[38]  =  mi.5.@token_auto@ *  mi.10.@token_btoll@             ; Bridge tolls
      MW[39]  =  mi.5.@token_auto@ *  mi.10.@token_vtoll@             ; Value tolls

     ; Compute Daily Person Trips, Daily Vehicle Trips, PersonTime, VehicleTime, PersonMiles, VehicleMiles, TotalCost, Bridge Tolls, Value Tolls
     ;
     ; NOTE that the zones may be unconnected, resulting in huge skim values, so we need to exclude those here

     MW[40] = mi.11.connected*mi.11.connected.t*( mi.1.@token_auto@ + mi.2.@token_auto@ + mi.3.@token_auto@ + mi.4.@token_auto@ +mi.5.@token_auto@)
     MW[41] = mi.11.connected*mi.11.connected.t*((mi.1.@token_auto@ + mi.2.@token_auto@ + mi.3.@token_auto@ + mi.4.@token_auto@ +mi.5.@token_auto@)/_occupancy)
     MW[42] = mi.11.connected*mi.11.connected.t*(MW[1] + MW[8]  + MW[17] + MW[24] + MW[33])   ; Person minutes
     MW[43] = mi.11.connected*mi.11.connected.t*(MW[2] + MW[9]  + MW[18] + MW[25] + MW[34])   ; Vehicle minutes
     MW[44] = mi.11.connected*mi.11.connected.t*(MW[3] + MW[10] + MW[19] + MW[26] + MW[35])   ; Person miles
     MW[45] = mi.11.connected*mi.11.connected.t*(MW[4] + MW[11] + MW[20] + MW[27] + MW[36])   ; Vehicle miles
     MW[46] = mi.11.connected*mi.11.connected.t*(MW[5] + MW[12] + MW[21] + MW[28] + MW[37])   ; Trip Cost
     MW[47] = mi.11.connected*mi.11.connected.t*(MW[6] + MW[13] + MW[22] + MW[29] + MW[38])   ; Bridge Tolls
     MW[48] = mi.11.connected*mi.11.connected.t*(MW[7] + MW[14] + MW[23] + MW[30] + MW[39])   ; Value Tolls
     MW[49] = mi.11.connected*mi.11.connected.t*(        MW[15] +          MW[31])            ; Cordon Tolls (considering discounts)
     MW[50] = mi.11.connected*mi.11.connected.t*(        MW[16] +          MW[32])            ; Cordon Tolls (without discounts)

     IF (@auto@=2 || @auto@==4 || @auto@==6)
       ; only for tolls
       Value_tolls_w_discount       = Value_tolls_w_discount        + ROWSUM(48)
       Value_tolls_no_discount      = Value_tolls_no_discount       + ROWSUM(48)
     else
       Value_tolls_w_discount       = 0
       Value_tolls_no_discount      = 0
     ENDIF

     Person_trips  = Person_trips  + ROWSUM(40)
     Vehicle_trips = Vehicle_trips + ROWSUM(41)
     Person_min    = Person_min    + ROWSUM(42)
     Vehicle_min   = Vehicle_min   + ROWSUM(43)
     Person_miles  = Person_miles  + ROWSUM(44)
     Vehicle_miles = Vehicle_miles + ROWSUM(45)
     Total_cost    = Total_cost    + ROWSUM(46)
     Bridge_tolls  = Bridge_tolls  + ROWSUM(47)
     Cordon_tolls_w_discount  = Cordon_tolls_w_discount  + ROWSUM(49)
     Cordon_tolls_no_discount = Cordon_tolls_no_discount + ROWSUM(50)

     ; Compute Each Tim Period's Daily Person Trips, Daily Vehicle Trips, PersonTime, VehicleTime, PersonMiles, VehicleMiles, TotalCost, Bridge Tolls, Value Tolls
     ; EA
     ; NOTE that the zones may be unconnected, resulting in huge skim values, so we need to exclude those here

     MW[51] = mi.11.connected*mi.11.connected.t*( mi.1.@token_auto@)                   ; Person_trips
     MW[52] = mi.11.connected*mi.11.connected.t*((mi.1.@token_auto@)/_occupancy)       ; Vehicle_trips 
     MW[53] = mi.11.connected*mi.11.connected.t*(MW[1])   ; Person minutes
     MW[54] = mi.11.connected*mi.11.connected.t*(MW[2])   ; Vehicle minutes
     MW[55] = mi.11.connected*mi.11.connected.t*(MW[3])   ; Person miles
     MW[56] = mi.11.connected*mi.11.connected.t*(MW[4])   ; Vehicle miles
     MW[57] = mi.11.connected*mi.11.connected.t*(MW[5])   ; Trip Cost
     MW[58] = mi.11.connected*mi.11.connected.t*(MW[6])   ; Bridge Tolls
     MW[59] = mi.11.connected*mi.11.connected.t*(MW[7])   ; Value Tolls
     MW[60] = 0                                           ; Cordon Tolls (considering discounts)
     MW[61] = 0                                           ; Cordon Tolls (without discounts)

     IF (@auto@=2 || @auto@==4 || @auto@==6)
       ; only for tolls
       Value_tolls_w_discount_EA       = Value_tolls_w_discount_EA        + ROWSUM(59)
       Value_tolls_no_discount_EA      = Value_tolls_no_discount_EA       + ROWSUM(59)
     else
       Value_tolls_w_discount_EA       = 0
       Value_tolls_no_discount_EA      = 0
     ENDIF

     Person_trips_EA  = Person_trips_EA  + ROWSUM(51)
     Vehicle_trips_EA = Vehicle_trips_EA + ROWSUM(52)
     Person_min_EA    = Person_min_EA    + ROWSUM(53)
     Vehicle_min_EA   = Vehicle_min_EA   + ROWSUM(54)
     Person_miles_EA  = Person_miles_EA  + ROWSUM(55)
     Vehicle_miles_EA = Vehicle_miles_EA + ROWSUM(56)
     Total_cost_EA    = Total_cost_EA    + ROWSUM(57)
     Bridge_tolls_EA  = Bridge_tolls_EA  + ROWSUM(58)
     Cordon_tolls_w_discount_EA  = Cordon_tolls_w_discount_EA  + ROWSUM(60)
     Cordon_tolls_no_discount_EA = Cordon_tolls_no_discount_EA + ROWSUM(61)

     ; AM
     ; NOTE that the zones may be unconnected, resulting in huge skim values, so we need to exclude those here

     MW[62] = mi.11.connected*mi.11.connected.t*( mi.2.@token_auto@)
     MW[63] = mi.11.connected*mi.11.connected.t*((mi.2.@token_auto@)/_occupancy)
     MW[64] = mi.11.connected*mi.11.connected.t*(MW[8]  )   ; Person minutes
     MW[65] = mi.11.connected*mi.11.connected.t*(MW[9]  )   ; Vehicle minutes
     MW[66] = mi.11.connected*mi.11.connected.t*(MW[10] )   ; Person miles
     MW[67] = mi.11.connected*mi.11.connected.t*(MW[11] )   ; Vehicle miles
     MW[68] = mi.11.connected*mi.11.connected.t*(MW[12] )   ; Trip Cost
     MW[69] = mi.11.connected*mi.11.connected.t*(MW[13] )   ; Bridge Tolls
     MW[70] = mi.11.connected*mi.11.connected.t*(MW[14] )   ; Value Tolls
     MW[71] = mi.11.connected*mi.11.connected.t*(MW[15] )            ; Cordon Tolls (considering discounts)
     MW[72] = mi.11.connected*mi.11.connected.t*(MW[16] )            ; Cordon Tolls (without discounts)V

     IF (@auto@=2 || @auto@==4 || @auto@==6)
       ; only for tolls
       Value_tolls_w_discount_AM       = Value_tolls_w_discount_AM        + ROWSUM(70)
       Value_tolls_no_discount_AM      = Value_tolls_no_discount_AM       + ROWSUM(70)
     else
       Value_tolls_w_discount_AM       = 0
       Value_tolls_no_discount_AM      = 0
     ENDIF

     Person_trips_AM  = Person_trips_AM  + ROWSUM(62)
     Vehicle_trips_AM = Vehicle_trips_AM + ROWSUM(63)
     Person_min_AM    = Person_min_AM    + ROWSUM(64)
     Vehicle_min_AM   = Vehicle_min_AM   + ROWSUM(65)
     Person_miles_AM  = Person_miles_AM  + ROWSUM(66)
     Vehicle_miles_AM = Vehicle_miles_AM + ROWSUM(67)
     Total_cost_AM    = Total_cost_AM    + ROWSUM(68)
     Bridge_tolls_AM  = Bridge_tolls_AM  + ROWSUM(69)
     Cordon_tolls_w_discount_AM  = Cordon_tolls_w_discount_AM  + ROWSUM(71)
     Cordon_tolls_no_discount_AM = Cordon_tolls_no_discount_AM + ROWSUM(72)

     ; MD
     MW[73] = mi.11.connected*mi.11.connected.t*( mi.3.@token_auto@)
     MW[74] = mi.11.connected*mi.11.connected.t*((mi.3.@token_auto@)/_occupancy)
     MW[75] = mi.11.connected*mi.11.connected.t*(MW[17])   ; Person minutes
     MW[76] = mi.11.connected*mi.11.connected.t*(MW[18])   ; Vehicle minutes
     MW[77] = mi.11.connected*mi.11.connected.t*(MW[19])   ; Person miles
     MW[78] = mi.11.connected*mi.11.connected.t*(MW[20])   ; Vehicle miles
     MW[79] = mi.11.connected*mi.11.connected.t*(MW[21])   ; Trip Cost
     MW[80] = mi.11.connected*mi.11.connected.t*(MW[22])   ; Bridge Tolls
     MW[81] = mi.11.connected*mi.11.connected.t*(MW[23])   ; Value Tolls
     MW[82] = 0                                            ; Cordon Tolls (considering discounts)
     MW[83] = 0                                            ; Cordon Tolls (without discounts)

     IF (@auto@=2 || @auto@==4 || @auto@==6)
       ; only for tolls
       Value_tolls_w_discount_MD       = Value_tolls_w_discount_MD        + ROWSUM(81)
       Value_tolls_no_discount_MD      = Value_tolls_no_discount_MD       + ROWSUM(81)
     else
       Value_tolls_w_discount_MD       = 0
       Value_tolls_no_discount_MD      = 0
     ENDIF

     Person_trips_MD  = Person_trips_MD  + ROWSUM(73)
     Vehicle_trips_MD = Vehicle_trips_MD + ROWSUM(74)
     Person_min_MD    = Person_min_MD    + ROWSUM(75)
     Vehicle_min_MD   = Vehicle_min_MD   + ROWSUM(76)
     Person_miles_MD  = Person_miles_MD  + ROWSUM(77)
     Vehicle_miles_MD = Vehicle_miles_MD + ROWSUM(78)
     Total_cost_MD    = Total_cost_MD    + ROWSUM(79)
     Bridge_tolls_MD  = Bridge_tolls_MD  + ROWSUM(80)
     Cordon_tolls_w_discount_MD  = Cordon_tolls_w_discount_MD  + ROWSUM(82)
     Cordon_tolls_no_discount_MD = Cordon_tolls_no_discount_MD + ROWSUM(83)     

     ; PM
     MW[84] = mi.11.connected*mi.11.connected.t*( mi.4.@token_auto@ )
     MW[85] = mi.11.connected*mi.11.connected.t*((mi.4.@token_auto@ )/_occupancy)
     MW[86] = mi.11.connected*mi.11.connected.t*(MW[24])   ; Person minutes
     MW[87] = mi.11.connected*mi.11.connected.t*(MW[25])   ; Vehicle minutes
     MW[88] = mi.11.connected*mi.11.connected.t*(MW[26])   ; Person miles
     MW[89] = mi.11.connected*mi.11.connected.t*(MW[27])   ; Vehicle miles
     MW[90] = mi.11.connected*mi.11.connected.t*(MW[28])   ; Trip Cost
     MW[91] = mi.11.connected*mi.11.connected.t*(MW[29])   ; Bridge Tolls
     MW[92] = mi.11.connected*mi.11.connected.t*(MW[30])   ; Value Tolls
     MW[93] = mi.11.connected*mi.11.connected.t*(MW[31])   ; Cordon Tolls (considering discounts)
     MW[94] = mi.11.connected*mi.11.connected.t*(MW[32])   ; Cordon Tolls (without discounts)

     IF (@auto@=2 || @auto@==4 || @auto@==6)
       ; only for tolls
       Value_tolls_w_discount_PM       = Value_tolls_w_discount_PM        + ROWSUM(92)
       Value_tolls_no_discount_PM      = Value_tolls_no_discount_PM       + ROWSUM(92)
     else
       Value_tolls_w_discount_PM       = 0
       Value_tolls_no_discount_PM      = 0
     ENDIF

     Person_trips_PM  = Person_trips_PM  + ROWSUM(84)
     Vehicle_trips_PM = Vehicle_trips_PM + ROWSUM(85)
     Person_min_PM    = Person_min_PM    + ROWSUM(86)
     Vehicle_min_PM   = Vehicle_min_PM   + ROWSUM(87)
     Person_miles_PM  = Person_miles_PM  + ROWSUM(88)
     Vehicle_miles_PM = Vehicle_miles_PM + ROWSUM(89)
     Total_cost_PM    = Total_cost_PM    + ROWSUM(90)
     Bridge_tolls_PM  = Bridge_tolls_PM  + ROWSUM(91)
     Cordon_tolls_w_discount_PM  = Cordon_tolls_w_discount_PM  + ROWSUM(93)
     Cordon_tolls_no_discount_PM = Cordon_tolls_no_discount_PM + ROWSUM(94)

     ; EV
     MW[95] = mi.11.connected*mi.11.connected.t*( mi.5.@token_auto@)
     MW[96] = mi.11.connected*mi.11.connected.t*((mi.5.@token_auto@)/_occupancy)
     MW[97] = mi.11.connected*mi.11.connected.t*(MW[33])   ; Person minutes
     MW[98] = mi.11.connected*mi.11.connected.t*(MW[34])   ; Vehicle minutes
     MW[99] = mi.11.connected*mi.11.connected.t*(MW[35])   ; Person miles
     MW[100] = mi.11.connected*mi.11.connected.t*(MW[36])   ; Vehicle miles
     MW[101] = mi.11.connected*mi.11.connected.t*(MW[37])   ; Trip Cost
     MW[102] = mi.11.connected*mi.11.connected.t*(MW[38])   ; Bridge Tolls
     MW[103] = mi.11.connected*mi.11.connected.t*(MW[39])   ; Value Tolls
     MW[104] = 0                                            ; Cordon Tolls (considering discounts)
     MW[105] = 0                                            ; Cordon Tolls (without discounts)

     IF (@auto@=2 || @auto@==4 || @auto@==6)
       ; only for tolls
       Value_tolls_w_discount_EV       = Value_tolls_w_discount_EV        + ROWSUM(103)
       Value_tolls_no_discount_EV      = Value_tolls_no_discount_EV       + ROWSUM(103)
     else
       Value_tolls_w_discount_EV       = 0
       Value_tolls_no_discount_EV      = 0
     ENDIF

     Person_trips_EV  = Person_trips_EV  + ROWSUM(95)
     Vehicle_trips_EV = Vehicle_trips_EV + ROWSUM(96)
     Person_min_EV    = Person_min_EV    + ROWSUM(97)
     Vehicle_min_EV   = Vehicle_min_EV   + ROWSUM(98)
     Person_miles_EV  = Person_miles_EV  + ROWSUM(99)
     Vehicle_miles_EV = Vehicle_miles_EV + ROWSUM(100)
     Total_cost_EV    = Total_cost_EV    + ROWSUM(101)
     Bridge_tolls_EV  = Bridge_tolls_EV  + ROWSUM(102)
     Cordon_tolls_w_discount_EV  = Cordon_tolls_w_discount_EV  + ROWSUM(104)
     Cordon_tolls_no_discount_EV = Cordon_tolls_no_discount_EV + ROWSUM(105)


      Mode   = '@token_auto@' + '_ix'
      ; Daily results
      if(I = ZONES) PRINT PRINTO=1 CSV=T LIST= "na",   Mode, Person_trips(10.2L), Vehicle_trips(10.2L),
                                                            Person_min(10.2L),   Vehicle_min(10.2L),
                                                            Person_miles(10.2L), Vehicle_miles(10.2L),
                                                            Total_cost(10.2L),
                                                            "na","na",
                                                            Bridge_tolls(10.2L), Value_tolls_w_discount(10.2L), Value_tolls_no_discount(10.2L),
                                                            Cordon_tolls_w_discount(10.2L), Cordon_tolls_no_discount(10.2L)
      ; Time period results
      Period = 'EA'
      if(I = ZONES) PRINT PRINTO=2 CSV=T LIST= Period, "na", Mode, Person_trips_EA(10.2L), Vehicle_trips_EA(10.2L),
                                                            Person_min_EA(10.2L),   Vehicle_min_EA(10.2L),
                                                            Person_miles_EA(10.2L), Vehicle_miles_EA(10.2L),
                                                            Total_cost_EA(10.2L),
                                                            "na","na",
                                                            Bridge_tolls_EA(10.2L), Value_tolls_w_discount_EA(10.2L), Value_tolls_no_discount_EA(10.2L),
                                                            Cordon_tolls_w_discount_EA(10.2L), Cordon_tolls_no_discount_EA(10.2L)    
      Period = 'AM'
      if(I = ZONES) PRINT PRINTO=3 CSV=T LIST= Period, "na", Mode, Person_trips_AM(10.2L), Vehicle_trips_AM(10.2L),
                                                            Person_min_AM(10.2L),   Vehicle_min_AM(10.2L),
                                                            Person_miles_AM(10.2L), Vehicle_miles_AM(10.2L),
                                                            Total_cost_AM(10.2L),
                                                            "na","na",
                                                            Bridge_tolls_AM(10.2L), Value_tolls_w_discount_AM(10.2L), Value_tolls_no_discount_AM(10.2L),
                                                            Cordon_tolls_w_discount_AM(10.2L), Cordon_tolls_no_discount_AM(10.2L)  

      Period = 'MD'
      if(I = ZONES) PRINT PRINTO=4 CSV=T LIST= Period, "na", Mode, Person_trips_MD(10.2L), Vehicle_trips_MD(10.2L),
                                                            Person_min_MD(10.2L),   Vehicle_min_MD(10.2L),
                                                            Person_miles_MD(10.2L), Vehicle_miles_MD(10.2L),
                                                            Total_cost_MD(10.2L),
                                                            "na","na",
                                                            Bridge_tolls_MD(10.2L), Value_tolls_w_discount_MD(10.2L), Value_tolls_no_discount_MD(10.2L),
                                                            Cordon_tolls_w_discount_MD(10.2L), Cordon_tolls_no_discount_MD(10.2L)  

      Period = 'PM'
      if(I = ZONES) PRINT PRINTO=5 CSV=T LIST= Period, "na", Mode, Person_trips_PM(10.2L), Vehicle_trips_PM(10.2L),
                                                            Person_min_PM(10.2L),   Vehicle_min_PM(10.2L),
                                                            Person_miles_PM(10.2L), Vehicle_miles_PM(10.2L),
                                                            Total_cost_PM(10.2L),
                                                            "na","na",
                                                            Bridge_tolls_PM(10.2L), Value_tolls_w_discount_PM(10.2L), Value_tolls_no_discount_PM(10.2L),
                                                            Cordon_tolls_w_discount_PM(10.2L), Cordon_tolls_no_discount_PM(10.2L)        

      Period = 'EV'
      if(I = ZONES) PRINT PRINTO=6 CSV=T LIST= Period, "na", Mode, Person_trips_EV(10.2L), Vehicle_trips_EV(10.2L),
                                                            Person_min_EV(10.2L),   Vehicle_min_EV(10.2L),
                                                            Person_miles_EV(10.2L), Vehicle_miles_EV(10.2L),
                                                            Total_cost_EV(10.2L),
                                                            "na","na",
                                                            Bridge_tolls_EV(10.2L), Value_tolls_w_discount_EV(10.2L), Value_tolls_no_discount_EV(10.2L),
                                                            Cordon_tolls_w_discount_EV(10.2L), Cordon_tolls_no_discount_EV(10.2L)                                                                                                                  
    ENDRUN

   RUN PGM = MATRIX
     ; Read air passenger travel demand - vehicle trips
     FILEI MATI[1] = "nonres\tripsAirPaxEA.tpp"
     FILEI MATI[2] = "nonres\tripsAirPaxAM.tpp"
     FILEI MATI[3] = "nonres\tripsAirPaxMD.tpp"
     FILEI MATI[4] = "nonres\tripsAirPaxPM.tpp"
     FILEI MATI[5] = "nonres\tripsAirPaxEV.tpp"

     ; Read Highway Skims
     FILEI MATI[6] = "skims\HWYSKMEA.tpp"
     FILEI MATI[7] = "skims\HWYSKMAM.tpp"
     FILEI MATI[8] = "skims\HWYSKMMD.tpp"
     FILEI MATI[9] = "skims\HWYSKMPM.tpp"
     FILEI MATI[10]= "skims\HWYSKMEV.tpp"

     FILEI MATI[11] = "skims\connected_zones.tpp"

     FILEI LOOKUPI[1] = taxi_tnc_occ_factors.csv

     FILEO PRINTO[1] = "metrics\auto_times_@token_auto@.csv",APPEND=T      ; Daily output
     FILEO PRINTO[2] = "metrics\auto_times_EA_@token_auto@.csv",APPEND=T   ; EA output
     FILEO PRINTO[3] = "metrics\auto_times_AM_@token_auto@.csv",APPEND=T   ; AM output
     FILEO PRINTO[4] = "metrics\auto_times_MD_@token_auto@.csv",APPEND=T   ; MD output
     FILEO PRINTO[5] = "metrics\auto_times_PM_@token_auto@.csv",APPEND=T   ; PM output
     FILEO PRINTO[6] = "metrics\auto_times_EV_@token_auto@.csv",APPEND=T   ; EV output

     FILEI ZDATI[1] = "landuse\tazData.dbf"  ; need cordon and cordon cost information

    ; load lookup values for factoring taxi and TNC modes
    lookup lookupi=1, LIST=y, name=occ_factors,
      lookup[1]=1, result=2,      ; (occ,taxi)
      lookup[2]=1, result=3,      ; (occ,single_tnc)
      lookup[3]=1, result=4       ; (occ,shared_tnc)

    IF (I=1)
      IF (@auto@==1 || @auto@==2 || @auto@==10 || @auto@==11)
        _occupancy = 1.0
      ELSEIF (@auto@==3 || @auto@==4 || @auto@==12 || @auto@==13)
        _occupancy = 2.0
      ELSEIF (@auto@==5 || @auto@==6 || @auto@==14 || @auto@==15)
        _occupancy = 3.5

      ; calculate the average occupancy
      ; the multiplication factors for s3 is calculated based on MTC's TNC pilot survey conducted in Oct/Nov 2018
      ; the spreadsheet is here: M:\Application\Model One\Mock Futures\TNC occupancy\tnc occupancy.xlsx
      ELSEIF (@auto@==7)
       ; taxi
       _occupancy = occ_factors(1, 1)*1 + occ_factors(1, 2)*2 + occ_factors(1, 3)*3.60
      ELSEIF (@auto@==8)
       ; tnc single
       _occupancy = occ_factors(2, 1)*1 + occ_factors(2, 2)*2 + occ_factors(2, 3)*3.60
      ELSEIF (@auto@==9)
       ; tnc shared
       _occupancy = occ_factors(3, 1)*1 + occ_factors(3, 2)*2 + occ_factors(3, 3)*3.83
      ENDIF
    ENDIF

     ; Trips EA * Skims EA
      MW[1]   =  mi.1.@token_auto@ * mi.6.@token_time@ * _occupancy ; Person minutes
      MW[2]   =  mi.1.@token_auto@ * mi.6.@token_time@               ; Vehicle minutes
      MW[3]   =  mi.1.@token_auto@ * mi.6.@token_dist@ * _occupancy ; Person miles
      MW[4]   =  mi.1.@token_auto@ * mi.6.@token_dist@               ; Vehicle miles
      MW[5]   =  mi.1.@token_auto@ * (mi.6.@token_dist@ * @AUTOOPC@) ; not including tolls
      MW[6]   =  mi.1.@token_auto@ *  mi.6.@token_btoll@             ; Bridge tolls
      MW[7]   =  mi.1.@token_auto@ *  mi.6.@token_vtoll@             ; Value tolls

     ; Trips AM * Skims AM
      MW[8]   =  mi.2.@token_auto@ * mi.7.@token_time@ * _occupancy ; Person minutes
      MW[9]   =  mi.2.@token_auto@ * mi.7.@token_time@               ; Vehicle minutes
      MW[10]  =  mi.2.@token_auto@ * mi.7.@token_dist@ * _occupancy ; Person miles
      MW[11]  =  mi.2.@token_auto@ * mi.7.@token_dist@               ; Vehilce miles
      MW[12]  =  mi.2.@token_auto@ * (mi.7.@token_dist@ * @AUTOOPC@) ; not including tolls
      ; MW[13] bridge tolls done in jloop below
      MW[14]  =  mi.2.@token_auto@ *  mi.7.@token_vtoll@             ; Value tolls
      ; MW[15] Cordon tolls (considering discounts) done in jloop below
      ; MW[16] Cordon tolls (without discounts) done in jloop below
      jloop
        dest_cordon_cost = zi.1.CORDONCOST[j]
        MW[13] = (mi.2.@token_auto@) * (mi.7.@token_btoll@ - dest_cordon_cost); Bridge tolls (btolls - cordon tolls at full price)
        MW[15] = (mi.2.@token_auto@) * (@btoll_factor@) * dest_cordon_cost    ; Cordon tolls (considering discounts)
        MW[16] = (mi.2.@token_auto@) * dest_cordon_cost    ; Cordon tolls (without discounts)
      endjloop

      ; Trips MD * Skims MD
      MW[17]  =  mi.3.@token_auto@ * mi.8.@token_time@ * _occupancy ; Person minutes
      MW[18]  =  mi.3.@token_auto@ * mi.8.@token_time@               ; Vehicle minutes
      MW[19]  =  mi.3.@token_auto@ * mi.8.@token_dist@ * _occupancy ; Person miles
      MW[20]  =  mi.3.@token_auto@ * mi.8.@token_dist@               ; Vehicle miles
      MW[21]  =  mi.3.@token_auto@ * (mi.8.@token_dist@ * @AUTOOPC@) ; not including tolls
      MW[22]  =  mi.3.@token_auto@ *  mi.8.@token_btoll@             ; Bridge tolls
      MW[23]  =  mi.3.@token_auto@ *  mi.8.@token_vtoll@             ; Value tolls

      ; Trips PM * Skims PM
      MW[24]   =  mi.4.@token_auto@ * mi.9.@token_time@ * _occupancy ; Person minutes
      MW[25]   =  mi.4.@token_auto@ * mi.9.@token_time@               ; Vehicle minutes
      MW[26]   =  mi.4.@token_auto@ * mi.9.@token_dist@ * _occupancy ; Person miles
      MW[27]   =  mi.4.@token_auto@ * mi.9.@token_dist@               ; Vehicle miles
      MW[28]   =  mi.4.@token_auto@ * (mi.9.@token_dist@ * @AUTOOPC@) ; not including tolls
      ; MW[29] bridge tolls done in jloop below
      MW[30]   =  mi.4.@token_auto@ *  mi.9.@token_vtoll@             ; Value tolls
      ; MW[31] Cordon tolls (considering discounts) done in jloop below
      ; MW[32] Cordon tolls (without discounts) done in jloop below
      jloop
        dest_cordon_cost = zi.1.CORDONCOST[j]
        MW[29] = (mi.4.@token_auto@) * (mi.9.@token_btoll@ - dest_cordon_cost); Bridge tolls (btolls - cordon tolls at full price)
        MW[31] = (mi.4.@token_auto@) * (@btoll_factor@) * dest_cordon_cost    ; Cordon tolls (considering discounts)
        MW[32] = (mi.4.@token_auto@) * dest_cordon_cost                       ; Cordon tolls (without discounts)
      endjloop

      ; Trips EV * Skims EV
      MW[33]   =  mi.5.@token_auto@ * mi.10.@token_time@ * _occupancy ; Person minutes
      MW[34]   =  mi.5.@token_auto@ * mi.10.@token_time@               ; Vehicle minutes
      MW[35]   =  mi.5.@token_auto@ * mi.10.@token_dist@ * _occupancy ; Person miles
      MW[36]   =  mi.5.@token_auto@ * mi.10.@token_dist@               ; Vehicle miles
      MW[37]   =  mi.5.@token_auto@ * (mi.10.@token_dist@ * @AUTOOPC@) ; not including tolls
      MW[38]   =  mi.5.@token_auto@ *  mi.10.@token_btoll@             ; Bridge tolls
      MW[39]   =  mi.5.@token_auto@ *  mi.10.@token_vtoll@             ; Value tolls

     ; Compute Daily Person Trips, Daily Vehicle Trips, PersonTime, VehicleTime, PersonMiles, VehicleMiles, TotalCost, Bridge Tolls, Value Tolls
     ;
     ; NOTE that the zones may be unconnected, resulting in huge skim values, so we need to exclude those here

     MW[40] = mi.11.connected*mi.11.connected.t*( mi.1.@token_auto@ + mi.2.@token_auto@ + mi.3.@token_auto@ + mi.4.@token_auto@ +mi.5.@token_auto@ )*_occupancy
     MW[41] = mi.11.connected*mi.11.connected.t*( mi.1.@token_auto@ + mi.2.@token_auto@ + mi.3.@token_auto@ + mi.4.@token_auto@ +mi.5.@token_auto@)
     MW[42] = mi.11.connected*mi.11.connected.t*(MW[1] + MW[8]  + MW[17] + MW[24] + MW[33])   ; Person minutes
     MW[43] = mi.11.connected*mi.11.connected.t*(MW[2] + MW[9]  + MW[18] + MW[25] + MW[34])   ; Vehicle minutes
     MW[44] = mi.11.connected*mi.11.connected.t*(MW[3] + MW[10] + MW[19] + MW[26] + MW[35])   ; Person miles
     MW[45] = mi.11.connected*mi.11.connected.t*(MW[4] + MW[11] + MW[20] + MW[27] + MW[36])   ; Vehicle miles
     MW[46] = mi.11.connected*mi.11.connected.t*(MW[5] + MW[12] + MW[21] + MW[28] + MW[37])   ; Trip Cost
     MW[47] = mi.11.connected*mi.11.connected.t*(MW[6] + MW[13] + MW[22] + MW[29] + MW[38])   ; Bridge Tolls
     MW[48] = mi.11.connected*mi.11.connected.t*(MW[7] + MW[14] + MW[23] + MW[30] + MW[39])   ; Value Tolls
     MW[49] = mi.11.connected*mi.11.connected.t*(        MW[15] +          MW[31])            ; Cordon Tolls (considering discounts)
     MW[50] = mi.11.connected*mi.11.connected.t*(        MW[16] +          MW[32])            ; Cordon Tolls (without discounts)

     IF (@auto@==2 || @auto@==4 || @auto@==6)
       ; only for tolls
       Value_tolls_w_discount       = Value_tolls_w_discount        + ROWSUM(48)
       Value_tolls_no_discount      = Value_tolls_no_discount       + ROWSUM(48)
     else
       Value_tolls_w_discount       = 0
       Value_tolls_no_discount      = 0
     ENDIF

     Person_trips  = Person_trips  + ROWSUM(40)
     Vehicle_trips = Vehicle_trips + ROWSUM(41)
     Person_min    = Person_min    + ROWSUM(42)
     Vehicle_min   = Vehicle_min   + ROWSUM(43)
     Person_miles  = Person_miles  + ROWSUM(44)
     Vehicle_miles = Vehicle_miles + ROWSUM(45)
     Total_cost    = Total_cost    + ROWSUM(46)
     Bridge_tolls  = Bridge_tolls  + ROWSUM(47)
     Cordon_tolls_w_discount  = Cordon_tolls_w_discount  + ROWSUM(49)
     Cordon_tolls_no_discount = Cordon_tolls_no_discount + ROWSUM(50)

     ; Compute each time period's Person Trips, Daily Vehicle Trips, PersonTime, VehicleTime, PersonMiles, VehicleMiles, TotalCost, Bridge Tolls, Value Tolls
     ; EA
     ; NOTE that the zones may be unconnected, resulting in huge skim values, so we need to exclude those here

     MW[51] = mi.11.connected*mi.11.connected.t*( mi.1.@token_auto@)*_occupancy
     MW[52] = mi.11.connected*mi.11.connected.t*( mi.1.@token_auto@)
     MW[53] = mi.11.connected*mi.11.connected.t*(MW[1])   ; Person minutes
     MW[54] = mi.11.connected*mi.11.connected.t*(MW[2])   ; Vehicle minutes
     MW[55] = mi.11.connected*mi.11.connected.t*(MW[3])   ; Person miles
     MW[56] = mi.11.connected*mi.11.connected.t*(MW[4])   ; Vehicle miles
     MW[57] = mi.11.connected*mi.11.connected.t*(MW[5])   ; Trip Cost
     MW[58] = mi.11.connected*mi.11.connected.t*(MW[6])   ; Bridge Tolls
     MW[59] = mi.11.connected*mi.11.connected.t*(MW[7])   ; Value Tolls
     MW[60] = 0                                           ; Cordon Tolls (considering discounts)
     MW[61] = 0                                           ; Cordon Tolls (without discounts)

     IF (@auto@==2 || @auto@==4 || @auto@==6)
       ; only for tolls
       Value_tolls_w_discount_EA       = Value_tolls_w_discount_EA        + ROWSUM(59)
       Value_tolls_no_discount_EA      = Value_tolls_no_discount_EA       + ROWSUM(59)
     else
       Value_tolls_w_discount       = 0
       Value_tolls_no_discount      = 0
     ENDIF

     Person_trips_EA  = Person_trips_EA  + ROWSUM(51)
     Vehicle_trips_EA = Vehicle_trips_EA + ROWSUM(52)
     Person_min_EA    = Person_min_EA    + ROWSUM(53)
     Vehicle_min_EA   = Vehicle_min_EA   + ROWSUM(54)
     Person_miles_EA  = Person_miles_EA  + ROWSUM(55)
     Vehicle_miles_EA = Vehicle_miles_EA + ROWSUM(56)
     Total_cost_EA    = Total_cost_EA    + ROWSUM(57)
     Bridge_tolls_EA  = Bridge_tolls_EA  + ROWSUM(58)
     Cordon_tolls_w_discount_EA  = Cordon_tolls_w_discount_EA  + ROWSUM(60)
     Cordon_tolls_no_discount_EA = Cordon_tolls_no_discount_EA + ROWSUM(61)

     ; AM
     MW[62] = mi.11.connected*mi.11.connected.t*( mi.2.@token_auto@ )*_occupancy
     MW[63] = mi.11.connected*mi.11.connected.t*( mi.2.@token_auto@ )
     MW[64] = mi.11.connected*mi.11.connected.t*(MW[8]  )   ; Person minutes
     MW[65] = mi.11.connected*mi.11.connected.t*(MW[9]  )   ; Vehicle minutes
     MW[66] = mi.11.connected*mi.11.connected.t*(MW[10] )   ; Person miles
     MW[67] = mi.11.connected*mi.11.connected.t*(MW[11] )   ; Vehicle miles
     MW[68] = mi.11.connected*mi.11.connected.t*(MW[12] )   ; Trip Cost
     MW[69] = mi.11.connected*mi.11.connected.t*(MW[13] )   ; Bridge Tolls
     MW[70] = mi.11.connected*mi.11.connected.t*(MW[14] )   ; Value Tolls
     MW[71] = mi.11.connected*mi.11.connected.t*(MW[15] )            ; Cordon Tolls (considering discounts)
     MW[72] = mi.11.connected*mi.11.connected.t*(MW[16] )            ; Cordon Tolls (without discounts)

     IF (@auto@==2 || @auto@==4 || @auto@==6)
       ; only for tolls
       Value_tolls_w_discount_AM       = Value_tolls_w_discount_AM        + ROWSUM(70)
       Value_tolls_no_discount_AM     = Value_tolls_no_discount_AM        + ROWSUM(70)
     else
       Value_tolls_w_discount       = 0
       Value_tolls_no_discount      = 0
     ENDIF

     Person_trips_AM  = Person_trips_AM  + ROWSUM(62)
     Vehicle_trips_AM = Vehicle_trips_AM + ROWSUM(63)
     Person_min_AM    = Person_min_AM    + ROWSUM(64)
     Vehicle_min_AM   = Vehicle_min_AM   + ROWSUM(65)
     Person_miles_AM  = Person_miles_AM  + ROWSUM(66)
     Vehicle_miles_AM = Vehicle_miles_AM + ROWSUM(67)
     Total_cost_AM    = Total_cost_AM    + ROWSUM(68)
     Bridge_tolls_AM  = Bridge_tolls_AM  + ROWSUM(69)
     Cordon_tolls_w_discount_AM  = Cordon_tolls_w_discount_AM  + ROWSUM(71)
     Cordon_tolls_no_discount_AM = Cordon_tolls_no_discount_AM + ROWSUM(72)

     ; MD
     MW[73] = mi.11.connected*mi.11.connected.t*( mi.3.@token_auto@)*_occupancy
     MW[74] = mi.11.connected*mi.11.connected.t*( mi.3.@token_auto@)
     MW[75] = mi.11.connected*mi.11.connected.t*(MW[17])   ; Person minutes
     MW[76] = mi.11.connected*mi.11.connected.t*(MW[18])   ; Vehicle minutes
     MW[77] = mi.11.connected*mi.11.connected.t*(MW[19])   ; Person miles
     MW[78] = mi.11.connected*mi.11.connected.t*(MW[20])   ; Vehicle miles
     MW[79] = mi.11.connected*mi.11.connected.t*(MW[21])   ; Trip Cost
     MW[80] = mi.11.connected*mi.11.connected.t*(MW[22])   ; Bridge Tolls
     MW[81] = mi.11.connected*mi.11.connected.t*(MW[23])   ; Value Tolls
     MW[82] = 0                                            ; Cordon Tolls (considering discounts)
     MW[83] = 0                                            ; Cordon Tolls (without discounts)

     IF (@auto@==2 || @auto@==4 || @auto@==6)
       ; only for tolls
       Value_tolls_w_discount_MD       = Value_tolls_w_discount_MD        + ROWSUM(81)
       Value_tolls_no_discount_MD     = Value_tolls_no_discount_MD        + ROWSUM(81)
     else
       Value_tolls_w_discount_MD       = 0
       Value_tolls_no_discount_MD      = 0
     ENDIF

     Person_trips_MD  = Person_trips_MD  + ROWSUM(73)
     Vehicle_trips_MD = Vehicle_trips_MD + ROWSUM(74)
     Person_min_MD    = Person_min_MD    + ROWSUM(75)
     Vehicle_min_MD   = Vehicle_min_MD   + ROWSUM(76)
     Person_miles_MD  = Person_miles_MD  + ROWSUM(77)
     Vehicle_miles_MD = Vehicle_miles_MD + ROWSUM(78)
     Total_cost_MD    = Total_cost_MD    + ROWSUM(79)
     Bridge_tolls_MD  = Bridge_tolls_MD  + ROWSUM(80)
     Cordon_tolls_w_discount_MD  = Cordon_tolls_w_discount_MD  + ROWSUM(82)
     Cordon_tolls_no_discount_MD = Cordon_tolls_no_discount_MD + ROWSUM(83)

     ; PM     
     MW[84] = mi.11.connected*mi.11.connected.t*( mi.4.@token_auto@)*_occupancy
     MW[85] = mi.11.connected*mi.11.connected.t*( mi.4.@token_auto@)
     MW[86] = mi.11.connected*mi.11.connected.t*(MW[24])   ; Person minutes
     MW[87] = mi.11.connected*mi.11.connected.t*(MW[25])   ; Vehicle minutes
     MW[88] = mi.11.connected*mi.11.connected.t*(MW[26])   ; Person miles
     MW[89] = mi.11.connected*mi.11.connected.t*(MW[27])   ; Vehicle miles
     MW[90] = mi.11.connected*mi.11.connected.t*(MW[28])   ; Trip Cost
     MW[91] = mi.11.connected*mi.11.connected.t*(MW[29])   ; Bridge Tolls
     MW[92] = mi.11.connected*mi.11.connected.t*(MW[30])   ; Value Tolls
     MW[93] = mi.11.connected*mi.11.connected.t*(MW[31])   ; Cordon Tolls (considering discounts)
     MW[94] = mi.11.connected*mi.11.connected.t*(MW[32])   ; Cordon Tolls (without discounts)

     IF (@auto@==2 || @auto@==4 || @auto@==6)
       ; only for tolls
       Value_tolls_w_discount_PM       = Value_tolls_w_discount_PM        + ROWSUM(92)
       Value_tolls_no_discount_PM     = Value_tolls_no_discount_PM        + ROWSUM(92)
     else
       Value_tolls_w_discount_PM       = 0
       Value_tolls_no_discount_PM      = 0
     ENDIF

     Person_trips_PM  = Person_trips_PM  + ROWSUM(84)
     Vehicle_trips_PM = Vehicle_trips_PM + ROWSUM(85)
     Person_min_PM    = Person_min_PM    + ROWSUM(86)
     Vehicle_min_PM   = Vehicle_min_PM   + ROWSUM(87)
     Person_miles_PM  = Person_miles_PM  + ROWSUM(88)
     Vehicle_miles_PM = Vehicle_miles_PM + ROWSUM(89)
     Total_cost_PM    = Total_cost_PM    + ROWSUM(90)
     Bridge_tolls_PM  = Bridge_tolls_PM  + ROWSUM(91)
     Cordon_tolls_w_discount_PM  = Cordon_tolls_w_discount_PM  + ROWSUM(93)
     Cordon_tolls_no_discount_PM = Cordon_tolls_no_discount_PM + ROWSUM(94)

     ; EV
     MW[95] = mi.11.connected*mi.11.connected.t*( mi.5.@token_auto@ )*_occupancy
     MW[96] = mi.11.connected*mi.11.connected.t*( mi.5.@token_auto@)
     MW[97] = mi.11.connected*mi.11.connected.t*(MW[33])   ; Person minutes
     MW[98] = mi.11.connected*mi.11.connected.t*(MW[34])   ; Vehicle minutes
     MW[99] = mi.11.connected*mi.11.connected.t*(MW[35])   ; Person miles
     MW[100] = mi.11.connected*mi.11.connected.t*(MW[36])   ; Vehicle miles
     MW[101] = mi.11.connected*mi.11.connected.t*(MW[37])   ; Trip Cost
     MW[102] = mi.11.connected*mi.11.connected.t*(MW[38])   ; Bridge Tolls
     MW[103] = mi.11.connected*mi.11.connected.t*(MW[39])   ; Value Tolls
     MW[104] = 0                                            ; Cordon Tolls (considering discounts)
     MW[105] = 0                                            ; Cordon Tolls (without discounts)

     IF (@auto@==2 || @auto@==4 || @auto@==6)
       ; only for tolls
       Value_tolls_w_discount_EV       = Value_tolls_w_discount_EV        + ROWSUM(103)
       Value_tolls_no_discount_EV     = Value_tolls_no_discount_EV        + ROWSUM(103)
     else
       Value_tolls_w_discount_EV       = 0
       Value_tolls_no_discount_EV      = 0
     ENDIF

     Person_trips_EV  = Person_trips_EV  + ROWSUM(95)
     Vehicle_trips_EV = Vehicle_trips_EV + ROWSUM(96)
     Person_min_EV    = Person_min_EV    + ROWSUM(97)
     Vehicle_min_EV   = Vehicle_min_EV   + ROWSUM(98)
     Person_miles_EV  = Person_miles_EV  + ROWSUM(99)
     Vehicle_miles_EV = Vehicle_miles_EV + ROWSUM(100)
     Total_cost_EV    = Total_cost_EV    + ROWSUM(101)
     Bridge_tolls_EV  = Bridge_tolls_EV  + ROWSUM(102)
     Cordon_tolls_w_discount_EV  = Cordon_tolls_w_discount_EV  + ROWSUM(104)
     Cordon_tolls_no_discount_EV = Cordon_tolls_no_discount_EV + ROWSUM(105)    

      Mode   = '@token_auto@' + '_air'
      ; Daily results
      if(I = ZONES) PRINT PRINTO=1 CSV=T LIST= "na",   Mode, Person_trips(10.2L), Vehicle_trips(10.2L),
                                                            Person_min(10.2L),   Vehicle_min(10.2L),
                                                            Person_miles(10.2L), Vehicle_miles(10.2L),
                                                            Total_cost(10.2L),
                                                            "na","na",
                                                            Bridge_tolls(10.2L), Value_tolls_w_discount(10.2L), Value_tolls_no_discount(10.2L),
                                                            Cordon_tolls_w_discount(10.2L), Cordon_tolls_no_discount(10.2L)
      ; Time period results
      Period = 'EA'
      if(I = ZONES) PRINT PRINTO=2 CSV=T LIST= Period, "na",   Mode, Person_trips_EA(10.2L), Vehicle_trips_EA(10.2L),
                                                            Person_min_EA(10.2L),   Vehicle_min_EA(10.2L),
                                                            Person_miles_EA(10.2L), Vehicle_miles_EA(10.2L),
                                                            Total_cost_EA(10.2L),
                                                            "na","na",
                                                            Bridge_tolls_EA(10.2L), Value_tolls_w_discount_EA(10.2L), Value_tolls_no_discount_EA(10.2L),
                                                            Cordon_tolls_w_discount_EA(10.2L), Cordon_tolls_no_discount_EA(10.2L)      

      Period = 'AM'
      if(I = ZONES) PRINT PRINTO=3 CSV=T LIST= Period, "na",   Mode, Person_trips_AM(10.2L), Vehicle_trips_AM(10.2L),
                                                            Person_min_AM(10.2L),   Vehicle_min_AM(10.2L),
                                                            Person_miles_AM(10.2L), Vehicle_miles_AM(10.2L),
                                                            Total_cost_AM(10.2L),
                                                            "na","na",
                                                            Bridge_tolls_AM(10.2L), Value_tolls_w_discount_AM(10.2L), Value_tolls_no_discount_AM(10.2L),
                                                            Cordon_tolls_w_discount_AM(10.2L), Cordon_tolls_no_discount_AM(10.2L)                                                            

      Period = 'MD'
      if(I = ZONES) PRINT PRINTO=4 CSV=T LIST= Period, "na",   Mode, Person_trips_MD(10.2L), Vehicle_trips_MD(10.2L),
                                                            Person_min_MD(10.2L),   Vehicle_min_MD(10.2L),
                                                            Person_miles_MD(10.2L), Vehicle_miles_MD(10.2L),
                                                            Total_cost_MD(10.2L),
                                                            "na","na",
                                                            Bridge_tolls_MD(10.2L), Value_tolls_w_discount_MD(10.2L), Value_tolls_no_discount_MD(10.2L),
                                                            Cordon_tolls_w_discount_MD(10.2L), Cordon_tolls_no_discount_MD(10.2L)     

      Period = 'PM'
      if(I = ZONES) PRINT PRINTO=5 CSV=T LIST= Period, "na",   Mode, Person_trips_PM(10.2L), Vehicle_trips_PM(10.2L),
                                                            Person_min_PM(10.2L),   Vehicle_min_PM(10.2L),
                                                            Person_miles_PM(10.2L), Vehicle_miles_PM(10.2L),
                                                            Total_cost_PM(10.2L),
                                                            "na","na",
                                                            Bridge_tolls_PM(10.2L), Value_tolls_w_discount_PM(10.2L), Value_tolls_no_discount_PM(10.2L),
                                                            Cordon_tolls_w_discount_PM(10.2L), Cordon_tolls_no_discount_PM(10.2L) 

      Period = 'EV'
      if(I = ZONES) PRINT PRINTO=6 CSV=T LIST= Period, "na",   Mode, Person_trips_EV(10.2L), Vehicle_trips_EV(10.2L),
                                                            Person_min_EV(10.2L),   Vehicle_min_EV(10.2L),
                                                            Person_miles_EV(10.2L), Vehicle_miles_EV(10.2L),
                                                            Total_cost_EV(10.2L),
                                                            "na","na",
                                                            Bridge_tolls_EV(10.2L), Value_tolls_w_discount_EV(10.2L), Value_tolls_no_discount_EV(10.2L),
                                                            Cordon_tolls_w_discount_EV(10.2L), Cordon_tolls_no_discount_EV(10.2L)                                                             
    ENDRUN
  ENDIF ; for the first six auto modes

  EndDistributeMultistep

endloop

Wait4Files files=CTRAMP1.script.end, CTRAMP2.script.end, CTRAMP3.script.end, CTRAMP4.script.end, CTRAMP5.script.end, CTRAMP6.script.end,
                 CTRAMP7.script.end, CTRAMP8.script.end, CTRAMP9.script.end, CTRAMP10.script.end, CTRAMP11.script.end, CTRAMP12.script.end,
                 CTRAMP13.script.end, CTRAMP14.script.end, CTRAMP15.script.end,
           printfiles = merge, deldistribfiles = t, CheckReturnCode = t

; combine the income files into one
; Daily
* copy metrics\auto_times_da.csv+metrics\auto_times_datoll.csv+metrics\auto_times_sr2.csv+metrics\auto_times_sr2toll.csv+metrics\auto_times_sr3.csv+metrics\auto_times_sr3toll.csv+metrics\auto_times_taxi.csv+metrics\auto_times_tnc_single.csv+metrics\auto_times_tnc_shared.csv+metrics\auto_times_da_av_notoll.csv+metrics\auto_times_da_av_toll.csv+metrics\auto_times_s2_av_notoll.csv+metrics\auto_times_s2_av_toll.csv+metrics\auto_times_s3_av_notoll.csv+metrics\auto_times_s3_av_toll.csv+metrics\auto_times_zpv_av.csv metrics\auto_times.csv
; EA
* copy metrics\auto_times_EA_da.csv+metrics\auto_times_EA_datoll.csv+metrics\auto_times_EA_sr2.csv+metrics\auto_times_EA_sr2toll.csv+metrics\auto_times_EA_sr3.csv+metrics\auto_times_EA_sr3toll.csv+metrics\auto_times_EA_taxi.csv+metrics\auto_times_EA_tnc_single.csv+metrics\auto_times_EA_tnc_shared.csv+metrics\auto_times_EA_da_av_notoll.csv+metrics\auto_times_EA_da_av_toll.csv+metrics\auto_times_EA_s2_av_notoll.csv+metrics\auto_times_EA_s2_av_toll.csv+metrics\auto_times_EA_s3_av_notoll.csv+metrics\auto_times_EA_s3_av_toll.csv+metrics\auto_times_EA_zpv_av.csv metrics\auto_times_EA.csv
; AM
* copy metrics\auto_times_AM_da.csv+metrics\auto_times_AM_datoll.csv+metrics\auto_times_AM_sr2.csv+metrics\auto_times_AM_sr2toll.csv+metrics\auto_times_AM_sr3.csv+metrics\auto_times_AM_sr3toll.csv+metrics\auto_times_AM_taxi.csv+metrics\auto_times_AM_tnc_single.csv+metrics\auto_times_AM_tnc_shared.csv+metrics\auto_times_AM_da_av_notoll.csv+metrics\auto_times_AM_da_av_toll.csv+metrics\auto_times_AM_s2_av_notoll.csv+metrics\auto_times_AM_s2_av_toll.csv+metrics\auto_times_AM_s3_av_notoll.csv+metrics\auto_times_AM_s3_av_toll.csv+metrics\auto_times_AM_zpv_av.csv metrics\auto_times_AM.csv
; MD
* copy metrics\auto_times_MD_da.csv+metrics\auto_times_MD_datoll.csv+metrics\auto_times_MD_sr2.csv+metrics\auto_times_MD_sr2toll.csv+metrics\auto_times_MD_sr3.csv+metrics\auto_times_MD_sr3toll.csv+metrics\auto_times_MD_taxi.csv+metrics\auto_times_MD_tnc_single.csv+metrics\auto_times_MD_tnc_shared.csv+metrics\auto_times_MD_da_av_notoll.csv+metrics\auto_times_MD_da_av_toll.csv+metrics\auto_times_MD_s2_av_notoll.csv+metrics\auto_times_MD_s2_av_toll.csv+metrics\auto_times_MD_s3_av_notoll.csv+metrics\auto_times_MD_s3_av_toll.csv+metrics\auto_times_MD_zpv_av.csv metrics\auto_times_MD.csv
; PM
* copy metrics\auto_times_PM_da.csv+metrics\auto_times_PM_datoll.csv+metrics\auto_times_PM_sr2.csv+metrics\auto_times_PM_sr2toll.csv+metrics\auto_times_PM_sr3.csv+metrics\auto_times_PM_sr3toll.csv+metrics\auto_times_PM_taxi.csv+metrics\auto_times_PM_tnc_single.csv+metrics\auto_times_PM_tnc_shared.csv+metrics\auto_times_PM_da_av_notoll.csv+metrics\auto_times_PM_da_av_toll.csv+metrics\auto_times_PM_s2_av_notoll.csv+metrics\auto_times_PM_s2_av_toll.csv+metrics\auto_times_PM_s3_av_notoll.csv+metrics\auto_times_PM_s3_av_toll.csv+metrics\auto_times_PM_zpv_av.csv metrics\auto_times_PM.csv
; EV
* copy metrics\auto_times_EV_da.csv+metrics\auto_times_EV_datoll.csv+metrics\auto_times_EV_sr2.csv+metrics\auto_times_EV_sr2toll.csv+metrics\auto_times_EV_sr3.csv+metrics\auto_times_EV_sr3toll.csv+metrics\auto_times_EV_taxi.csv+metrics\auto_times_EV_tnc_single.csv+metrics\auto_times_EV_tnc_shared.csv+metrics\auto_times_EV_da_av_notoll.csv+metrics\auto_times_EV_da_av_toll.csv+metrics\auto_times_EV_s2_av_notoll.csv+metrics\auto_times_EV_s2_av_toll.csv+metrics\auto_times_EV_s3_av_notoll.csv+metrics\auto_times_EV_s3_av_toll.csv+metrics\auto_times_EV_zpv_av.csv metrics\auto_times_EV.csv
; delete the individual ones
;* del metrics\auto_times_*.csv

; tnc zpv
RUN PGM = MATRIX
  ; Read person trips for an income quartile for all time periods
  FILEI MATI[1] = "main\tripsEA_zpv.tpp"
  FILEI MATI[2] = "main\tripsAM_zpv.tpp"
  FILEI MATI[3] = "main\tripsMD_zpv.tpp"
  FILEI MATI[4] = "main\tripsPM_zpv.tpp"
  FILEI MATI[5] = "main\tripsEV_zpv.tpp"

  ; Read Highway Skims
  FILEI MATI[6] = "skims\HWYSKMEA.tpp"
  FILEI MATI[7] = "skims\HWYSKMAM.tpp"
  FILEI MATI[8] = "skims\HWYSKMMD.tpp"
  FILEI MATI[9] = "skims\HWYSKMPM.tpp"
  FILEI MATI[10]= "skims\HWYSKMEV.tpp"

  FILEI ZDATI[1] = "landuse\tazData.dbf"  ; need cordon and cordon cost information

  ; Specify output file
  FILEO PRINTO[1] = "metrics\auto_times.csv",APPEND=T                      ; Daily output
  FILEO PRINTO[2] = "metrics\auto_times_EA.csv",APPEND=T                   ; EA output
  FILEO PRINTO[3] = "metrics\auto_times_AM.csv",APPEND=T                   ; AM output
  FILEO PRINTO[4] = "metrics\auto_times_MD.csv",APPEND=T                   ; MD output
  FILEO PRINTO[5] = "metrics\auto_times_PM.csv",APPEND=T                   ; PM output
  FILEO PRINTO[6] = "metrics\auto_times_EV.csv",APPEND=T                   ; EV output

  ; Trips EA * Skims EA
  MW[ 1] =  0                                            ; Person minutes
  MW[ 2] =  mi.1.zpv_tnc * mi.6.TOLLTIMEDA               ; Vehicle minutes
  MW[ 3] =  0                                            ; Person miles
  MW[ 4] =  mi.1.zpv_tnc * mi.6.TOLLDISTDA               ; Vehicle miles
  MW[ 5] =  mi.1.zpv_tnc * (mi.6.TOLLDISTDA * @AUTOOPC@) ; not including tolls
  MW[ 6] =  mi.1.zpv_tnc *  mi.6.TOLLBTOLLDA             ; Bridge tolls
  MW[ 7] =  mi.1.zpv_tnc *  mi.6.TOLLVTOLLDA             ; Value tolls

  ; Trips AM * Skims AM
  MW[ 8]   =  0                                            ; Person minutes
  MW[ 9]   =  mi.2.zpv_tnc * mi.7.TOLLTIMEDA               ; Vehicle minutes
  MW[10]   =  0                                            ; Person miles
  MW[11]   =  mi.2.zpv_tnc * mi.7.TOLLDISTDA               ; Vehicle miles
  MW[12]   =  mi.2.zpv_tnc * (mi.7.TOLLDISTDA * @AUTOOPC@) ; not including tolls
  ; MW[13] bridge tolls done in jloop below
  MW[14]   =  mi.2.zpv_tnc *  mi.7.TOLLVTOLLDA             ; Value tolls
  ; MW[15] Cordon tolls (considering discounts) done in jloop below
  ; MW[16] Cordon tolls (without discounts) done in jloop below
  jloop
    dest_cordon_cost = zi.1.CORDONCOST[j]
    MW[13] = (mi.2.zpv_tnc) * (mi.7.TOLLBTOLLDA - dest_cordon_cost); Bridge tolls (btolls - cordon tolls at full price)
    MW[15] = (mi.2.zpv_tnc) * dest_cordon_cost             ; Cordon tolls (considering discounts, no discount for zpv)
    MW[16] = (mi.2.zpv_tnc) * dest_cordon_cost             ; Cordon tolls (without discounts, no discount for zpv)
  endjloop  

  ; Trips MD * Skims MD
  MW[17]   =  0                                            ; Person minutes
  MW[18]   =  mi.3.zpv_tnc * mi.8.TOLLTIMEDA               ; Vehicle minutes
  MW[19]   =  0                                            ; Person miles
  MW[20]   =  mi.3.zpv_tnc * mi.8.TOLLDISTDA               ; Vehicle miles
  MW[21]   =  mi.3.zpv_tnc * (mi.8.TOLLDISTDA * @AUTOOPC@) ; not including tolls
  MW[22]   =  mi.3.zpv_tnc *  mi.8.TOLLBTOLLDA             ; Bridge tolls
  MW[23]   =  mi.3.zpv_tnc *  mi.8.TOLLVTOLLDA             ; Value tolls

  ; Trips PM * Skims PM
  MW[24]   =  0                                            ; Person minutes
  MW[25]   =  mi.4.zpv_tnc * mi.9.TOLLTIMEDA               ; Vehicle minutes
  MW[26]   =  0                                            ; Person miles
  MW[27]   =  mi.4.zpv_tnc * mi.9.TOLLDISTDA               ; Vehicle miles
  MW[28]   =  mi.4.zpv_tnc * (mi.9.TOLLDISTDA * @AUTOOPC@) ; not including tolls
  ; MW[29] bridge tolls done in jloop below
  MW[30]   =  mi.4.zpv_tnc *  mi.9.TOLLVTOLLDA             ; Value tolls
  ; MW[31] Cordon tolls (considering discounts) done in jloop below
  ; MW[32] Cordon tolls (without discounts) done in jloop below
  jloop
    dest_cordon_cost = zi.1.CORDONCOST[j]
    MW[29] = (mi.4.zpv_tnc) * (mi.9.TOLLBTOLLDA - dest_cordon_cost); Bridge tolls (btolls - cordon tolls at full price)
    MW[31] = (mi.4.zpv_tnc) * dest_cordon_cost             ; Cordon tolls (considering discounts, no discount for zpv)
    MW[32] = (mi.4.zpv_tnc) * dest_cordon_cost             ; Cordon tolls (without discounts, no discount for zpv)
  endjloop  

  ; Trips EV * Skims EV
  MW[33]   =  0                                             ; Person minutes
  MW[34]   =  mi.5.zpv_tnc * mi.10.TOLLTIMEDA               ; Vehicle minutes
  MW[35]   =  0                                             ; Person miles
  MW[36]   =  mi.5.zpv_tnc * mi.10.TOLLDISTDA               ; Vehicle miles
  MW[37]   =  mi.5.zpv_tnc * (mi.10.TOLLDISTDA * @AUTOOPC@) ; not including tolls
  MW[38]   =  mi.5.zpv_tnc *  mi.10.TOLLBTOLLDA             ; Bridge tolls
  MW[39]   =  mi.5.zpv_tnc *  mi.10.TOLLVTOLLDA             ; Value tolls

  ; Compute Daily Person Trips, Daily Vehicle Trips, PersonTime, VehicleTime, PersonMiles, VehicleMiles, TotalCost, Bridge Tolls,   Value Tolls
  MW[40] = 0                                                    ; Person Trips
  MW[41] = mi.1.zpv_tnc + mi.2.zpv_tnc + mi.3.zpv_tnc + mi.4.zpv_tnc + mi.5.zpv_tnc  ; Vehicle Trips
  MW[42] = MW[1] + MW[8]  + MW[17] + MW[24] + MW[33]            ; Person minutes
  MW[43] = MW[2] + MW[9]  + MW[18] + MW[25] + MW[34]            ; Vehicle minutes
  MW[44] = MW[3] + MW[10] + MW[19] + MW[26] + MW[35]            ; Person miles
  MW[45] = MW[4] + MW[11] + MW[20] + MW[27] + MW[36]            ; Vehicle miles
  MW[46] = MW[5] + MW[12] + MW[21] + MW[28] + MW[37]            ; Trip Cost
  MW[47] = MW[6] + MW[13] + MW[22] + MW[29] + MW[38]            ; Bridge Tolls
  MW[48] = MW[7] + MW[14] + MW[23] + MW[30] + MW[39]            ; Value Tolls
  MW[49] =         MW[15] +          MW[31]                     ; Cordon Tolls (considering discounts)
  MW[50] =         MW[16] +          MW[32]                     ; Cordon Tolls (without discounts)

  Person_trips  = Person_trips  + ROWSUM(40)
  Vehicle_trips = Vehicle_trips + ROWSUM(41)
  Person_min    = Person_min    + ROWSUM(42)
  Vehicle_min   = Vehicle_min   + ROWSUM(43)
  Person_miles  = Person_miles  + ROWSUM(44)
  Vehicle_miles = Vehicle_miles + ROWSUM(45)
  Total_cost    = Total_cost    + ROWSUM(46)
  Bridge_tolls  = Bridge_tolls  + ROWSUM(47)
  Value_tolls_w_discount   = Value_tolls_w_discount   + ROWSUM(48)
  Value_tolls_no_discount  = Value_tolls_no_discount  + ROWSUM(48)
  Cordon_tolls_w_discount  = Cordon_tolls_w_discount  + ROWSUM(49)
  Cordon_tolls_no_discount = Cordon_tolls_no_discount + ROWSUM(50)


  _vtoll_am_nonzero = 0
  _vtoll_md_nonzero = 0
 
  ; Compute each time period's Person Trips, Daily Vehicle Trips, PersonTime, VehicleTime, PersonMiles, VehicleMiles, TotalCost, Bridge Tolls, Value Tolls
  ; EA
  MW[51] = 0                ; Person Trips
  MW[52] = mi.1.zpv_tnc     ; Vehicle Trips
  MW[53] = MW[1]            ; Person minutes
  MW[54] = MW[2]            ; Vehicle minutes
  MW[55] = MW[3]            ; Person miles
  MW[56] = MW[4]            ; Vehicle miles
  MW[57] = MW[5]            ; Trip Cost
  MW[58] = MW[6]            ; Bridge Tolls
  MW[59] = MW[7]            ; Value Tolls
  MW[60] = 0                ; Cordon Tolls (considering discounts)
  MW[61] = 0                ; Cordon Tolls (without discounts)

  Person_trips_EA  = Person_trips_EA  + ROWSUM(51)
  Vehicle_trips_EA = Vehicle_trips_EA + ROWSUM(52)
  Person_min_EA    = Person_min_EA    + ROWSUM(53)
  Vehicle_min_EA   = Vehicle_min_EA   + ROWSUM(54)
  Person_miles_EA  = Person_miles_EA  + ROWSUM(55)
  Vehicle_miles_EA = Vehicle_miles_EA + ROWSUM(56)
  Total_cost_EA    = Total_cost_EA    + ROWSUM(57)
  Bridge_tolls_EA  = Bridge_tolls_EA  + ROWSUM(58)
  Value_tolls_w_discount_EA   = Value_tolls_w_discount_EA   + ROWSUM(59)
  Value_tolls_no_discount_EA  = Value_tolls_no_discount_EA  + ROWSUM(59)
  Cordon_tolls_w_discount_EA  = Cordon_tolls_w_discount_EA  + ROWSUM(60)
  Cordon_tolls_no_discount_EA = Cordon_tolls_no_discount_EA + ROWSUM(61)

  _vtoll_am_nonzero = 0
  _vtoll_md_nonzero = 0

  ; AM
  MW[62] = 0                                                    ; Person Trips
  MW[63] = mi.2.zpv_tnc   ; Vehicle Trips
  MW[64] = MW[8]            ; Person minutes
  MW[65] = MW[9]            ; Vehicle minutes
  MW[66] = MW[10]            ; Person miles
  MW[67] = MW[11]            ; Vehicle miles
  MW[68] = MW[12]            ; Trip Cost
  MW[69] = MW[13]            ; Bridge Tolls
  MW[70] = MW[14]            ; Value Tolls
  MW[71] = MW[15]            ; Cordon Tolls (considering discounts)
  MW[72] = MW[16]            ; Cordon Tolls (without discounts)

  Person_trips_AM  = Person_trips_AM  + ROWSUM(62)
  Vehicle_trips_AM = Vehicle_trips_AM + ROWSUM(63)
  Person_min_AM    = Person_min_AM    + ROWSUM(64)
  Vehicle_min_AM   = Vehicle_min_AM   + ROWSUM(65)
  Person_miles_AM  = Person_miles_AM  + ROWSUM(66)
  Vehicle_miles_AM = Vehicle_miles_AM + ROWSUM(67)
  Total_cost_AM    = Total_cost_AM    + ROWSUM(68)
  Bridge_tolls_AM  = Bridge_tolls_AM  + ROWSUM(69)
  Value_tolls_w_discount_AM   = Value_tolls_w_discount_AM   + ROWSUM(70)
  Value_tolls_no_discount_AM  = Value_tolls_no_discount_AM  + ROWSUM(70)
  Cordon_tolls_w_discount_AM  = Cordon_tolls_w_discount_AM  + ROWSUM(71)
  Cordon_tolls_no_discount_AM = Cordon_tolls_no_discount_AM + ROWSUM(72)

  ; MD
  MW[73] = 0                                                    ; Person Trips
  MW[74] = mi.3.zpv_tnc  ; Vehicle Trips
  MW[75] = MW[17]            ; Person minutes
  MW[76] = MW[18]            ; Vehicle minutes
  MW[77] = MW[19]            ; Person miles
  MW[78] = MW[20]            ; Vehicle miles
  MW[79] = MW[21]            ; Trip Cost
  MW[80] = MW[22]            ; Bridge Tolls
  MW[81] = MW[23]            ; Value Tolls
  MW[82] = 0                     ; Cordon Tolls (considering discounts)
  MW[83] = 0                     ; Cordon Tolls (without discounts)

  Person_trips_MD  = Person_trips_MD  + ROWSUM(73)
  Vehicle_trips_MD = Vehicle_trips_MD + ROWSUM(74)
  Person_min_MD    = Person_min_MD    + ROWSUM(75)
  Vehicle_min_MD   = Vehicle_min_MD   + ROWSUM(76)
  Person_miles_MD  = Person_miles_MD  + ROWSUM(77)
  Vehicle_miles_MD = Vehicle_miles_MD + ROWSUM(78)
  Total_cost_MD    = Total_cost_MD    + ROWSUM(79)
  Bridge_tolls_MD  = Bridge_tolls_MD  + ROWSUM(80)
  Value_tolls_w_discount_MD   = Value_tolls_w_discount_MD   + ROWSUM(81)
  Value_tolls_no_discount_MD  = Value_tolls_no_discount_MD  + ROWSUM(81)
  Cordon_tolls_w_discount_MD  = Cordon_tolls_w_discount_MD  + ROWSUM(82)
  Cordon_tolls_no_discount_MD = Cordon_tolls_no_discount_MD + ROWSUM(83)
  
  ; PM
  MW[84] = 0                                                    ; Person Trips
  MW[85] = mi.4.zpv_tnc ; Vehicle Trips
  MW[86] = MW[24]            ; Person minutes
  MW[87] = MW[25]            ; Vehicle minutes
  MW[88] = MW[26]            ; Person miles
  MW[89] = MW[27]            ; Vehicle miles
  MW[90] = MW[28]            ; Trip Cost
  MW[91] = MW[29]            ; Bridge Tolls
  MW[92] = MW[30]            ; Value Tolls
  MW[93] = MW[31]            ; Cordon Tolls (considering discounts)
  MW[94] = MW[32]            ; Cordon Tolls (without discounts)

  Person_trips_PM  = Person_trips_PM  + ROWSUM(84)
  Vehicle_trips_PM = Vehicle_trips_PM + ROWSUM(85)
  Person_min_PM    = Person_min_PM    + ROWSUM(86)
  Vehicle_min_PM   = Vehicle_min_PM   + ROWSUM(87)
  Person_miles_PM  = Person_miles_PM  + ROWSUM(88)
  Vehicle_miles_PM = Vehicle_miles_PM + ROWSUM(89)
  Total_cost_PM    = Total_cost_PM    + ROWSUM(90)
  Bridge_tolls_PM  = Bridge_tolls_PM  + ROWSUM(91)
  Value_tolls_w_discount_PM   = Value_tolls_w_discount_PM   + ROWSUM(92)
  Value_tolls_no_discount_PM  = Value_tolls_no_discount_PM  + ROWSUM(92)
  Cordon_tolls_w_discount_PM  = Cordon_tolls_w_discount_PM  + ROWSUM(93)
  Cordon_tolls_no_discount_PM = Cordon_tolls_no_discount_PM + ROWSUM(94)
  
  ; EV    
  MW[95] = 0                                                    ; Person Trips
  MW[96] = mi.5.zpv_tnc       ; Vehicle Trips
  MW[97] = MW[33]             ; Person minutes
  MW[98] = MW[34]             ; Vehicle minutes
  MW[99] = MW[35]             ; Person miles
  MW[100] = MW[36]            ; Vehicle miles
  MW[101] = MW[37]            ; Trip Cost
  MW[102] = MW[38]            ; Bridge Tolls
  MW[103] = MW[39]            ; Value Tolls
  MW[104] = 0                 ; Cordon Tolls (considering discounts)
  MW[105] = 0                 ; Cordon Tolls (without discounts)

  Person_trips_EV  = Person_trips_EV  + ROWSUM(95)
  Vehicle_trips_EV = Vehicle_trips_EV + ROWSUM(96)
  Person_min_EV    = Person_min_EV    + ROWSUM(97)
  Vehicle_min_EV   = Vehicle_min_EV   + ROWSUM(98)
  Person_miles_EV  = Person_miles_EV  + ROWSUM(99)
  Vehicle_miles_EV = Vehicle_miles_EV + ROWSUM(100)
  Total_cost_EV    = Total_cost_EV    + ROWSUM(101)
  Bridge_tolls_EV  = Bridge_tolls_EV  + ROWSUM(102)
  Value_tolls_w_discount_EV   = Value_tolls_w_discount_EV   + ROWSUM(103)
  Value_tolls_no_discount_EV  = Value_tolls_no_discount_EV  + ROWSUM(103)
  Cordon_tolls_w_discount_EV  = Cordon_tolls_w_discount_EV  + ROWSUM(104)
  Cordon_tolls_no_discount_EV = Cordon_tolls_no_discount_EV + ROWSUM(105)

  _vtoll_am_nonzero = 0
  _vtoll_md_nonzero = 0
  Mode   = 'zpv_tnc'
  Income = 'na'
  
  ; Daily results
  if(I = ZONES) PRINT PRINTO=1 CSV=T LIST= Income, Mode, Person_trips(10.2L), Vehicle_trips(10.2L),
                                          Person_min(10.2L),   Vehicle_min(10.2L),
                                          Person_miles(10.2L), Vehicle_miles(10.2L),
                                          Total_cost(10.2L),
                                          _vtoll_am_nonzero(10L), _vtoll_md_nonzero(10L),
                                          Bridge_tolls(10.2L), Value_tolls_w_discount(10.2L), Value_tolls_no_discount(10.2L),
                                          Cordon_tolls_w_discount(10.2L), Cordon_tolls_no_discount(10.2L)

  ; Time period results
  Period = 'EA'
  if(I = ZONES) PRINT PRINTO=2 CSV=T LIST= Period, Income, Mode, Person_trips_EA(10.2L), Vehicle_trips_EA(10.2L),
                                          Person_min_EA(10.2L),   Vehicle_min_EA(10.2L),
                                          Person_miles_EA(10.2L), Vehicle_miles_EA(10.2L),
                                          Total_cost_EA(10.2L),
                                          _vtoll_am_nonzero(10L), _vtoll_md_nonzero(10L),
                                          Bridge_tolls_EA(10.2L), Value_tolls_w_discount_EA(10.2L), Value_tolls_no_discount_EA(10.2L),
                                          Cordon_tolls_w_discount_EA(10.2L), Cordon_tolls_no_discount_EA(10.2L)  

  Period = 'AM'
  if(I = ZONES) PRINT PRINTO=3 CSV=T LIST= Period, Income, Mode, Person_trips_AM(10.2L), Vehicle_trips_AM(10.2L),
                                          Person_min_AM(10.2L),   Vehicle_min_AM(10.2L),
                                          Person_miles_AM(10.2L), Vehicle_miles_AM(10.2L),
                                          Total_cost_AM(10.2L),
                                          _vtoll_am_nonzero(10L), _vtoll_md_nonzero(10L),
                                          Bridge_tolls_AM(10.2L), Value_tolls_w_discount_AM(10.2L), Value_tolls_no_discount_AM(10.2L),
                                          Cordon_tolls_w_discount_AM(10.2L), Cordon_tolls_no_discount_AM(10.2L)  

  Period = 'MD'
  if(I = ZONES) PRINT PRINTO=4 CSV=T LIST= Period, Income, Mode, Person_trips_MD(10.2L), Vehicle_trips_MD(10.2L),
                                          Person_min_MD(10.2L),   Vehicle_min_MD(10.2L),
                                          Person_miles_MD(10.2L), Vehicle_miles_MD(10.2L),
                                          Total_cost_MD(10.2L),
                                          _vtoll_am_nonzero(10L), _vtoll_md_nonzero(10L),
                                          Bridge_tolls_MD(10.2L), Value_tolls_w_discount_MD(10.2L), Value_tolls_no_discount_MD(10.2L),
                                          Cordon_tolls_w_discount_MD(10.2L), Cordon_tolls_no_discount_MD(10.2L)  
  Period = 'PM'
  if(I = ZONES) PRINT PRINTO=5 CSV=T LIST= Period, Income, Mode, Person_trips_PM(10.2L), Vehicle_trips_PM(10.2L),
                                          Person_min_PM(10.2L),   Vehicle_min_PM(10.2L),
                                          Person_miles_PM(10.2L), Vehicle_miles_PM(10.2L),
                                          Total_cost_PM(10.2L),
                                          _vtoll_am_nonzero(10L), _vtoll_md_nonzero(10L),
                                          Bridge_tolls_PM(10.2L), Value_tolls_w_discount_PM(10.2L), Value_tolls_no_discount_PM(10.2L),
                                          Cordon_tolls_w_discount_PM(10.2L), Cordon_tolls_no_discount_PM(10.2L)  
  Period = 'EV'
  if(I = ZONES) PRINT PRINTO=6 CSV=T LIST= Period, Income, Mode, Person_trips_EV(10.2L), Vehicle_trips_EV(10.2L),
                                          Person_min_EV(10.2L),   Vehicle_min_EV(10.2L),
                                          Person_miles_EV(10.2L), Vehicle_miles_EV(10.2L),
                                          Total_cost_EV(10.2L),
                                          _vtoll_am_nonzero(10L), _vtoll_md_nonzero(10L),
                                          Bridge_tolls_EV(10.2L), Value_tolls_w_discount_EV(10.2L), Value_tolls_no_discount_EV(10.2L),
                                          Cordon_tolls_w_discount_EV(10.2L), Cordon_tolls_no_discount_EV(10.2L)  

ENDRUN


RUN PGM = MATRIX
  ; Read truck trips for all time periods
  FILEI MATI[1] = "nonres\tripstrkEA.tpp"
  FILEI MATI[2] = "nonres\tripstrkAM.tpp"
  FILEI MATI[3] = "nonres\tripstrkMD.tpp"
  FILEI MATI[4] = "nonres\tripstrkPM.tpp"
  FILEI MATI[5] = "nonres\tripstrkEV.tpp"

  ; Read Highway Skims
  FILEI MATI[6] = "skims\COM_HWYSKIMEA.tpp"
  FILEI MATI[7] = "skims\COM_HWYSKIMAM.tpp"
  FILEI MATI[8] = "skims\COM_HWYSKIMMD.tpp"
  FILEI MATI[9] = "skims\COM_HWYSKIMPM.tpp"
  FILEI MATI[10]= "skims\COM_HWYSKIMEV.tpp"

  FILEI MATI[11] = "skims\connected_zones.tpp"

  FILEI ZDATI[1] = "landuse\tazData.dbf"  ; need cordon and cordon cost information

  ; the input tolls file
  FILEI LOOKUPI[1]= "hwy\tolls.dbf"
  ; load toll values
  ; We don't expect there to be cordon tolls other than AM/PM inbound but might as well handle it if there are
  ; lookup is by FAC_INDEX because its a unique index into the file, while TOLLCLASS is not
  LOOKUP LOOKUPI=1, LIST=y, NAME=TOLLS,
    LOOKUP[1] = FAC_INDEX, RESULT=TOLLEA_VSM, ; EA
    LOOKUP[2] = FAC_INDEX, RESULT=TOLLEA_SML,
    LOOKUP[3] = FAC_INDEX, RESULT=TOLLEA_MED,
    LOOKUP[4] = FAC_INDEX, RESULT=TOLLEA_LRG,
    LOOKUP[5] = FAC_INDEX, RESULT=TOLLAM_VSM, ; AM
    LOOKUP[6] = FAC_INDEX, RESULT=TOLLAM_SML,
    LOOKUP[7] = FAC_INDEX, RESULT=TOLLAM_MED,
    LOOKUP[8] = FAC_INDEX, RESULT=TOLLAM_LRG,
    LOOKUP[9] = FAC_INDEX, RESULT=TOLLMD_VSM, ; MD
    LOOKUP[10]= FAC_INDEX, RESULT=TOLLMD_SML,
    LOOKUP[11]= FAC_INDEX, RESULT=TOLLMD_MED,
    LOOKUP[12]= FAC_INDEX, RESULT=TOLLMD_LRG,
    LOOKUP[13]= FAC_INDEX, RESULT=TOLLPM_VSM, ; PM
    LOOKUP[14]= FAC_INDEX, RESULT=TOLLPM_SML,
    LOOKUP[15]= FAC_INDEX, RESULT=TOLLPM_MED,
    LOOKUP[16]= FAC_INDEX, RESULT=TOLLPM_LRG,
    LOOKUP[17]= FAC_INDEX, RESULT=TOLLEV_VSM, ; EV
    LOOKUP[18]= FAC_INDEX, RESULT=TOLLEV_SML, 
    LOOKUP[19]= FAC_INDEX, RESULT=TOLLEV_MED, 
    LOOKUP[20]= FAC_INDEX, RESULT=TOLLEV_LRG, 
    FAIL[1]=-99,
    FAIL[2]=-99,
    FAIL[3]=-99
    ; return -99 if FAC_INDEX is not found

  ; Read Truck Operating Cost from Properties file
  Read File = "CTRAMP\scripts\block\hwyParam.block"

  FILEO PRINTO[1] = "metrics\auto_times.csv",APPEND=T                   ; Daily output
  FILEO PRINTO[2] = "metrics\auto_times_EA.csv",APPEND=T                ; EA output
  FILEO PRINTO[3] = "metrics\auto_times_AM.csv",APPEND=T                ; AM output
  FILEO PRINTO[4] = "metrics\auto_times_MD.csv",APPEND=T                ; MD output
  FILEO PRINTO[5] = "metrics\auto_times_PM.csv",APPEND=T                ; PM output
  FILEO PRINTO[6] = "metrics\auto_times_EV.csv",APPEND=T                ; EV output

  ; Trips EA * Skims EA
  MW[1]   = (mi.1.vstruck * mi.6.timevsm) +
            ( mi.1.struck * mi.6.timesml) +
            ( mi.1.mtruck * mi.6.timemed) +
            ( mi.1.ctruck * mi.6.timelrg)
  MW[2]   = (mi.1.vstruck * mi.6.distvsm) +
            ( mi.1.struck * mi.6.distsml) +
            ( mi.1.mtruck * mi.6.distmed) +
            ( mi.1.ctruck * mi.6.distlrg)
  MW[3]   = (mi.1.vstruck *(mi.6.distvsm * SMTROPC)) +
            ( mi.1.struck *(mi.6.distsml * SMTROPC)) +
            ( mi.1.mtruck *(mi.6.distmed * SMTROPC)) +
            ( mi.1.ctruck *(mi.6.distlrg * LRTROPC))
  ; MW[4] bridge tolls done in jloop below
  ; MW[5] cordon tolls done in jloop below

  ; TOLL Trips EA * Skims EA
  MW[6]   = (mi.1.vstrucktoll *  mi.6.tolltimevsm) +
            ( mi.1.strucktoll *  mi.6.tolltimesml) +
            ( mi.1.mtrucktoll *  mi.6.tolltimemed) +
            ( mi.1.ctrucktoll *  mi.6.tolltimelrg)
  MW[7]   = (mi.1.vstrucktoll *  mi.6.tolldistvsm) +
            ( mi.1.strucktoll *  mi.6.tolldistsml) +
            ( mi.1.mtrucktoll *  mi.6.tolldistmed) +
            ( mi.1.ctrucktoll *  mi.6.tolldistlrg)
  MW[8]   = (mi.1.vstrucktoll * (mi.6.tolldistvsm * SMTROPC)) +
            ( mi.1.strucktoll * (mi.6.tolldistsml * SMTROPC)) +
            ( mi.1.mtrucktoll * (mi.6.tolldistmed * SMTROPC)) +
            ( mi.1.ctrucktoll * (mi.6.tolldistlrg * LRTROPC))
  ; MW[9] bridge tolls done in jloop below
  ; MW[10] cordon tolls done in jloop below
  MW[11]   = (mi.1.vstrucktoll * mi.6.tollvtollvsm) +
            ( mi.1.strucktoll * mi.6.tollvtollsml) +
            ( mi.1.mtrucktoll * mi.6.tollvtollmed) +
            ( mi.1.ctrucktoll * mi.6.tollvtolllrg) ; Value tolls

  ; Trips AM * Skims AM
  MW[12]  = (mi.2.vstruck * mi.7.timevsm) +
            ( mi.2.struck * mi.7.timesml) +
            ( mi.2.mtruck * mi.7.timemed) +
            ( mi.2.ctruck * mi.7.timelrg)
  MW[13]  = (mi.2.vstruck * mi.7.distvsm) +
            ( mi.2.struck * mi.7.distsml) +
            ( mi.2.mtruck * mi.7.distmed) +
            ( mi.2.ctruck * mi.7.distlrg)
  MW[14]  = (mi.2.vstruck *(mi.7.distvsm * SMTROPC)) +
            ( mi.2.struck *(mi.7.distsml * SMTROPC)) +
            ( mi.2.mtruck *(mi.7.distmed * SMTROPC)) +
            ( mi.2.ctruck *(mi.7.distlrg * LRTROPC))
  ; MW[15] bridge tolls done in jloop below
  ; MW[16] cordon tolls done in jloop below

  ; TOLL Trips AM * Skims AM
  MW[17]  = (mi.2.vstrucktoll *  mi.7.tolltimevsm) +
            ( mi.2.strucktoll *  mi.7.tolltimesml) +
            ( mi.2.mtrucktoll *  mi.7.tolltimemed) +
            ( mi.2.ctrucktoll *  mi.7.tolltimelrg)
  MW[18]  = (mi.2.vstrucktoll *  mi.7.tolldistvsm) +
            ( mi.2.strucktoll *  mi.7.tolldistsml) +
            ( mi.2.mtrucktoll *  mi.7.tolldistmed) +
            ( mi.2.ctrucktoll *  mi.7.tolldistlrg)
  MW[19]  = (mi.2.vstrucktoll * (mi.7.tolldistvsm * SMTROPC)) +
            ( mi.2.strucktoll * (mi.7.tolldistsml * SMTROPC)) +
            ( mi.2.mtrucktoll * (mi.7.tolldistmed * SMTROPC)) +
            ( mi.2.ctrucktoll * (mi.7.tolldistlrg * LRTROPC))
  ; MW[20] bridge tolls done in jloop below
  ; MW[21] cordon tolls done in jloop below
  MW[22]  = (mi.2.vstrucktoll * mi.7.tollvtollvsm) +
            ( mi.2.strucktoll * mi.7.tollvtollsml) +
            ( mi.2.mtrucktoll * mi.7.tollvtollmed) +
            ( mi.2.ctrucktoll * mi.7.tollvtolllrg) ; Value tolls

  ; Trips MD * Skims MD
  MW[23]  = (mi.3.vstruck * mi.8.timevsm) +
            ( mi.3.struck * mi.8.timesml) +
            ( mi.3.mtruck * mi.8.timemed) +
            ( mi.3.ctruck * mi.8.timelrg)
  MW[24]  = (mi.3.vstruck * mi.8.distvsm) +
            ( mi.3.struck * mi.8.distsml) +
            ( mi.3.mtruck * mi.8.distmed) +
            ( mi.3.ctruck * mi.8.distlrg)
  MW[25]  = (mi.3.vstruck *(mi.8.distvsm * SMTROPC)) +
            ( mi.3.struck *(mi.8.distsml * SMTROPC)) +
            ( mi.3.mtruck *(mi.8.distmed * SMTROPC)) +
            ( mi.3.ctruck *(mi.8.distlrg * LRTROPC))
  ; MW[26] bridge tolls done in jloop below
  ; MW[27] cordon tolls done in jloop below

  ; TOLL Trips MD * Skims MD
  MW[28]  = (mi.3.vstrucktoll *  mi.8.tolltimevsm) +
            ( mi.3.strucktoll *  mi.8.tolltimesml) +
            ( mi.3.mtrucktoll *  mi.8.tolltimemed) +
            ( mi.3.ctrucktoll *  mi.8.tolltimelrg)
  MW[29]  = (mi.3.vstrucktoll *  mi.8.tolldistvsm) +
            ( mi.3.strucktoll *  mi.8.tolldistsml) +
            ( mi.3.mtrucktoll *  mi.8.tolldistmed) +
            ( mi.3.ctrucktoll *  mi.8.tolldistlrg)
  MW[30]  = (mi.3.vstrucktoll * (mi.8.tolldistvsm * SMTROPC)) +
            ( mi.3.strucktoll * (mi.8.tolldistsml * SMTROPC)) +
            ( mi.3.mtrucktoll * (mi.8.tolldistmed * SMTROPC)) +
            ( mi.3.ctrucktoll * (mi.8.tolldistlrg * LRTROPC))
  ; MW[31] bridge tolls done in jloop below
  ; MW[32] cordon tolls done in jloop below
  MW[33]  = (mi.3.vstrucktoll * mi.8.tollvtollvsm) +
            ( mi.3.strucktoll * mi.8.tollvtollsml) +
            ( mi.3.mtrucktoll * mi.8.tollvtollmed) +
            ( mi.3.ctrucktoll * mi.8.tollvtolllrg) ; Value tolls

  ; Trips PM * Skims PM
  MW[34]  = (mi.4.vstruck * mi.9.timevsm) +
            ( mi.4.struck * mi.9.timesml) +
            ( mi.4.mtruck * mi.9.timemed) +
            ( mi.4.ctruck * mi.9.timelrg)
  MW[35]  = (mi.4.vstruck * mi.9.distvsm) +
            ( mi.4.struck * mi.9.distsml) +
            ( mi.4.mtruck * mi.9.distmed) +
            ( mi.4.ctruck * mi.9.distlrg)
  MW[36]  = (mi.4.vstruck *(mi.9.distvsm * SMTROPC)) +
            ( mi.4.struck *(mi.9.distsml * SMTROPC)) +
            ( mi.4.mtruck *(mi.9.distmed * SMTROPC)) +
            ( mi.4.ctruck *(mi.9.distlrg * LRTROPC))
  ; MW[37] bridge tolls done in jloop below
  ; MW[38] cordon tolls done in jloop below

  ; TOLL Trips PM * Skims PM
  MW[39]  = (mi.4.vstrucktoll *  mi.9.tolltimevsm) +
            ( mi.4.strucktoll *  mi.9.tolltimesml) +
            ( mi.4.mtrucktoll *  mi.9.tolltimemed) +
            ( mi.4.ctrucktoll *  mi.9.tolltimelrg)
  MW[40]  = (mi.4.vstrucktoll *  mi.9.tolldistvsm) +
            ( mi.4.strucktoll *  mi.9.tolldistsml) +
            ( mi.4.mtrucktoll *  mi.9.tolldistmed) +
            ( mi.4.ctrucktoll *  mi.9.tolldistlrg)
  MW[41]  = (mi.4.vstrucktoll * (mi.9.tolldistvsm * SMTROPC)) +
            ( mi.4.strucktoll * (mi.9.tolldistsml * SMTROPC)) +
            ( mi.4.mtrucktoll * (mi.9.tolldistmed * SMTROPC)) +
            ( mi.4.ctrucktoll * (mi.9.tolldistlrg * LRTROPC))
 ; MW[42] bridge tolls done in jloop below
 ; MW[43] cordon tolls done in jloop below
  MW[44]  = (mi.4.vstrucktoll * mi.9.tollvtollvsm) +
            ( mi.4.strucktoll * mi.9.tollvtollsml) +
            ( mi.4.mtrucktoll * mi.9.tollvtollmed) +
            ( mi.4.ctrucktoll * mi.9.tollvtolllrg) ; Value tolls

  ; Trips EV * Skims EV
  MW[45]  = (mi.5.vstruck * mi.10.timevsm) +
            ( mi.5.struck * mi.10.timesml) +
            ( mi.5.mtruck * mi.10.timemed) +
            ( mi.5.ctruck * mi.10.timelrg)
  MW[46]  = (mi.5.vstruck * mi.10.distvsm) +
            ( mi.5.struck * mi.10.distsml) +
            ( mi.5.mtruck * mi.10.distmed) +
            ( mi.5.ctruck * mi.10.distlrg)
  MW[47]  = (mi.5.vstruck *(mi.10.distvsm * SMTROPC)) +
            ( mi.5.struck *(mi.10.distsml * SMTROPC)) +
            ( mi.5.mtruck *(mi.10.distmed * SMTROPC)) +
            ( mi.5.ctruck *(mi.10.distlrg * LRTROPC))
  ; MW[48] bridge tolls done in jloop below
  ; MW[49] cordon tolls done in jloop below

  ; TOLL Trips EV * Skims EV
  MW[50]  = (mi.5.vstrucktoll *  mi.10.tolltimevsm) +
            ( mi.5.strucktoll *  mi.10.tolltimesml) +
            ( mi.5.mtrucktoll *  mi.10.tolltimemed) +
            ( mi.5.ctrucktoll *  mi.10.tolltimelrg)
  MW[51]  = (mi.5.vstrucktoll *  mi.10.tolldistvsm) +
            ( mi.5.strucktoll *  mi.10.tolldistsml) +
            ( mi.5.mtrucktoll *  mi.10.tolldistmed) +
            ( mi.5.ctrucktoll *  mi.10.tolldistlrg)
  MW[52]  = (mi.5.vstrucktoll * (mi.10.tolldistvsm * SMTROPC)) +
            ( mi.5.strucktoll * (mi.10.tolldistsml * SMTROPC)) +
            ( mi.5.mtrucktoll * (mi.10.tolldistmed * SMTROPC)) +
            ( mi.5.ctrucktoll * (mi.10.tolldistlrg * LRTROPC))
  ; MW[53] bridge tolls done in jloop below
  ; MW[54] cordon tolls done in jloop below
  MW[55]  = (mi.5.vstrucktoll * mi.10.tollvtollvsm) +
            ( mi.5.strucktoll * mi.10.tollvtollsml) +
            ( mi.5.mtrucktoll * mi.10.tollvtollmed) +
            ( mi.5.ctrucktoll * mi.10.tollvtolllrg) ; Value tolls

  ; bridge tolls and cordon tolls moved here because jloop is necesssary to use destination zone as lookup for cordon
  jloop
    CORDON_TOLLCLASS = zi.1.CORDON[j]

    ; default to zero
    dest_cordon_cost_vsm = 0
    dest_cordon_cost_sml = 0
    dest_cordon_cost_med = 0
    dest_cordon_cost_lrg = 0

    if (CORDON_TOLLCLASS > 0)
      ; see SetTolls.JOB: _fac_index = TOLLCLASS*1000+USE
      ; assuming UES=1
      ; looking up EA cordon tolls and convert $2000 dollars to $2000 cents
      _fac_index = CORDON_TOLLCLASS*1000+1
      dest_cordon_cost_vsm = TOLLS(1, _fac_index)*100
      dest_cordon_cost_sml = TOLLS(2, _fac_index)*100
      dest_cordon_cost_med = TOLLS(3, _fac_index)*100
      dest_cordon_cost_lrg = TOLLS(4, _fac_index)*100
      ; we only need to check one since they're on the same row in the dbf
      if (dest_cordon_cost_vsm < 0)
        PRINT LIST= "Truck toll not found for tollclass in tazdata, facility index ", _fac_index
        ABORT MSG = "Truck toll not found for tollclass in tazdata"
      endif
    endif

    ; Trips EA * Skims EA
    MW[4] = (mi.1.vstruck * (mi.6.btollvsm - dest_cordon_cost_vsm)) +
            ( mi.1.struck * (mi.6.btollsml - dest_cordon_cost_sml)) +
            ( mi.1.mtruck * (mi.6.btollmed - dest_cordon_cost_med)) +
            ( mi.1.ctruck * (mi.6.btolllrg - dest_cordon_cost_lrg))             ; Bridge tolls (btolls - cordon tolls)
    MW[5] = (mi.1.vstruck * dest_cordon_cost_vsm) +
            ( mi.1.struck * dest_cordon_cost_sml) +
            ( mi.1.mtruck * dest_cordon_cost_med) +
            ( mi.1.ctruck * dest_cordon_cost_lrg)                               ; Cordon tolls

    ; TOLL Trips EA * Skims EA
    MW[9] = (mi.1.vstrucktoll * (mi.6.tollbtollvsm - dest_cordon_cost_vsm)) +
            ( mi.1.strucktoll * (mi.6.tollbtollsml - dest_cordon_cost_sml)) +
            ( mi.1.mtrucktoll * (mi.6.tollbtollmed - dest_cordon_cost_med)) +
            ( mi.1.ctrucktoll * (mi.6.tollbtolllrg - dest_cordon_cost_lrg))     ; (btolls - cordon tolls)
    MW[10]= (mi.1.vstrucktoll * dest_cordon_cost_vsm) +
            ( mi.1.strucktoll * dest_cordon_cost_sml) +
            ( mi.1.mtrucktoll * dest_cordon_cost_med) +
            ( mi.1.ctrucktoll * dest_cordon_cost_lrg)                           ; Cordon tolls

    if (CORDON_TOLLCLASS > 0)
      ; see SetTolls.JOB: _fac_index = TOLLCLASS*1000+USE
      ; assuming UES=1
      ; looking up AM cordon tolls and convert $2000 dollars to $2000 cents
      _fac_index = CORDON_TOLLCLASS*1000+1
      dest_cordon_cost_vsm = TOLLS(5, _fac_index)*100
      dest_cordon_cost_sml = TOLLS(6, _fac_index)*100
      dest_cordon_cost_med = TOLLS(7, _fac_index)*100
      dest_cordon_cost_lrg = TOLLS(8, _fac_index)*100
      ; we only need to check one since they're on the same row in the dbf
      if (dest_cordon_cost_vsm < 0)
        PRINT LIST= "Truck toll not found for tollclass in tazdata, facility index ", _fac_index
        ABORT MSG = "Truck toll not found for tollclass in tazdata"
      endif
    endif

    ; Trips AM * Skims AM
    MW[15] = (mi.2.vstruck * (mi.7.btollvsm - dest_cordon_cost_vsm)) +
             ( mi.2.struck * (mi.7.btollsml - dest_cordon_cost_sml)) +
             ( mi.2.mtruck * (mi.7.btollmed - dest_cordon_cost_med)) +
             ( mi.2.ctruck * (mi.7.btolllrg - dest_cordon_cost_lrg))            ; Bridge tolls (btolls - cordon tolls)
    MW[16] = (mi.2.vstruck * dest_cordon_cost_vsm) +
             ( mi.2.struck * dest_cordon_cost_sml) +
             ( mi.2.mtruck * dest_cordon_cost_med) +
             ( mi.2.ctruck * dest_cordon_cost_lrg)                              ; Cordon tolls
    ; TOLL Trips AM * Skims AM
    MW[20] = (mi.2.vstrucktoll * (mi.7.tollbtollvsm - dest_cordon_cost_vsm)) +
             ( mi.2.strucktoll * (mi.7.tollbtollsml - dest_cordon_cost_sml)) +
             ( mi.2.mtrucktoll * (mi.7.tollbtollmed - dest_cordon_cost_med)) +
             ( mi.2.ctrucktoll * (mi.7.tollbtolllrg - dest_cordon_cost_lrg))    ; Bridge tolls (btolls - cordon tolls)
    MW[21] = (mi.2.vstrucktoll * dest_cordon_cost_vsm) +
             ( mi.2.strucktoll * dest_cordon_cost_sml) +
             ( mi.2.mtrucktoll * dest_cordon_cost_med) +
             ( mi.2.ctrucktoll * dest_cordon_cost_lrg)                          ; Cordon tolls

    if (CORDON_TOLLCLASS > 0)
      ; see SetTolls.JOB: _fac_index = TOLLCLASS*1000+USE
      ; assuming UES=1
      ; looking up MD cordon tolls and convert $2000 dollars to $2000 cents
      _fac_index = CORDON_TOLLCLASS*1000+1
      dest_cordon_cost_vsm = TOLLS(9,  _fac_index)*100
      dest_cordon_cost_sml = TOLLS(10, _fac_index)*100
      dest_cordon_cost_med = TOLLS(11, _fac_index)*100
      dest_cordon_cost_lrg = TOLLS(12, _fac_index)*100
      ; we only need to check one since they're on the same row in the dbf
      if (dest_cordon_cost_vsm < 0)
        PRINT LIST= "Truck toll not found for tollclass in tazdata, facility index ", _fac_index
        ABORT MSG = "Truck toll not found for tollclass in tazdata"
      endif
    endif

    ; Trips MD * Skims MD
    MW[26] = (mi.3.vstruck * (mi.8.btollvsm - dest_cordon_cost_vsm)) +
             ( mi.3.struck * (mi.8.btollsml - dest_cordon_cost_sml)) +
             ( mi.3.mtruck * (mi.8.btollmed - dest_cordon_cost_med)) +
             ( mi.3.ctruck * (mi.8.btolllrg - dest_cordon_cost_lrg))            ; Bridge tolls (btolls - cordon tolls)
    MW[27] = (mi.3.vstruck * dest_cordon_cost_vsm) +
             ( mi.3.struck * dest_cordon_cost_sml) +
             ( mi.3.mtruck * dest_cordon_cost_med) +
             ( mi.3.ctruck * dest_cordon_cost_lrg)                              ; Cordon tolls
    ; TOLL Trips MD * Skims MD
    MW[31] = (mi.3.vstrucktoll * (mi.8.tollbtollvsm - dest_cordon_cost_vsm)) +
             ( mi.3.strucktoll * (mi.8.tollbtollsml - dest_cordon_cost_sml)) +
             ( mi.3.mtrucktoll * (mi.8.tollbtollmed - dest_cordon_cost_med)) +
             ( mi.3.ctrucktoll * (mi.8.tollbtolllrg - dest_cordon_cost_lrg))    ; Bridge tolls (btolls - cordon tolls)
    MW[32] = (mi.3.vstrucktoll * dest_cordon_cost_vsm) +
             ( mi.3.strucktoll * dest_cordon_cost_sml) +
             ( mi.3.mtrucktoll * dest_cordon_cost_med) +
             ( mi.3.ctrucktoll * dest_cordon_cost_lrg)                          ; Cordon tolls

    if (CORDON_TOLLCLASS > 0)
      ; see SetTolls.JOB: _fac_index = TOLLCLASS*1000+USE
      ; assuming UES=1
      ; looking up PM cordon tolls and convert $2000 dollars to $2000 cents
      _fac_index = CORDON_TOLLCLASS*1000+1
      dest_cordon_cost_vsm = TOLLS(13, _fac_index)*100
      dest_cordon_cost_sml = TOLLS(14, _fac_index)*100
      dest_cordon_cost_med = TOLLS(15, _fac_index)*100
      dest_cordon_cost_lrg = TOLLS(16, _fac_index)*100
      ; we only need to check one since they're on the same row in the dbf
      if (dest_cordon_cost_vsm < 0)
        PRINT LIST= "Truck toll not found for tollclass in tazdata, facility index ", _fac_index
        ABORT MSG = "Truck toll not found for tollclass in tazdata"
      endif
    endif

    ; Trips PM * Skims PM
    MW[37] = (mi.4.vstruck * (mi.9.btollvsm - dest_cordon_cost_vsm)) +
             ( mi.4.struck * (mi.9.btollsml - dest_cordon_cost_sml)) +
             ( mi.4.mtruck * (mi.9.btollmed - dest_cordon_cost_med)) +
             ( mi.4.ctruck * (mi.9.btolllrg - dest_cordon_cost_lrg))           ; Bridge tolls (btolls - cordon)
    MW[38] = (mi.4.vstruck * dest_cordon_cost_vsm) +
             ( mi.4.struck * dest_cordon_cost_sml) +
             ( mi.4.mtruck * dest_cordon_cost_med) +
             ( mi.4.ctruck * dest_cordon_cost_lrg)                             ; Cordon tolls
    ; TOLL Trips PM * Skims PM
    MW[42] = (mi.4.vstrucktoll * (mi.9.tollvtollvsm - dest_cordon_cost_vsm)) +
             ( mi.4.strucktoll * (mi.9.tollvtollsml - dest_cordon_cost_sml)) +
             ( mi.4.mtrucktoll * (mi.9.tollvtollmed - dest_cordon_cost_med)) +
             ( mi.4.ctrucktoll * (mi.9.tollvtolllrg - dest_cordon_cost_lrg))   ; Bridge tolls (btolls - cordon tolls)
    MW[43] = (mi.4.vstrucktoll * dest_cordon_cost_vsm) +
             ( mi.4.strucktoll * dest_cordon_cost_sml) +
             ( mi.4.mtrucktoll * dest_cordon_cost_med) +
             ( mi.4.ctrucktoll * dest_cordon_cost_lrg)                         ; Cordon tolls

    if (CORDON_TOLLCLASS > 0)
      ; see SetTolls.JOB: _fac_index = TOLLCLASS*1000+USE
      ; assuming UES=1
      ; looking up EV cordon tolls and convert $2000 dollars to $2000 cents
      _fac_index = CORDON_TOLLCLASS*1000+1
      dest_cordon_cost_vsm = TOLLS(17, _fac_index)*100
      dest_cordon_cost_sml = TOLLS(18, _fac_index)*100
      dest_cordon_cost_med = TOLLS(19, _fac_index)*100
      dest_cordon_cost_lrg = TOLLS(20, _fac_index)*100
      ; we only need to check one since they're on the same row in the dbf
      if (dest_cordon_cost_vsm < 0)
        PRINT LIST= "Truck toll not found for tollclass in tazdata, facility index ", _fac_index
        ABORT MSG = "Truck toll not found for tollclass in tazdata"
      endif
    endif

    ; Trips EV * Skims EV
    MW[48] = (mi.5.vstruck * (mi.10.btollvsm - dest_cordon_cost_vsm)) +
             ( mi.5.struck * (mi.10.btollsml - dest_cordon_cost_sml)) +
             ( mi.5.mtruck * (mi.10.btollmed - dest_cordon_cost_med)) +
             ( mi.5.ctruck * (mi.10.btolllrg - dest_cordon_cost_lrg))           ; Bridge tolls (btolls - cordon tolls)
    MW[49] = (mi.5.vstruck * dest_cordon_cost_vsm) +
             ( mi.5.struck * dest_cordon_cost_sml) +
             ( mi.5.mtruck * dest_cordon_cost_med) +
             ( mi.5.ctruck * dest_cordon_cost_lrg)                             ; Cordon tolls
    ; TOLL Trips PM * Skims PM
    MW[53] = (mi.5.vstrucktoll * (mi.10.tollbtollvsm - dest_cordon_cost_vsm)) +
             ( mi.5.strucktoll * (mi.10.tollbtollsml - dest_cordon_cost_sml)) +
             ( mi.5.mtrucktoll * (mi.10.tollbtollmed - dest_cordon_cost_med)) +
             ( mi.5.ctrucktoll * (mi.10.tollbtolllrg - dest_cordon_cost_lrg))    ; Bridge tolls (btolls - cordon tolls)
    MW[54] = (mi.5.vstrucktoll * dest_cordon_cost_vsm) +
             ( mi.5.strucktoll * dest_cordon_cost_sml) +
             ( mi.5.mtrucktoll * dest_cordon_cost_med) +
             ( mi.5.ctrucktoll * dest_cordon_cost_lrg)                          ; Cordon tolls
  endjloop

  ; Compute Daily Trips, TripTime, TripDist, TripCost, BridgeToll, ValueToll
  ;
  ; NOTE that the zones may be unconnected, resulting in huge skim values, so we need to exclude those here
  MW[60] = mi.11.connected*mi.11.connected.t*
          (mi.1.vstruck + mi.1.struck + mi.1.mtruck + mi.1.ctruck + mi.1.vstrucktoll + mi.1.strucktoll + mi.1.mtrucktoll + mi.1.ctrucktoll +
           mi.2.vstruck + mi.2.struck + mi.2.mtruck + mi.2.ctruck + mi.2.vstrucktoll + mi.2.strucktoll + mi.2.mtrucktoll + mi.2.ctrucktoll +
           mi.3.vstruck + mi.3.struck + mi.3.mtruck + mi.3.ctruck + mi.3.vstrucktoll + mi.3.strucktoll + mi.3.mtrucktoll + mi.3.ctrucktoll +
           mi.4.vstruck + mi.4.struck + mi.4.mtruck + mi.4.ctruck + mi.4.vstrucktoll + mi.4.strucktoll + mi.4.mtrucktoll + mi.4.ctrucktoll +
           mi.5.vstruck + mi.5.struck + mi.5.mtruck + mi.5.ctruck + mi.5.vstrucktoll + mi.5.strucktoll + mi.5.mtrucktoll + mi.5.ctrucktoll)
  MW[61] = mi.11.connected*mi.11.connected.t*(MW[1] + MW[6] + MW[12] + MW[17] + MW[23] + MW[28] + MW[34] + MW[39] + MW[45] + MW[50]) ; TripTime
  MW[62] = mi.11.connected*mi.11.connected.t*(MW[2] + MW[7] + MW[13] + MW[18] + MW[24] + MW[29] + MW[35] + MW[40] + MW[46] + Mw[51]) ; TripDist
  MW[63] = mi.11.connected*mi.11.connected.t*(MW[3] + MW[8] + MW[14] + MW[19] + MW[25] + MW[30] + MW[36] + MW[41] + MW[47] + MW[52]) ; TripCost
  MW[64] = mi.11.connected*mi.11.connected.t*(MW[4] + MW[9] + MW[15] + MW[20] + MW[26] + MW[31] + MW[37] + MW[42] + MW[48] + MW[53]) ; BridgeToll
  MW[65] = mi.11.connected*mi.11.connected.t*(MW[5] +MW[10] + MW[16] + MW[21] + MW[27] + MW[32] + MW[38] + MW[43] + MW[49] + MW[54]) ; CordonToll
  MW[66] = mi.11.connected*mi.11.connected.t*(       MW[11]          + MW[22]          + MW[33]          + MW[44]          + MW[55]) ; ValueToll

  Daily_Trips   = Daily_Trips   + ROWSUM(60)
  TripTime      = TripTime      + ROWSUM(61)
  TripDist      = TripDist      + ROWSUM(62)
  TripCost      = TripCost      + ROWSUM(63)
  Bridge_tolls  = Bridge_tolls  + ROWSUM(64)
  Cordon_tolls_w_discount  = Cordon_tolls_w_discount  + ROWSUM(65)
  Cordon_tolls_no_discount = Cordon_tolls_no_discount + ROWSUM(65) ;truck has no income-based discount
  Value_tolls_w_discount   = Value_tolls_w_discount   + ROWSUM(66)
  Value_tolls_no_discount  = Value_tolls_no_discount  + ROWSUM(66)

  ; Compute each time period's Trips, TripTime, TripDist, TripCost, BridgeToll, ValueToll
  ; EA
  ; NOTE that the zones may be unconnected, resulting in huge skim values, so we need to exclude those here
  MW[67] = mi.11.connected*mi.11.connected.t*
          (mi.1.vstruck + mi.1.struck + mi.1.mtruck + mi.1.ctruck + mi.1.vstrucktoll + mi.1.strucktoll + mi.1.mtrucktoll + mi.1.ctrucktoll)
  MW[68] = mi.11.connected*mi.11.connected.t*(MW[1] + MW[6]) ; TripTime
  MW[69] = mi.11.connected*mi.11.connected.t*(MW[2] + MW[7]) ; TripDist
  MW[70] = mi.11.connected*mi.11.connected.t*(MW[3] + MW[8]) ; TripCost
  MW[71] = mi.11.connected*mi.11.connected.t*(MW[4] + MW[9]) ; BridgeToll
  MW[72] = mi.11.connected*mi.11.connected.t*(MW[5] +MW[10]) ; CordonToll
  MW[73] = mi.11.connected*mi.11.connected.t*(MW[11]) ; ValueToll

  Daily_Trips_EA   = Daily_Trips_EA   + ROWSUM(67)
  TripTime_EA      = TripTime_EA      + ROWSUM(68)
  TripDist_EA      = TripDist_EA      + ROWSUM(69)
  TripCost_EA      = TripCost_EA      + ROWSUM(70)
  Bridge_tolls_EA  = Bridge_tolls_EA  + ROWSUM(71)
  Cordon_tolls_w_discount_EA  = Cordon_tolls_w_discount_EA  + ROWSUM(72)
  Cordon_tolls_no_discount_EA = Cordon_tolls_no_discount_EA + ROWSUM(72) ;truck has no income-based discount
  Value_tolls_w_discount_EA   = Value_tolls_w_discount_EA   + ROWSUM(73)
  Value_tolls_no_discount_EA  = Value_tolls_no_discount_EA  + ROWSUM(73)

  ; AM
  MW[74] = mi.11.connected*mi.11.connected.t*
          (mi.2.vstruck + mi.2.struck + mi.2.mtruck + mi.2.ctruck + mi.2.vstrucktoll + mi.2.strucktoll + mi.2.mtrucktoll + mi.2.ctrucktoll)
  MW[75] = mi.11.connected*mi.11.connected.t*(MW[12] + MW[17]) ; TripTime
  MW[76] = mi.11.connected*mi.11.connected.t*(MW[13] + MW[18]) ; TripDist
  MW[77] = mi.11.connected*mi.11.connected.t*(MW[14] + MW[19]) ; TripCost
  MW[78] = mi.11.connected*mi.11.connected.t*(MW[15] + MW[20]) ; BridgeToll
  MW[79] = mi.11.connected*mi.11.connected.t*(MW[16] + MW[21]) ; CordonToll
  MW[80] = mi.11.connected*mi.11.connected.t*(MW[22])          ; ValueToll

  Daily_Trips_AM   = Daily_Trips_AM   + ROWSUM(74)
  TripTime_AM      = TripTime_AM      + ROWSUM(75)
  TripDist_AM      = TripDist_AM      + ROWSUM(76)
  TripCost_AM      = TripCost_AM      + ROWSUM(77)
  Bridge_tolls_AM  = Bridge_tolls_AM  + ROWSUM(78)
  Cordon_tolls_w_discount_AM  = Cordon_tolls_w_discount_AM  + ROWSUM(79)
  Cordon_tolls_no_discount_AM = Cordon_tolls_no_discount_AM + ROWSUM(79) ;truck has no income-based discount
  Value_tolls_w_discount_AM   = Value_tolls_w_discount_AM   + ROWSUM(80)
  Value_tolls_no_discount_AM  = Value_tolls_no_discount_AM  + ROWSUM(80)

  ; MD
  MW[81] = mi.11.connected*mi.11.connected.t*
          (mi.3.vstruck + mi.3.struck + mi.3.mtruck + mi.3.ctruck + mi.3.vstrucktoll + mi.3.strucktoll + mi.3.mtrucktoll + mi.3.ctrucktoll)
  MW[82] = mi.11.connected*mi.11.connected.t*(MW[23] + MW[28]) ; TripTime
  MW[83] = mi.11.connected*mi.11.connected.t*(MW[24] + MW[29]) ; TripDist
  MW[84] = mi.11.connected*mi.11.connected.t*(MW[25] + MW[30]) ; TripCost
  MW[85] = mi.11.connected*mi.11.connected.t*(MW[26] + MW[31]) ; BridgeToll
  MW[86] = mi.11.connected*mi.11.connected.t*(MW[27] + MW[32]) ; CordonToll
  MW[87] = mi.11.connected*mi.11.connected.t*(MW[33]) ; ValueToll

  Daily_Trips_MD   = Daily_Trips_MD   + ROWSUM(81)
  TripTime_MD      = TripTime_MD      + ROWSUM(82)
  TripDist_MD      = TripDist_MD      + ROWSUM(83)
  TripCost_MD      = TripCost_MD      + ROWSUM(84)
  Bridge_tolls_MD  = Bridge_tolls_MD  + ROWSUM(85)
  Cordon_tolls_w_discount_MD  = Cordon_tolls_w_discount_MD  + ROWSUM(86)
  Cordon_tolls_no_discount_MD = Cordon_tolls_no_discount_MD + ROWSUM(86) ;truck has no income-based discount
  Value_tolls_w_discount_MD   = Value_tolls_w_discount_MD   + ROWSUM(87)
  Value_tolls_no_discount_MD  = Value_tolls_no_discount_MD  + ROWSUM(87)  

  ; PM
  MW[88] = mi.11.connected*mi.11.connected.t*
          (mi.4.vstruck + mi.4.struck + mi.4.mtruck + mi.4.ctruck + mi.4.vstrucktoll + mi.4.strucktoll + mi.4.mtrucktoll + mi.4.ctrucktoll)
  MW[89] = mi.11.connected*mi.11.connected.t*(MW[34] + MW[39]) ; TripTime
  MW[90] = mi.11.connected*mi.11.connected.t*(MW[35] + MW[40]) ; TripDist
  MW[91] = mi.11.connected*mi.11.connected.t*(MW[36] + MW[41]) ; TripCost
  MW[92] = mi.11.connected*mi.11.connected.t*(MW[37] + MW[42]) ; BridgeToll
  MW[93] = mi.11.connected*mi.11.connected.t*(MW[38] + MW[43]) ; CordonToll
  MW[94] = mi.11.connected*mi.11.connected.t*(MW[44])          ; ValueToll

  Daily_Trips_PM   = Daily_Trips_PM   + ROWSUM(88)
  TripTime_PM      = TripTime_PM      + ROWSUM(89)
  TripDist_PM      = TripDist_PM      + ROWSUM(90)
  TripCost_PM      = TripCost_PM      + ROWSUM(91)
  Bridge_tolls_PM  = Bridge_tolls_PM  + ROWSUM(92)
  Cordon_tolls_w_discount_PM  = Cordon_tolls_w_discount_PM  + ROWSUM(93)
  Cordon_tolls_no_discount_PM = Cordon_tolls_no_discount_PM + ROWSUM(93) ;truck has no income-based discount
  Value_tolls_w_discount_PM   = Value_tolls_w_discount_PM   + ROWSUM(94)
  Value_tolls_no_discount_PM  = Value_tolls_no_discount_PM  + ROWSUM(94)

  ; EV
  MW[95] = mi.11.connected*mi.11.connected.t*
          (mi.5.vstruck + mi.5.struck + mi.5.mtruck + mi.5.ctruck + mi.5.vstrucktoll + mi.5.strucktoll + mi.5.mtrucktoll + mi.5.ctrucktoll)
  MW[96] = mi.11.connected*mi.11.connected.t*(MW[45] + MW[50]) ; TripTime
  MW[97] = mi.11.connected*mi.11.connected.t*(MW[46] + Mw[51]) ; TripDist
  MW[98] = mi.11.connected*mi.11.connected.t*(MW[47] + MW[52]) ; TripCost
  MW[99] = mi.11.connected*mi.11.connected.t*(MW[48] + MW[53]) ; BridgeToll
  MW[100] = mi.11.connected*mi.11.connected.t*(MW[49] + MW[54]) ; CordonToll
  MW[101] = mi.11.connected*mi.11.connected.t*(MW[55]) ; ValueToll

  Daily_Trips_EV   = Daily_Trips_EV   + ROWSUM(95)
  TripTime_EV      = TripTime_EV      + ROWSUM(96)
  TripDist_EV      = TripDist_EV      + ROWSUM(97)
  TripCost_EV      = TripCost_EV      + ROWSUM(98)
  Bridge_tolls_EV  = Bridge_tolls_EV  + ROWSUM(99)
  Cordon_tolls_w_discount_EV  = Cordon_tolls_w_discount_EV  + ROWSUM(100)
  Cordon_tolls_no_discount_EV = Cordon_tolls_no_discount_EV + ROWSUM(100) ;truck has no income-based discount
  Value_tolls_w_discount_EV   = Value_tolls_w_discount_EV   + ROWSUM(101)
  Value_tolls_no_discount_EV  = Value_tolls_no_discount_EV  + ROWSUM(101)

  ; Daily rsults
  ; "Income,Mode,Daily Person Trips,Daily Vehicle Trips,Person Minutes,Vehicle Minutes,Person Miles,Vehicle Miles,Total Cost"
  if(I = ZONES) PRINT PRINTO=1 CSV=T LIST= "na", "truck", Daily_Trips(10.2L), Daily_Trips(10.2L),
                                                         TripTime(10.2L),   TripTime(10.2L),
                                                         TripDist(10.2L),   TripDist(10.2L),
                                                         TripCost(10.2L),
                                                         "na","na",
                                                         Bridge_tolls(10.2L), Value_tolls_w_discount(10.2L), Value_tolls_no_discount(10.2L),
                                                         Cordon_tolls_w_discount(10.2L), Cordon_tolls_no_discount(10.2L)
  ; Time period results
  Period = 'EA'
  if(I = ZONES) PRINT PRINTO=2 CSV=T LIST= Period, "na", "truck", Daily_Trips_EA(10.2L), Daily_Trips_EA(10.2L),
                                                         TripTime_EA(10.2L),   TripTime_EA(10.2L),
                                                         TripDist_EA(10.2L),   TripDist_EA(10.2L),
                                                         TripCost_EA(10.2L),
                                                         "na","na",
                                                         Bridge_tolls_EA(10.2L), Value_tolls_w_discount_EA(10.2L), Value_tolls_no_discount_EA(10.2L),
                                                         Cordon_tolls_w_discount_EA(10.2L), Cordon_tolls_no_discount_EA(10.2L)

  Period = 'AM'
  if(I = ZONES) PRINT PRINTO=3 CSV=T LIST= Period, "na", "truck", Daily_Trips_AM(10.2L), Daily_Trips_AM(10.2L),
                                                         TripTime_AM(10.2L),   TripTime_AM(10.2L),
                                                         TripDist_AM(10.2L),   TripDist_AM(10.2L),
                                                         TripCost_AM(10.2L),
                                                         "na","na",
                                                         Bridge_tolls_AM(10.2L), Value_tolls_w_discount_AM(10.2L), Value_tolls_no_discount_AM(10.2L),
                                                         Cordon_tolls_w_discount_AM(10.2L), Cordon_tolls_no_discount_AM(10.2L)

  Period = 'MD'
  if(I = ZONES) PRINT PRINTO=4 CSV=T LIST= Period, "na", "truck", Daily_Trips_MD(10.2L), Daily_Trips_MD(10.2L),
                                                         TripTime_MD(10.2L),   TripTime_MD(10.2L),
                                                         TripDist_MD(10.2L),   TripDist_MD(10.2L),
                                                         TripCost_MD(10.2L),
                                                         "na","na",
                                                         Bridge_tolls_MD(10.2L), Value_tolls_w_discount_MD(10.2L), Value_tolls_no_discount_MD(10.2L),
                                                         Cordon_tolls_w_discount_MD(10.2L), Cordon_tolls_no_discount_MD(10.2L)
  
  Period = 'PM'
  if(I = ZONES) PRINT PRINTO=5 CSV=T LIST= Period, "na", "truck", Daily_Trips_PM(10.2L), Daily_Trips_PM(10.2L),
                                                         TripTime_PM(10.2L),   TripTime_PM(10.2L),
                                                         TripDist_PM(10.2L),   TripDist_PM(10.2L),
                                                         TripCost_PM(10.2L),
                                                         "na","na",
                                                         Bridge_tolls_PM(10.2L), Value_tolls_w_discount_PM(10.2L), Value_tolls_no_discount_PM(10.2L),
                                                         Cordon_tolls_w_discount_PM(10.2L), Cordon_tolls_no_discount_PM(10.2L)

  Period = 'EV'
  if(I = ZONES) PRINT PRINTO=6 CSV=T LIST= Period, "na", "truck", Daily_Trips_EV(10.2L), Daily_Trips_EV(10.2L),
                                                         TripTime_EV(10.2L),   TripTime_EV(10.2L),
                                                         TripDist_EV(10.2L),   TripDist_EV(10.2L),
                                                         TripCost_EV(10.2L),
                                                         "na","na",
                                                         Bridge_tolls_EV(10.2L), Value_tolls_w_discount_EV(10.2L), Value_tolls_no_discount_EV(10.2L),
                                                         Cordon_tolls_w_discount_EV(10.2L), Cordon_tolls_no_discount_EV(10.2L)                                                         
ENDRUN


; Combine time perod results together

* copy metrics\auto_times_EA.csv + metrics\auto_times_AM.csv + metrics\auto_times_MD.csv + metrics\auto_times_PM.csv + metrics\auto_times_EV.csv metrics\auto_timesbyTimePeriod.csv
; delete the individual ones
* del metrics\auto_times_*.csv