; Create auto summary based on trips per day by income quartile and mode of:
; - Average travel time in minutes
; - Average travel distance in miles
; - Average travel cost (auto operating cost, NOT including BRIDGE OR VALUE TOLLS)
; - Total bridge tolls paid (includes cordon tolls)
; - Total value tolls paid
;   by mode and income quartile
;   in year 2000 cents
;

; find no access zones
RUN PGM=MATRIX
  FILEI MATI[1]   = "skims\HWYSKMAM.tpp"
  FILEO RECO[1]   = "skims\unconnected_zones.dbf", FIELDS=ZONE(5.0), UNCONNECTED(3.0)

  MW[1] = MI.1.DISTDA
  IF (ROWMIN(1) == 500000)
    RO.ZONE = I
    RO.UNCONNECTED = 1
    WRITE RECO=1
  ENDIF
ENDRUN

; Convert to has access matrix -- all ones if has access
RUN PGM=MATRIX
  FILEI ZDATI[1] = "skims\unconnected_zones.dbf"
  FILEO MATO[1]  = "skims\connected_zones.tpp", MO=1, NAME=CONNECTED
  ZONES=1475

  MW[1] = 1
  IF (ZI.1.UNCONNECTED=1) MW[1] = 0
ENDRUN


RUN PGM = MATRIX
  ; Read truck trips for all time periods
  FILEI MATI[1] = "nonres\tripstrkEA.tpp"
  FILEI MATI[2] = "nonres\tripstrkAM.tpp"
  FILEI MATI[3] = "nonres\tripstrkMD.tpp"
  FILEI MATI[4] = "nonres\tripstrkPM.tpp"
  FILEI MATI[5] = "nonres\tripstrkEV.tpp"

  ; Read Highway Skims
  FILEI MATI[6] = "skims\COM_HWYSKIMEA.tpp"
  FILEI MATI[7] = "skims\COM_HWYSKIMAM.tpp"
  FILEI MATI[8] = "skims\COM_HWYSKIMMD.tpp"
  FILEI MATI[9] = "skims\COM_HWYSKIMPM.tpp"
  FILEI MATI[10]= "skims\COM_HWYSKIMEV.tpp"

  FILEI MATI[11] = "skims\connected_zones.tpp"

  FILEI ZDATI[1] = "landuse\tazData.dbf"  ; need cordon and cordon cost information

  ; the input tolls file
  FILEI LOOKUPI[1]= "hwy\tolls.dbf"
  ; load toll values
  ; We don't expect there to be cordon tolls other than AM/PM inbound but might as well handle it if there are
  ; lookup is by FAC_INDEX because its a unique index into the file, while TOLLCLASS is not
  LOOKUP LOOKUPI=1, LIST=y, NAME=TOLLS,
    LOOKUP[1] = FAC_INDEX, RESULT=TOLLEA_VSM, ; EA
    LOOKUP[2] = FAC_INDEX, RESULT=TOLLEA_SML,
    LOOKUP[3] = FAC_INDEX, RESULT=TOLLEA_MED,
    LOOKUP[4] = FAC_INDEX, RESULT=TOLLEA_LRG,
    LOOKUP[5] = FAC_INDEX, RESULT=TOLLAM_VSM, ; AM
    LOOKUP[6] = FAC_INDEX, RESULT=TOLLAM_SML,
    LOOKUP[7] = FAC_INDEX, RESULT=TOLLAM_MED,
    LOOKUP[8] = FAC_INDEX, RESULT=TOLLAM_LRG,
    LOOKUP[9] = FAC_INDEX, RESULT=TOLLMD_VSM, ; MD
    LOOKUP[10]= FAC_INDEX, RESULT=TOLLMD_SML,
    LOOKUP[11]= FAC_INDEX, RESULT=TOLLMD_MED,
    LOOKUP[12]= FAC_INDEX, RESULT=TOLLMD_LRG,
    LOOKUP[13]= FAC_INDEX, RESULT=TOLLPM_VSM, ; PM
    LOOKUP[14]= FAC_INDEX, RESULT=TOLLPM_SML,
    LOOKUP[15]= FAC_INDEX, RESULT=TOLLPM_MED,
    LOOKUP[16]= FAC_INDEX, RESULT=TOLLPM_LRG,
    LOOKUP[17]= FAC_INDEX, RESULT=TOLLEV_VSM, ; EV
    LOOKUP[18]= FAC_INDEX, RESULT=TOLLEV_SML, 
    LOOKUP[19]= FAC_INDEX, RESULT=TOLLEV_MED, 
    LOOKUP[20]= FAC_INDEX, RESULT=TOLLEV_LRG, 
    FAIL[1]=-99,
    FAIL[2]=-99,
    FAIL[3]=-99
    ; return -99 if FAC_INDEX is not found

  ; Read Truck Operating Cost from Properties file
  Read File = "CTRAMP\scripts\block\hwyParam.block"

  FILEO PRINTO[1] = "metrics\auto_timestruckonly.csv",APPEND=T                   ; Daily output
  FILEO PRINTO[2] = "metrics\auto_times_truck_only_EA.csv",APPEND=T                ; EA output
  FILEO PRINTO[3] = "metrics\auto_times_truck_only_AM.csv",APPEND=T                ; AM output
  FILEO PRINTO[4] = "metrics\auto_times_truck_only_MD.csv",APPEND=T                ; MD output
  FILEO PRINTO[5] = "metrics\auto_times_truck_only_PM.csv",APPEND=T                ; PM output
  FILEO PRINTO[6] = "metrics\auto_times_truck_only_EV.csv",APPEND=T                ; EV output

  ; Trips EA * Skims EA
  MW[1]   = (mi.1.vstruck * mi.6.timevsm) +
            ( mi.1.struck * mi.6.timesml) +
            ( mi.1.mtruck * mi.6.timemed) +
            ( mi.1.ctruck * mi.6.timelrg)
  MW[2]   = (mi.1.vstruck * mi.6.distvsm) +
            ( mi.1.struck * mi.6.distsml) +
            ( mi.1.mtruck * mi.6.distmed) +
            ( mi.1.ctruck * mi.6.distlrg)
  MW[3]   = (mi.1.vstruck *(mi.6.distvsm * SMTROPC)) +
            ( mi.1.struck *(mi.6.distsml * SMTROPC)) +
            ( mi.1.mtruck *(mi.6.distmed * SMTROPC)) +
            ( mi.1.ctruck *(mi.6.distlrg * LRTROPC))
  ; MW[4] bridge tolls done in jloop below
  ; MW[5] cordon tolls done in jloop below

  ; TOLL Trips EA * Skims EA
  MW[6]   = (mi.1.vstrucktoll *  mi.6.tolltimevsm) +
            ( mi.1.strucktoll *  mi.6.tolltimesml) +
            ( mi.1.mtrucktoll *  mi.6.tolltimemed) +
            ( mi.1.ctrucktoll *  mi.6.tolltimelrg)
  MW[7]   = (mi.1.vstrucktoll *  mi.6.tolldistvsm) +
            ( mi.1.strucktoll *  mi.6.tolldistsml) +
            ( mi.1.mtrucktoll *  mi.6.tolldistmed) +
            ( mi.1.ctrucktoll *  mi.6.tolldistlrg)
  MW[8]   = (mi.1.vstrucktoll * (mi.6.tolldistvsm * SMTROPC)) +
            ( mi.1.strucktoll * (mi.6.tolldistsml * SMTROPC)) +
            ( mi.1.mtrucktoll * (mi.6.tolldistmed * SMTROPC)) +
            ( mi.1.ctrucktoll * (mi.6.tolldistlrg * LRTROPC))
  ; MW[9] bridge tolls done in jloop below
  ; MW[10] cordon tolls done in jloop below
  MW[11]   = (mi.1.vstrucktoll * mi.6.tollvtollvsm) +
            ( mi.1.strucktoll * mi.6.tollvtollsml) +
            ( mi.1.mtrucktoll * mi.6.tollvtollmed) +
            ( mi.1.ctrucktoll * mi.6.tollvtolllrg) ; Value tolls

  ; Trips AM * Skims AM
  MW[12]  = (mi.2.vstruck * mi.7.timevsm) +
            ( mi.2.struck * mi.7.timesml) +
            ( mi.2.mtruck * mi.7.timemed) +
            ( mi.2.ctruck * mi.7.timelrg)
  MW[13]  = (mi.2.vstruck * mi.7.distvsm) +
            ( mi.2.struck * mi.7.distsml) +
            ( mi.2.mtruck * mi.7.distmed) +
            ( mi.2.ctruck * mi.7.distlrg)
  MW[14]  = (mi.2.vstruck *(mi.7.distvsm * SMTROPC)) +
            ( mi.2.struck *(mi.7.distsml * SMTROPC)) +
            ( mi.2.mtruck *(mi.7.distmed * SMTROPC)) +
            ( mi.2.ctruck *(mi.7.distlrg * LRTROPC))
  ; MW[15] bridge tolls done in jloop below
  ; MW[16] cordon tolls done in jloop below

  ; TOLL Trips AM * Skims AM
  MW[17]  = (mi.2.vstrucktoll *  mi.7.tolltimevsm) +
            ( mi.2.strucktoll *  mi.7.tolltimesml) +
            ( mi.2.mtrucktoll *  mi.7.tolltimemed) +
            ( mi.2.ctrucktoll *  mi.7.tolltimelrg)
  MW[18]  = (mi.2.vstrucktoll *  mi.7.tolldistvsm) +
            ( mi.2.strucktoll *  mi.7.tolldistsml) +
            ( mi.2.mtrucktoll *  mi.7.tolldistmed) +
            ( mi.2.ctrucktoll *  mi.7.tolldistlrg)
  MW[19]  = (mi.2.vstrucktoll * (mi.7.tolldistvsm * SMTROPC)) +
            ( mi.2.strucktoll * (mi.7.tolldistsml * SMTROPC)) +
            ( mi.2.mtrucktoll * (mi.7.tolldistmed * SMTROPC)) +
            ( mi.2.ctrucktoll * (mi.7.tolldistlrg * LRTROPC))
  ; MW[20] bridge tolls done in jloop below
  ; MW[21] cordon tolls done in jloop below
  MW[22]  = (mi.2.vstrucktoll * mi.7.tollvtollvsm) +
            ( mi.2.strucktoll * mi.7.tollvtollsml) +
            ( mi.2.mtrucktoll * mi.7.tollvtollmed) +
            ( mi.2.ctrucktoll * mi.7.tollvtolllrg) ; Value tolls

  ; Trips MD * Skims MD
  MW[23]  = (mi.3.vstruck * mi.8.timevsm) +
            ( mi.3.struck * mi.8.timesml) +
            ( mi.3.mtruck * mi.8.timemed) +
            ( mi.3.ctruck * mi.8.timelrg)
  MW[24]  = (mi.3.vstruck * mi.8.distvsm) +
            ( mi.3.struck * mi.8.distsml) +
            ( mi.3.mtruck * mi.8.distmed) +
            ( mi.3.ctruck * mi.8.distlrg)
  MW[25]  = (mi.3.vstruck *(mi.8.distvsm * SMTROPC)) +
            ( mi.3.struck *(mi.8.distsml * SMTROPC)) +
            ( mi.3.mtruck *(mi.8.distmed * SMTROPC)) +
            ( mi.3.ctruck *(mi.8.distlrg * LRTROPC))
  ; MW[26] bridge tolls done in jloop below
  ; MW[27] cordon tolls done in jloop below

  ; TOLL Trips MD * Skims MD
  MW[28]  = (mi.3.vstrucktoll *  mi.8.tolltimevsm) +
            ( mi.3.strucktoll *  mi.8.tolltimesml) +
            ( mi.3.mtrucktoll *  mi.8.tolltimemed) +
            ( mi.3.ctrucktoll *  mi.8.tolltimelrg)
  MW[29]  = (mi.3.vstrucktoll *  mi.8.tolldistvsm) +
            ( mi.3.strucktoll *  mi.8.tolldistsml) +
            ( mi.3.mtrucktoll *  mi.8.tolldistmed) +
            ( mi.3.ctrucktoll *  mi.8.tolldistlrg)
  MW[30]  = (mi.3.vstrucktoll * (mi.8.tolldistvsm * SMTROPC)) +
            ( mi.3.strucktoll * (mi.8.tolldistsml * SMTROPC)) +
            ( mi.3.mtrucktoll * (mi.8.tolldistmed * SMTROPC)) +
            ( mi.3.ctrucktoll * (mi.8.tolldistlrg * LRTROPC))
  ; MW[31] bridge tolls done in jloop below
  ; MW[32] cordon tolls done in jloop below
  MW[33]  = (mi.3.vstrucktoll * mi.8.tollvtollvsm) +
            ( mi.3.strucktoll * mi.8.tollvtollsml) +
            ( mi.3.mtrucktoll * mi.8.tollvtollmed) +
            ( mi.3.ctrucktoll * mi.8.tollvtolllrg) ; Value tolls

  ; Trips PM * Skims PM
  MW[34]  = (mi.4.vstruck * mi.9.timevsm) +
            ( mi.4.struck * mi.9.timesml) +
            ( mi.4.mtruck * mi.9.timemed) +
            ( mi.4.ctruck * mi.9.timelrg)
  MW[35]  = (mi.4.vstruck * mi.9.distvsm) +
            ( mi.4.struck * mi.9.distsml) +
            ( mi.4.mtruck * mi.9.distmed) +
            ( mi.4.ctruck * mi.9.distlrg)
  MW[36]  = (mi.4.vstruck *(mi.9.distvsm * SMTROPC)) +
            ( mi.4.struck *(mi.9.distsml * SMTROPC)) +
            ( mi.4.mtruck *(mi.9.distmed * SMTROPC)) +
            ( mi.4.ctruck *(mi.9.distlrg * LRTROPC))
  ; MW[37] bridge tolls done in jloop below
  ; MW[38] cordon tolls done in jloop below

  ; TOLL Trips PM * Skims PM
  MW[39]  = (mi.4.vstrucktoll *  mi.9.tolltimevsm) +
            ( mi.4.strucktoll *  mi.9.tolltimesml) +
            ( mi.4.mtrucktoll *  mi.9.tolltimemed) +
            ( mi.4.ctrucktoll *  mi.9.tolltimelrg)
  MW[40]  = (mi.4.vstrucktoll *  mi.9.tolldistvsm) +
            ( mi.4.strucktoll *  mi.9.tolldistsml) +
            ( mi.4.mtrucktoll *  mi.9.tolldistmed) +
            ( mi.4.ctrucktoll *  mi.9.tolldistlrg)
  MW[41]  = (mi.4.vstrucktoll * (mi.9.tolldistvsm * SMTROPC)) +
            ( mi.4.strucktoll * (mi.9.tolldistsml * SMTROPC)) +
            ( mi.4.mtrucktoll * (mi.9.tolldistmed * SMTROPC)) +
            ( mi.4.ctrucktoll * (mi.9.tolldistlrg * LRTROPC))
 ; MW[42] bridge tolls done in jloop below
 ; MW[43] cordon tolls done in jloop below
  MW[44]  = (mi.4.vstrucktoll * mi.9.tollvtollvsm) +
            ( mi.4.strucktoll * mi.9.tollvtollsml) +
            ( mi.4.mtrucktoll * mi.9.tollvtollmed) +
            ( mi.4.ctrucktoll * mi.9.tollvtolllrg) ; Value tolls

  ; Trips EV * Skims EV
  MW[45]  = (mi.5.vstruck * mi.10.timevsm) +
            ( mi.5.struck * mi.10.timesml) +
            ( mi.5.mtruck * mi.10.timemed) +
            ( mi.5.ctruck * mi.10.timelrg)
  MW[46]  = (mi.5.vstruck * mi.10.distvsm) +
            ( mi.5.struck * mi.10.distsml) +
            ( mi.5.mtruck * mi.10.distmed) +
            ( mi.5.ctruck * mi.10.distlrg)
  MW[47]  = (mi.5.vstruck *(mi.10.distvsm * SMTROPC)) +
            ( mi.5.struck *(mi.10.distsml * SMTROPC)) +
            ( mi.5.mtruck *(mi.10.distmed * SMTROPC)) +
            ( mi.5.ctruck *(mi.10.distlrg * LRTROPC))
  ; MW[48] bridge tolls done in jloop below
  ; MW[49] cordon tolls done in jloop below

  ; TOLL Trips EV * Skims EV
  MW[50]  = (mi.5.vstrucktoll *  mi.10.tolltimevsm) +
            ( mi.5.strucktoll *  mi.10.tolltimesml) +
            ( mi.5.mtrucktoll *  mi.10.tolltimemed) +
            ( mi.5.ctrucktoll *  mi.10.tolltimelrg)
  MW[51]  = (mi.5.vstrucktoll *  mi.10.tolldistvsm) +
            ( mi.5.strucktoll *  mi.10.tolldistsml) +
            ( mi.5.mtrucktoll *  mi.10.tolldistmed) +
            ( mi.5.ctrucktoll *  mi.10.tolldistlrg)
  MW[52]  = (mi.5.vstrucktoll * (mi.10.tolldistvsm * SMTROPC)) +
            ( mi.5.strucktoll * (mi.10.tolldistsml * SMTROPC)) +
            ( mi.5.mtrucktoll * (mi.10.tolldistmed * SMTROPC)) +
            ( mi.5.ctrucktoll * (mi.10.tolldistlrg * LRTROPC))
  ; MW[53] bridge tolls done in jloop below
  ; MW[54] cordon tolls done in jloop below
  MW[55]  = (mi.5.vstrucktoll * mi.10.tollvtollvsm) +
            ( mi.5.strucktoll * mi.10.tollvtollsml) +
            ( mi.5.mtrucktoll * mi.10.tollvtollmed) +
            ( mi.5.ctrucktoll * mi.10.tollvtolllrg) ; Value tolls

  ; bridge tolls and cordon tolls moved here because jloop is necesssary to use destination zone as lookup for cordon
  jloop
    CORDON_TOLLCLASS = zi.1.CORDON[j]

    ; default to zero
    dest_cordon_cost_vsm = 0
    dest_cordon_cost_sml = 0
    dest_cordon_cost_med = 0
    dest_cordon_cost_lrg = 0

    if (CORDON_TOLLCLASS > 0)
      ; see SetTolls.JOB: _fac_index = TOLLCLASS*1000+USE
      ; assuming UES=1
      ; looking up EA cordon tolls and convert $2000 dollars to $2000 cents
      _fac_index = CORDON_TOLLCLASS*1000+1
      dest_cordon_cost_vsm = TOLLS(1, _fac_index)*100
      dest_cordon_cost_sml = TOLLS(2, _fac_index)*100
      dest_cordon_cost_med = TOLLS(3, _fac_index)*100
      dest_cordon_cost_lrg = TOLLS(4, _fac_index)*100
      ; we only need to check one since they're on the same row in the dbf
      if (dest_cordon_cost_vsm < 0)
        PRINT LIST= "Truck toll not found for tollclass in tazdata, facility index ", _fac_index
        ABORT MSG = "Truck toll not found for tollclass in tazdata"
      endif
    endif

    ; Trips EA * Skims EA
    MW[4] = (mi.1.vstruck * (mi.6.btollvsm - dest_cordon_cost_vsm)) +
            ( mi.1.struck * (mi.6.btollsml - dest_cordon_cost_sml)) +
            ( mi.1.mtruck * (mi.6.btollmed - dest_cordon_cost_med)) +
            ( mi.1.ctruck * (mi.6.btolllrg - dest_cordon_cost_lrg))             ; Bridge tolls (btolls - cordon tolls)
    MW[5] = (mi.1.vstruck * dest_cordon_cost_vsm) +
            ( mi.1.struck * dest_cordon_cost_sml) +
            ( mi.1.mtruck * dest_cordon_cost_med) +
            ( mi.1.ctruck * dest_cordon_cost_lrg)                               ; Cordon tolls

    ; TOLL Trips EA * Skims EA
    MW[9] = (mi.1.vstrucktoll * (mi.6.tollbtollvsm - dest_cordon_cost_vsm)) +
            ( mi.1.strucktoll * (mi.6.tollbtollsml - dest_cordon_cost_sml)) +
            ( mi.1.mtrucktoll * (mi.6.tollbtollmed - dest_cordon_cost_med)) +
            ( mi.1.ctrucktoll * (mi.6.tollbtolllrg - dest_cordon_cost_lrg))     ; (btolls - cordon tolls)
    MW[10]= (mi.1.vstrucktoll * dest_cordon_cost_vsm) +
            ( mi.1.strucktoll * dest_cordon_cost_sml) +
            ( mi.1.mtrucktoll * dest_cordon_cost_med) +
            ( mi.1.ctrucktoll * dest_cordon_cost_lrg)                           ; Cordon tolls

    if (CORDON_TOLLCLASS > 0)
      ; see SetTolls.JOB: _fac_index = TOLLCLASS*1000+USE
      ; assuming UES=1
      ; looking up AM cordon tolls and convert $2000 dollars to $2000 cents
      _fac_index = CORDON_TOLLCLASS*1000+1
      dest_cordon_cost_vsm = TOLLS(5, _fac_index)*100
      dest_cordon_cost_sml = TOLLS(6, _fac_index)*100
      dest_cordon_cost_med = TOLLS(7, _fac_index)*100
      dest_cordon_cost_lrg = TOLLS(8, _fac_index)*100
      ; we only need to check one since they're on the same row in the dbf
      if (dest_cordon_cost_vsm < 0)
        PRINT LIST= "Truck toll not found for tollclass in tazdata, facility index ", _fac_index
        ABORT MSG = "Truck toll not found for tollclass in tazdata"
      endif
    endif

    ; Trips AM * Skims AM
    MW[15] = (mi.2.vstruck * (mi.7.btollvsm - dest_cordon_cost_vsm)) +
             ( mi.2.struck * (mi.7.btollsml - dest_cordon_cost_sml)) +
             ( mi.2.mtruck * (mi.7.btollmed - dest_cordon_cost_med)) +
             ( mi.2.ctruck * (mi.7.btolllrg - dest_cordon_cost_lrg))            ; Bridge tolls (btolls - cordon tolls)
    MW[16] = (mi.2.vstruck * dest_cordon_cost_vsm) +
             ( mi.2.struck * dest_cordon_cost_sml) +
             ( mi.2.mtruck * dest_cordon_cost_med) +
             ( mi.2.ctruck * dest_cordon_cost_lrg)                              ; Cordon tolls
    ; TOLL Trips AM * Skims AM
    MW[20] = (mi.2.vstrucktoll * (mi.7.tollbtollvsm - dest_cordon_cost_vsm)) +
             ( mi.2.strucktoll * (mi.7.tollbtollsml - dest_cordon_cost_sml)) +
             ( mi.2.mtrucktoll * (mi.7.tollbtollmed - dest_cordon_cost_med)) +
             ( mi.2.ctrucktoll * (mi.7.tollbtolllrg - dest_cordon_cost_lrg))    ; Bridge tolls (btolls - cordon tolls)
    MW[21] = (mi.2.vstrucktoll * dest_cordon_cost_vsm) +
             ( mi.2.strucktoll * dest_cordon_cost_sml) +
             ( mi.2.mtrucktoll * dest_cordon_cost_med) +
             ( mi.2.ctrucktoll * dest_cordon_cost_lrg)                          ; Cordon tolls

    if (CORDON_TOLLCLASS > 0)
      ; see SetTolls.JOB: _fac_index = TOLLCLASS*1000+USE
      ; assuming UES=1
      ; looking up MD cordon tolls and convert $2000 dollars to $2000 cents
      _fac_index = CORDON_TOLLCLASS*1000+1
      dest_cordon_cost_vsm = TOLLS(9,  _fac_index)*100
      dest_cordon_cost_sml = TOLLS(10, _fac_index)*100
      dest_cordon_cost_med = TOLLS(11, _fac_index)*100
      dest_cordon_cost_lrg = TOLLS(12, _fac_index)*100
      ; we only need to check one since they're on the same row in the dbf
      if (dest_cordon_cost_vsm < 0)
        PRINT LIST= "Truck toll not found for tollclass in tazdata, facility index ", _fac_index
        ABORT MSG = "Truck toll not found for tollclass in tazdata"
      endif
    endif

    ; Trips MD * Skims MD
    MW[26] = (mi.3.vstruck * (mi.8.btollvsm - dest_cordon_cost_vsm)) +
             ( mi.3.struck * (mi.8.btollsml - dest_cordon_cost_sml)) +
             ( mi.3.mtruck * (mi.8.btollmed - dest_cordon_cost_med)) +
             ( mi.3.ctruck * (mi.8.btolllrg - dest_cordon_cost_lrg))            ; Bridge tolls (btolls - cordon tolls)
    MW[27] = (mi.3.vstruck * dest_cordon_cost_vsm) +
             ( mi.3.struck * dest_cordon_cost_sml) +
             ( mi.3.mtruck * dest_cordon_cost_med) +
             ( mi.3.ctruck * dest_cordon_cost_lrg)                              ; Cordon tolls
    ; TOLL Trips MD * Skims MD
    MW[31] = (mi.3.vstrucktoll * (mi.8.tollbtollvsm - dest_cordon_cost_vsm)) +
             ( mi.3.strucktoll * (mi.8.tollbtollsml - dest_cordon_cost_sml)) +
             ( mi.3.mtrucktoll * (mi.8.tollbtollmed - dest_cordon_cost_med)) +
             ( mi.3.ctrucktoll * (mi.8.tollbtolllrg - dest_cordon_cost_lrg))    ; Bridge tolls (btolls - cordon tolls)
    MW[32] = (mi.3.vstrucktoll * dest_cordon_cost_vsm) +
             ( mi.3.strucktoll * dest_cordon_cost_sml) +
             ( mi.3.mtrucktoll * dest_cordon_cost_med) +
             ( mi.3.ctrucktoll * dest_cordon_cost_lrg)                          ; Cordon tolls

    if (CORDON_TOLLCLASS > 0)
      ; see SetTolls.JOB: _fac_index = TOLLCLASS*1000+USE
      ; assuming UES=1
      ; looking up PM cordon tolls and convert $2000 dollars to $2000 cents
      _fac_index = CORDON_TOLLCLASS*1000+1
      dest_cordon_cost_vsm = TOLLS(13, _fac_index)*100
      dest_cordon_cost_sml = TOLLS(14, _fac_index)*100
      dest_cordon_cost_med = TOLLS(15, _fac_index)*100
      dest_cordon_cost_lrg = TOLLS(16, _fac_index)*100
      ; we only need to check one since they're on the same row in the dbf
      if (dest_cordon_cost_vsm < 0)
        PRINT LIST= "Truck toll not found for tollclass in tazdata, facility index ", _fac_index
        ABORT MSG = "Truck toll not found for tollclass in tazdata"
      endif
    endif

    ; Trips PM * Skims PM
    MW[37] = (mi.4.vstruck * (mi.9.btollvsm - dest_cordon_cost_vsm)) +
             ( mi.4.struck * (mi.9.btollsml - dest_cordon_cost_sml)) +
             ( mi.4.mtruck * (mi.9.btollmed - dest_cordon_cost_med)) +
             ( mi.4.ctruck * (mi.9.btolllrg - dest_cordon_cost_lrg))           ; Bridge tolls (btolls - cordon)
    MW[38] = (mi.4.vstruck * dest_cordon_cost_vsm) +
             ( mi.4.struck * dest_cordon_cost_sml) +
             ( mi.4.mtruck * dest_cordon_cost_med) +
             ( mi.4.ctruck * dest_cordon_cost_lrg)                             ; Cordon tolls
    ; TOLL Trips PM * Skims PM
    MW[42] = (mi.4.vstrucktoll * (mi.9.tollvtollvsm - dest_cordon_cost_vsm)) +
             ( mi.4.strucktoll * (mi.9.tollvtollsml - dest_cordon_cost_sml)) +
             ( mi.4.mtrucktoll * (mi.9.tollvtollmed - dest_cordon_cost_med)) +
             ( mi.4.ctrucktoll * (mi.9.tollvtolllrg - dest_cordon_cost_lrg))   ; Bridge tolls (btolls - cordon tolls)
    MW[43] = (mi.4.vstrucktoll * dest_cordon_cost_vsm) +
             ( mi.4.strucktoll * dest_cordon_cost_sml) +
             ( mi.4.mtrucktoll * dest_cordon_cost_med) +
             ( mi.4.ctrucktoll * dest_cordon_cost_lrg)                         ; Cordon tolls

    if (CORDON_TOLLCLASS > 0)
      ; see SetTolls.JOB: _fac_index = TOLLCLASS*1000+USE
      ; assuming UES=1
      ; looking up EV cordon tolls and convert $2000 dollars to $2000 cents
      _fac_index = CORDON_TOLLCLASS*1000+1
      dest_cordon_cost_vsm = TOLLS(17, _fac_index)*100
      dest_cordon_cost_sml = TOLLS(18, _fac_index)*100
      dest_cordon_cost_med = TOLLS(19, _fac_index)*100
      dest_cordon_cost_lrg = TOLLS(20, _fac_index)*100
      ; we only need to check one since they're on the same row in the dbf
      if (dest_cordon_cost_vsm < 0)
        PRINT LIST= "Truck toll not found for tollclass in tazdata, facility index ", _fac_index
        ABORT MSG = "Truck toll not found for tollclass in tazdata"
      endif
    endif

    ; Trips EV * Skims EV
    MW[48] = (mi.5.vstruck * (mi.10.btollvsm - dest_cordon_cost_vsm)) +
             ( mi.5.struck * (mi.10.btollsml - dest_cordon_cost_sml)) +
             ( mi.5.mtruck * (mi.10.btollmed - dest_cordon_cost_med)) +
             ( mi.5.ctruck * (mi.10.btolllrg - dest_cordon_cost_lrg))           ; Bridge tolls (btolls - cordon tolls)
    MW[49] = (mi.5.vstruck * dest_cordon_cost_vsm) +
             ( mi.5.struck * dest_cordon_cost_sml) +
             ( mi.5.mtruck * dest_cordon_cost_med) +
             ( mi.5.ctruck * dest_cordon_cost_lrg)                             ; Cordon tolls
    ; TOLL Trips PM * Skims PM
    MW[53] = (mi.5.vstrucktoll * (mi.10.tollbtollvsm - dest_cordon_cost_vsm)) +
             ( mi.5.strucktoll * (mi.10.tollbtollsml - dest_cordon_cost_sml)) +
             ( mi.5.mtrucktoll * (mi.10.tollbtollmed - dest_cordon_cost_med)) +
             ( mi.5.ctrucktoll * (mi.10.tollbtolllrg - dest_cordon_cost_lrg))    ; Bridge tolls (btolls - cordon tolls)
    MW[54] = (mi.5.vstrucktoll * dest_cordon_cost_vsm) +
             ( mi.5.strucktoll * dest_cordon_cost_sml) +
             ( mi.5.mtrucktoll * dest_cordon_cost_med) +
             ( mi.5.ctrucktoll * dest_cordon_cost_lrg)                          ; Cordon tolls
  endjloop

  ; Compute Daily Trips, TripTime, TripDist, TripCost, BridgeToll, ValueToll
  ;
  ; NOTE that the zones may be unconnected, resulting in huge skim values, so we need to exclude those here
  ; truck untolled
  MW[60] = mi.11.connected*mi.11.connected.t*
          (mi.1.vstruck + mi.1.struck + mi.1.mtruck + mi.1.ctruck +
           mi.2.vstruck + mi.2.struck + mi.2.mtruck + mi.2.ctruck +
           mi.3.vstruck + mi.3.struck + mi.3.mtruck + mi.3.ctruck +
           mi.4.vstruck + mi.4.struck + mi.4.mtruck + mi.4.ctruck + 
           mi.5.vstruck + mi.5.struck + mi.5.mtruck + mi.5.ctruck )                      ; DailyTrip
  MW[61] = mi.11.connected*mi.11.connected.t*(MW[1] + MW[12] + MW[23] + MW[34] + MW[45]) ; TripTime
  MW[62] = mi.11.connected*mi.11.connected.t*(MW[2] + MW[13] + MW[24] + MW[35] + MW[46]) ; TripDist
  MW[63] = mi.11.connected*mi.11.connected.t*(MW[3] + MW[14] + MW[25] + MW[36] + MW[47]) ; TripCost
  MW[64] = mi.11.connected*mi.11.connected.t*(MW[4] + MW[15] + MW[26] + MW[37] + MW[48]) ; BridgeToll
  MW[65] = mi.11.connected*mi.11.connected.t*(MW[5] + MW[16] + MW[27] + MW[38] + MW[49]) ; CordonToll
  MW[66] = 0                                                                             ; ValueToll

  Daily_Trips_untolled   = Daily_Trips_untolled   + ROWSUM(60)
  TripTime_untolled      = TripTime_untolled      + ROWSUM(61)
  TripDist_untolled      = TripDist_untolled      + ROWSUM(62)
  TripCost_untolled      = TripCost_untolled      + ROWSUM(63)
  Bridge_tolls_untolled  = Bridge_tolls_untolled  + ROWSUM(64)
  Cordon_tolls_w_discount_untolled  = Cordon_tolls_w_discount_untolled  + ROWSUM(65)
  Cordon_tolls_no_discount_untolled = Cordon_tolls_no_discount_untolled + ROWSUM(65) ;truck has no income-based discount
  Value_tolls_w_discount_untolled   = Value_tolls_w_discount_untolled   + ROWSUM(66)
  Value_tolls_no_discount_untolled  = Value_tolls_no_discount_untolled  + ROWSUM(66)


  ; truck tolled
  MW[67] = mi.11.connected*mi.11.connected.t*
          (mi.1.vstrucktoll + mi.1.strucktoll + mi.1.mtrucktoll + mi.1.ctrucktoll +
           mi.2.vstrucktoll + mi.2.strucktoll + mi.2.mtrucktoll + mi.2.ctrucktoll +
           mi.3.vstrucktoll + mi.3.strucktoll + mi.3.mtrucktoll + mi.3.ctrucktoll +
           mi.4.vstrucktoll + mi.4.strucktoll + mi.4.mtrucktoll + mi.4.ctrucktoll +
           mi.5.vstrucktoll + mi.5.strucktoll + mi.5.mtrucktoll + mi.5.ctrucktoll)        ; DailyTrip
  MW[68] = mi.11.connected*mi.11.connected.t*(MW[6] + MW[17] + MW[28] + MW[39] + MW[50])  ; TripTime
  MW[69] = mi.11.connected*mi.11.connected.t*(MW[7] + MW[18] + MW[29] + MW[40] + Mw[51])  ; TripDist
  MW[70] = mi.11.connected*mi.11.connected.t*(MW[8] + MW[19] + MW[30] + MW[41] + MW[52])  ; TripCost
  MW[71] = mi.11.connected*mi.11.connected.t*(MW[9] + MW[20] + MW[31] + MW[42] + MW[53])  ; BridgeToll
  MW[72] = mi.11.connected*mi.11.connected.t*(MW[10] + MW[21] + MW[32] + MW[43] + MW[54]) ; CordonToll
  MW[73] = mi.11.connected*mi.11.connected.t*(MW[11] + MW[22] + MW[33] + MW[44] + MW[55]) ; ValueToll

  Daily_Trips_tolled   = Daily_Trips_tolled   + ROWSUM(67)
  TripTime_tolled      = TripTime_tolled      + ROWSUM(68)
  TripDist_tolled      = TripDist_tolled      + ROWSUM(69)
  TripCost_tolled      = TripCost_tolled      + ROWSUM(70)
  Bridge_tolls_tolled  = Bridge_tolls_tolled  + ROWSUM(71)
  Cordon_tolls_w_discount_tolled  = Cordon_tolls_w_discount_tolled  + ROWSUM(72)
  Cordon_tolls_no_discount_tolled = Cordon_tolls_no_discount_tolled + ROWSUM(72) ;truck has no income-based discount
  Value_tolls_w_discount_tolled   = Value_tolls_w_discount_tolled   + ROWSUM(73)
  Value_tolls_no_discount_tolled  = Value_tolls_no_discount_tolled  + ROWSUM(73) 


  ; Compute each time period's Trips, TripTime, TripDist, TripCost, BridgeToll, ValueToll
  ; EA - untolled
  ; NOTE that the zones may be unconnected, resulting in huge skim values, so we need to exclude those here
  MW[74] = mi.11.connected*mi.11.connected.t*
          (mi.1.vstruck + mi.1.struck + mi.1.mtruck + mi.1.ctruck)
  MW[75] = mi.11.connected*mi.11.connected.t*(MW[1]) ; TripTime
  MW[76] = mi.11.connected*mi.11.connected.t*(MW[2]) ; TripDist
  MW[77] = mi.11.connected*mi.11.connected.t*(MW[3]) ; TripCost
  MW[78] = mi.11.connected*mi.11.connected.t*(MW[4]) ; BridgeToll
  MW[79] = mi.11.connected*mi.11.connected.t*(MW[5]) ; CordonToll
  MW[80] = 0 ; ValueToll

  Daily_Trips_untolled_EA   = Daily_Trips_untolled_EA   + ROWSUM(74)
  TripTime_untolled_EA      = TripTime_untolled_EA      + ROWSUM(75)
  TripDist_untolled_EA      = TripDist_untolled_EA      + ROWSUM(76)
  TripCost_untolled_EA      = TripCost_untolled_EA      + ROWSUM(77)
  Bridge_tolls_untolled_EA  = Bridge_tolls_untolled_EA  + ROWSUM(78)
  Cordon_tolls_w_discount_untolled_EA  = Cordon_tolls_w_discount_untolled_EA  + ROWSUM(79)
  Cordon_tolls_no_discount_untolled_EA = Cordon_tolls_no_discount_untolled_EA + ROWSUM(79) ;truck has no income-based discount
  Value_tolls_w_discount_untolled_EA   = Value_tolls_w_discount_untolled_EA   + ROWSUM(80)
  Value_tolls_no_discount_untolled_EA  = Value_tolls_no_discount_untolled_EA  + ROWSUM(80)

  ; EA - tolled
  ; NOTE that the zones may be unconnected, resulting in huge skim values, so we need to exclude those here
  MW[81] = mi.11.connected*mi.11.connected.t*
          (mi.1.vstrucktoll + mi.1.strucktoll + mi.1.mtrucktoll + mi.1.ctrucktoll)
  MW[82] = mi.11.connected*mi.11.connected.t*(MW[6]) ; TripTime
  MW[83] = mi.11.connected*mi.11.connected.t*(MW[7]) ; TripDist
  MW[84] = mi.11.connected*mi.11.connected.t*(MW[8]) ; TripCost
  MW[85] = mi.11.connected*mi.11.connected.t*(MW[9]) ; BridgeToll
  MW[86] = mi.11.connected*mi.11.connected.t*(MW[10]) ; CordonToll
  MW[87] = mi.11.connected*mi.11.connected.t*(MW[11]) ; ValueToll

  Daily_Trips_tolled_EA   = Daily_Trips_tolled_EA   + ROWSUM(81)
  TripTime_tolled_EA      = TripTime_tolled_EA      + ROWSUM(82)
  TripDist_tolled_EA      = TripDist_tolled_EA      + ROWSUM(83)
  TripCost_tolled_EA      = TripCost_tolled_EA      + ROWSUM(84)
  Bridge_tolls_tolled_EA  = Bridge_tolls_tolled_EA  + ROWSUM(85)
  Cordon_tolls_w_discount_tolled_EA  = Cordon_tolls_w_discount_tolled_EA  + ROWSUM(86)
  Cordon_tolls_no_discount_tolled_EA = Cordon_tolls_no_discount_tolled_EA + ROWSUM(86) ;truck has no income-based discount
  Value_tolls_w_discount_tolled_EA   = Value_tolls_w_discount_tolled_EA   + ROWSUM(87)
  Value_tolls_no_discount_tolled_EA  = Value_tolls_no_discount_tolled_EA  + ROWSUM(87)

  ; AM - untolled
  MW[88] = mi.11.connected*mi.11.connected.t*
          (mi.2.vstruck + mi.2.struck + mi.2.mtruck + mi.2.ctruck)
  MW[89] = mi.11.connected*mi.11.connected.t*(MW[12]) ; TripTime
  MW[90] = mi.11.connected*mi.11.connected.t*(MW[13]) ; TripDist
  MW[91] = mi.11.connected*mi.11.connected.t*(MW[14]) ; TripCost
  MW[92] = mi.11.connected*mi.11.connected.t*(MW[15]) ; BridgeToll
  MW[93] = mi.11.connected*mi.11.connected.t*(MW[16]) ; CordonToll
  MW[94] = 0         ; ValueToll

  Daily_Trips_untolled_AM   = Daily_Trips_untolled_AM   + ROWSUM(88)
  TripTime_untolled_AM      = TripTime_untolled_AM      + ROWSUM(89)
  TripDist_untolled_AM      = TripDist_untolled_AM      + ROWSUM(90)
  TripCost_untolled_AM      = TripCost_untolled_AM      + ROWSUM(91)
  Bridge_tolls_untolled_AM  = Bridge_tolls_untolled_AM  + ROWSUM(92)
  Cordon_tolls_w_discount_untolled_AM  = Cordon_tolls_w_discount_untolled_AM  + ROWSUM(93)
  Cordon_tolls_no_discount_untolled_AM = Cordon_tolls_no_discount_untolled_AM + ROWSUM(93) ;truck has no income-based discount
  Value_tolls_w_discount_untolled_AM   = Value_tolls_w_discount_untolled_AM   + ROWSUM(94)
  Value_tolls_no_discount_untolled_AM  = Value_tolls_no_discount_untolled_AM  + ROWSUM(94)

  ; AM - tolled
  MW[95]  = mi.11.connected*mi.11.connected.t*
          (mi.2.vstrucktoll + mi.2.strucktoll + mi.2.mtrucktoll + mi.2.ctrucktoll)
  MW[96]  = mi.11.connected*mi.11.connected.t*(MW[17]) ; TripTime
  MW[97]  = mi.11.connected*mi.11.connected.t*(MW[18]) ; TripDist
  MW[98]  = mi.11.connected*mi.11.connected.t*(MW[19]) ; TripCost
  MW[99]  = mi.11.connected*mi.11.connected.t*(MW[20]) ; BridgeToll
  MW[100] = mi.11.connected*mi.11.connected.t*(MW[21]) ; CordonToll
  MW[101] = mi.11.connected*mi.11.connected.t*(MW[22]) ; ValueToll

  Daily_Trips_tolled_AM   = Daily_Trips_tolled_AM   + ROWSUM(95)
  TripTime_tolled_AM      = TripTime_tolled_AM      + ROWSUM(96)
  TripDist_tolled_AM      = TripDist_tolled_AM      + ROWSUM(97)
  TripCost_tolled_AM      = TripCost_tolled_AM      + ROWSUM(98)
  Bridge_tolls_tolled_AM  = Bridge_tolls_tolled_AM  + ROWSUM(99)
  Cordon_tolls_w_discount_tolled_AM  = Cordon_tolls_w_discount_tolled_AM  + ROWSUM(100)
  Cordon_tolls_no_discount_tolled_AM = Cordon_tolls_no_discount_tolled_AM + ROWSUM(100) ;truck has no income-based discount
  Value_tolls_w_discount_tolled_AM   = Value_tolls_w_discount_tolled_AM   + ROWSUM(101)
  Value_tolls_no_discount_tolled_AM  = Value_tolls_no_discount_tolled_AM  + ROWSUM(101)

  ; MD - untolled
  MW[102] = mi.11.connected*mi.11.connected.t*
          (mi.3.vstruck + mi.3.struck + mi.3.mtruck + mi.3.ctruck)
  MW[103] = mi.11.connected*mi.11.connected.t*(MW[23]) ; TripTime
  MW[104] = mi.11.connected*mi.11.connected.t*(MW[24]) ; TripDist
  MW[105] = mi.11.connected*mi.11.connected.t*(MW[25]) ; TripCost
  MW[106] = mi.11.connected*mi.11.connected.t*(MW[26]) ; BridgeToll
  MW[107] = mi.11.connected*mi.11.connected.t*(MW[27]) ; CordonToll
  MW[108] = 0 ; ValueToll

  Daily_Trips_untolled_MD   = Daily_Trips_untolled_MD   + ROWSUM(102)
  TripTime_untolled_MD      = TripTime_untolled_MD      + ROWSUM(103)
  TripDist_untolled_MD      = TripDist_untolled_MD      + ROWSUM(104)
  TripCost_untolled_MD      = TripCost_untolled_MD      + ROWSUM(105)
  Bridge_tolls_untolled_MD  = Bridge_tolls_untolled_MD  + ROWSUM(106)
  Cordon_tolls_w_discount_untolled_MD  = Cordon_tolls_w_discount_untolled_MD  + ROWSUM(107)
  Cordon_tolls_no_discount_untolled_MD = Cordon_tolls_no_discount_untolled_MD + ROWSUM(107) ;truck has no income-based discount
  Value_tolls_w_discount_untolled_MD   = Value_tolls_w_discount_untolled_MD   + ROWSUM(108)
  Value_tolls_no_discount_untolled_MD  = Value_tolls_no_discount_untolled_MD  + ROWSUM(108)  

  ; MD - tolled
  MW[109] = mi.11.connected*mi.11.connected.t*
          (mi.3.vstrucktoll + mi.3.strucktoll + mi.3.mtrucktoll + mi.3.ctrucktoll)
  MW[110] = mi.11.connected*mi.11.connected.t*(MW[28]) ; TripTime
  MW[111] = mi.11.connected*mi.11.connected.t*(MW[29]) ; TripDist
  MW[112] = mi.11.connected*mi.11.connected.t*(MW[30]) ; TripCost
  MW[113] = mi.11.connected*mi.11.connected.t*(MW[31]) ; BridgeToll
  MW[114] = mi.11.connected*mi.11.connected.t*(MW[32]) ; CordonToll
  MW[115] = mi.11.connected*mi.11.connected.t*(MW[33]) ; ValueToll

  Daily_Trips_tolled_MD   = Daily_Trips_tolled_MD   + ROWSUM(109)
  TripTime_tolled_MD      = TripTime_tolled_MD      + ROWSUM(110)
  TripDist_tolled_MD      = TripDist_tolled_MD      + ROWSUM(111)
  TripCost_tolled_MD      = TripCost_tolled_MD      + ROWSUM(112)
  Bridge_tolls_tolled_MD  = Bridge_tolls_tolled_MD  + ROWSUM(113)
  Cordon_tolls_w_discount_tolled_MD  = Cordon_tolls_w_discount_tolled_MD  + ROWSUM(114)
  Cordon_tolls_no_discount_tolled_MD = Cordon_tolls_no_discount_tolled_MD + ROWSUM(114) ;truck has no income-based discount
  Value_tolls_w_discount_tolled_MD   = Value_tolls_w_discount_tolled_MD   + ROWSUM(115)
  Value_tolls_no_discount_tolled_MD  = Value_tolls_no_discount_tolled_MD  + ROWSUM(115)  


  ; PM - untolled
  MW[116] = mi.11.connected*mi.11.connected.t*
          (mi.4.vstruck + mi.4.struck + mi.4.mtruck + mi.4.ctruck)
  MW[117] = mi.11.connected*mi.11.connected.t*(MW[34]) ; TripTime
  MW[118] = mi.11.connected*mi.11.connected.t*(MW[35]) ; TripDist
  MW[119] = mi.11.connected*mi.11.connected.t*(MW[36]) ; TripCost
  MW[120] = mi.11.connected*mi.11.connected.t*(MW[37]) ; BridgeToll
  MW[121] = mi.11.connected*mi.11.connected.t*(MW[38]) ; CordonToll
  MW[122] = 0         ; ValueToll

  Daily_Trips_untolled_PM   = Daily_Trips_untolled_PM   + ROWSUM(116)
  TripTime_untolled_PM      = TripTime_untolled_PM      + ROWSUM(117)
  TripDist_untolled_PM      = TripDist_untolled_PM      + ROWSUM(118)
  TripCost_untolled_PM      = TripCost_untolled_PM      + ROWSUM(119)
  Bridge_tolls_untolled_PM  = Bridge_tolls_untolled_PM  + ROWSUM(120)
  Cordon_tolls_w_discount_untolled_PM  = Cordon_tolls_w_discount_untolled_PM  + ROWSUM(121)
  Cordon_tolls_no_discount_untolled_PM = Cordon_tolls_no_discount_untolled_PM + ROWSUM(121) ;truck has no income-based discount
  Value_tolls_w_discount_untolled_PM   = Value_tolls_w_discount_untolled_PM   + ROWSUM(122)
  Value_tolls_no_discount_untolled_PM  = Value_tolls_no_discount_untolled_PM  + ROWSUM(122)

  ; PM - tolled
  MW[123] = mi.11.connected*mi.11.connected.t*
          (mi.4.vstrucktoll + mi.4.strucktoll + mi.4.mtrucktoll + mi.4.ctrucktoll)
  MW[124] = mi.11.connected*mi.11.connected.t*(MW[39]) ; TripTime
  MW[125] = mi.11.connected*mi.11.connected.t*(MW[40]) ; TripDist
  MW[126] = mi.11.connected*mi.11.connected.t*(MW[41]) ; TripCost
  MW[127] = mi.11.connected*mi.11.connected.t*(MW[42]) ; BridgeToll
  MW[128] = mi.11.connected*mi.11.connected.t*(MW[43]) ; CordonToll
  MW[129] = mi.11.connected*mi.11.connected.t*(MW[44])          ; ValueToll

  Daily_Trips_tolled_PM   = Daily_Trips_tolled_PM   + ROWSUM(123)
  TripTime_tolled_PM      = TripTime_tolled_PM      + ROWSUM(124)
  TripDist_tolled_PM      = TripDist_tolled_PM      + ROWSUM(125)
  TripCost_tolled_PM      = TripCost_tolled_PM      + ROWSUM(126)
  Bridge_tolls_tolled_PM  = Bridge_tolls_tolled_PM  + ROWSUM(127)
  Cordon_tolls_w_discount_tolled_PM  = Cordon_tolls_w_discount_tolled_PM  + ROWSUM(128)
  Cordon_tolls_no_discount_tolled_PM = Cordon_tolls_no_discount_tolled_PM + ROWSUM(128) ;truck has no income-based discount
  Value_tolls_w_discount_tolled_PM   = Value_tolls_w_discount_tolled_PM   + ROWSUM(129)
  Value_tolls_no_discount_tolled_PM  = Value_tolls_no_discount_tolled_PM  + ROWSUM(129)


  ; EV - untolled
  MW[130] = mi.11.connected*mi.11.connected.t*
          (mi.5.vstruck + mi.5.struck + mi.5.mtruck + mi.5.ctruck)
  MW[131] = mi.11.connected*mi.11.connected.t*(MW[45]) ; TripTime
  MW[132] = mi.11.connected*mi.11.connected.t*(MW[46]) ; TripDist
  MW[133] = mi.11.connected*mi.11.connected.t*(MW[47]) ; TripCost
  MW[134] = mi.11.connected*mi.11.connected.t*(MW[48]) ; BridgeToll
  MW[135] = mi.11.connected*mi.11.connected.t*(MW[49]) ; CordonToll
  MW[136] = 0                                          ; ValueToll

  Daily_Trips_untolled_EV   = Daily_Trips_untolled_EV   + ROWSUM(130)
  TripTime_untolled_EV      = TripTime_untolled_EV      + ROWSUM(131)
  TripDist_untolled_EV      = TripDist_untolled_EV      + ROWSUM(132)
  TripCost_untolled_EV      = TripCost_untolled_EV      + ROWSUM(133)
  Bridge_tolls_untolled_EV  = Bridge_tolls_untolled_EV  + ROWSUM(134)
  Cordon_tolls_w_discount_untolled_EV  = Cordon_tolls_w_discount_untolled_EV  + ROWSUM(135)
  Cordon_tolls_no_discount_untolled_EV = Cordon_tolls_no_discount_untolled_EV + ROWSUM(135) ;truck has no income-based discount
  Value_tolls_w_discount_untolled_EV   = Value_tolls_w_discount_untolled_EV   + ROWSUM(136)
  Value_tolls_no_discount_untolled_EV  = Value_tolls_no_discount_untolled_EV  + ROWSUM(136)

  ; EV - tolled
  MW[137] = mi.11.connected*mi.11.connected.t*
          (mi.5.vstrucktoll + mi.5.strucktoll + mi.5.mtrucktoll + mi.5.ctrucktoll)
  MW[138] = mi.11.connected*mi.11.connected.t*(MW[50]) ; TripTime
  MW[139] = mi.11.connected*mi.11.connected.t*(Mw[51]) ; TripDist
  MW[140] = mi.11.connected*mi.11.connected.t*(MW[52]) ; TripCost
  MW[141] = mi.11.connected*mi.11.connected.t*(MW[53]) ; BridgeToll
  MW[142] = mi.11.connected*mi.11.connected.t*(MW[54]) ; CordonToll
  MW[143] = mi.11.connected*mi.11.connected.t*(MW[55]) ; ValueToll

  Daily_Trips_tolled_EV   = Daily_Trips_tolled_EV   + ROWSUM(137)
  TripTime_tolled_EV      = TripTime_tolled_EV      + ROWSUM(138)
  TripDist_tolled_EV      = TripDist_tolled_EV      + ROWSUM(139)
  TripCost_tolled_EV      = TripCost_tolled_EV      + ROWSUM(140)
  Bridge_tolls_tolled_EV  = Bridge_tolls_tolled_EV  + ROWSUM(141)
  Cordon_tolls_w_discount_tolled_EV  = Cordon_tolls_w_discount_tolled_EV  + ROWSUM(142)
  Cordon_tolls_no_discount_tolled_EV = Cordon_tolls_no_discount_tolled_EV + ROWSUM(142) ;truck has no income-based discount
  Value_tolls_w_discount_tolled_EV   = Value_tolls_w_discount_tolled_EV   + ROWSUM(143)
  Value_tolls_no_discount_tolled_EV  = Value_tolls_no_discount_tolled_EV  + ROWSUM(143)


  ; Daily rsults
  ; "Income,Mode,Daily Person Trips,Daily Vehicle Trips,Person Minutes,Vehicle Minutes,Person Miles,Vehicle Miles,Total Cost"
  if(I = ZONES) PRINT PRINTO=1 LIST="Income,Mode,Person Trips,Vehicle Trips,Person Minutes,Vehicle Minutes,Person Miles,Vehicle Miles,Total Cost,VTOLL nonzero AM,VTOLL nonzero MD,Bridge Tolls,Value Tolls with discount, Value Tolls without discount,Cordon tolls with discount,Cordon tolls without discount"
  if(I = ZONES) PRINT PRINTO=1 CSV=T LIST= "na", "truck", Daily_Trips_untolled(10.2L), Daily_Trips_untolled(10.2L),
                                                         TripTime_untolled(10.2L),   TripTime_untolled(10.2L),
                                                         TripDist_untolled(10.2L),   TripDist_untolled(10.2L),
                                                         TripCost_untolled(10.2L),
                                                         "na","na",
                                                         Bridge_tolls_untolled(10.2L), Value_tolls_w_discount_untolled(10.2L), Value_tolls_no_discount_untolled(10.2L),
                                                         Cordon_tolls_w_discount_untolled(10.2L), Cordon_tolls_no_discount_untolled(10.2L)

  if(I = ZONES) PRINT PRINTO=1 CSV=T LIST= "na", "truck_tolled", Daily_Trips_tolled(10.2L), Daily_Trips_tolled(10.2L),
                                                         TripTime_tolled(10.2L),   TripTime_tolled(10.2L),
                                                         TripDist_tolled(10.2L),   TripDist_tolled(10.2L),
                                                         TripCost_tolled(10.2L),
                                                         "na","na",
                                                         Bridge_tolls_tolled(10.2L), Value_tolls_w_discount_tolled(10.2L), Value_tolls_no_discount_tolled(10.2L),
                                                         Cordon_tolls_w_discount_tolled(10.2L), Cordon_tolls_no_discount_tolled(10.2L)
                                                         
  ; Time period results
  Period = 'EA'
  if(I = ZONES) PRINT PRINTO=2 LIST="Income,Mode,Person Trips,Vehicle Trips,Person Minutes,Vehicle Minutes,Person Miles,Vehicle Miles,Total Cost,VTOLL nonzero AM,VTOLL nonzero MD,Bridge Tolls,Value Tolls with discount, Value Tolls without discount,Cordon tolls with discount,Cordon tolls without discount"
  if(I = ZONES) PRINT PRINTO=2 CSV=T LIST= Period, "na", "truck", Daily_Trips_untolled_EA(10.2L), Daily_Trips_untolled_EA(10.2L),
                                                         TripTime_untolled_EA(10.2L),   TripTime_untolled_EA(10.2L),
                                                         TripDist_untolled_EA(10.2L),   TripDist_untolled_EA(10.2L),
                                                         TripCost_untolled_EA(10.2L),
                                                         "na","na",
                                                         Bridge_tolls_untolled_EA(10.2L), Value_tolls_w_discount_untolled_EA(10.2L), Value_tolls_no_discount_untolled_EA(10.2L),
                                                         Cordon_tolls_w_discount_untolled_EA(10.2L), Cordon_tolls_no_discount_untolled_EA(10.2L)
  
  if(I = ZONES) PRINT PRINTO=2 CSV=T LIST= Period, "na", "truck_tolled", Daily_Trips_tolled_EA(10.2L), Daily_Trips_tolled_EA(10.2L),
                                                         TripTime_tolled_EA(10.2L),   TripTime_tolled_EA(10.2L),
                                                         TripDist_tolled_EA(10.2L),   TripDist_tolled_EA(10.2L),
                                                         TripCost_tolled_EA(10.2L),
                                                         "na","na",
                                                         Bridge_tolls_tolled_EA(10.2L), Value_tolls_w_discount_tolled_EA(10.2L), Value_tolls_no_discount_tolled_EA(10.2L),
                                                         Cordon_tolls_w_discount_tolled_EA(10.2L), Cordon_tolls_no_discount_tolled_EA(10.2L)                                                         

  Period = 'AM'
  if(I = ZONES) PRINT PRINTO=3 CSV=T LIST= Period, "na", "truck", Daily_Trips_untolled_AM(10.2L), Daily_Trips_untolled_AM(10.2L),
                                                         TripTime_untolled_AM(10.2L),   TripTime_untolled_AM(10.2L),
                                                         TripDist_untolled_AM(10.2L),   TripDist_untolled_AM(10.2L),
                                                         TripCost_untolled_AM(10.2L),
                                                         "na","na",
                                                         Bridge_tolls_untolled_AM(10.2L), Value_tolls_w_discount_untolled_AM(10.2L), Value_tolls_no_discount_untolled_AM(10.2L),
                                                         Cordon_tolls_w_discount_untolled_AM(10.2L), Cordon_tolls_no_discount_untolled_AM(10.2L)

  if(I = ZONES) PRINT PRINTO=3 CSV=T LIST= Period, "na", "truck_tolled", Daily_Trips_tolled_AM(10.2L), Daily_Trips_tolled_AM(10.2L),
                                                         TripTime_tolled_AM(10.2L),   TripTime_tolled_AM(10.2L),
                                                         TripDist_tolled_AM(10.2L),   TripDist_tolled_AM(10.2L),
                                                         TripCost_tolled_AM(10.2L),
                                                         "na","na",
                                                         Bridge_tolls_tolled_AM(10.2L), Value_tolls_w_discount_tolled_AM(10.2L), Value_tolls_no_discount_tolled_AM(10.2L),
                                                         Cordon_tolls_w_discount_tolled_AM(10.2L), Cordon_tolls_no_discount_tolled_AM(10.2L)

  Period = 'MD'
  if(I = ZONES) PRINT PRINTO=4 CSV=T LIST= Period, "na", "truck", Daily_Trips_untolled_MD(10.2L), Daily_Trips_untolled_MD(10.2L),
                                                         TripTime_untolled_MD(10.2L),   TripTime_untolled_MD(10.2L),
                                                         TripDist_untolled_MD(10.2L),   TripDist_untolled_MD(10.2L),
                                                         TripCost_untolled_MD(10.2L),
                                                         "na","na",
                                                         Bridge_tolls_untolled_MD(10.2L), Value_tolls_w_discount_untolled_MD(10.2L), Value_tolls_no_discount_untolled_MD(10.2L),
                                                         Cordon_tolls_w_discount_untolled_MD(10.2L), Cordon_tolls_no_discount_untolled_MD(10.2L)
  
  if(I = ZONES) PRINT PRINTO=4 CSV=T LIST= Period, "na", "truck_tolled", Daily_Trips_tolled_MD(10.2L), Daily_Trips_tolled_MD(10.2L),
                                                         TripTime_tolled_MD(10.2L),   TripTime_tolled_MD(10.2L),
                                                         TripDist_tolled_MD(10.2L),   TripDist_tolled_MD(10.2L),
                                                         TripCost_tolled_MD(10.2L),
                                                         "na","na",
                                                         Bridge_tolls_tolled_MD(10.2L), Value_tolls_w_discount_tolled_MD(10.2L), Value_tolls_no_discount_tolled_MD(10.2L),
                                                         Cordon_tolls_w_discount_tolled_MD(10.2L), Cordon_tolls_no_discount_tolled_MD(10.2L)

  Period = 'PM'
  if(I = ZONES) PRINT PRINTO=5 CSV=T LIST= Period, "na", "truck", Daily_Trips_untolled_PM(10.2L), Daily_Trips_untolled_PM(10.2L),
                                                         TripTime_untolled_PM(10.2L),   TripTime_untolled_PM(10.2L),
                                                         TripDist_untolled_PM(10.2L),   TripDist_untolled_PM(10.2L),
                                                         TripCost_untolled_PM(10.2L),
                                                         "na","na",
                                                         Bridge_tolls_untolled_PM(10.2L), Value_tolls_w_discount_untolled_PM(10.2L), Value_tolls_no_discount_untolled_PM(10.2L),
                                                         Cordon_tolls_w_discount_untolled_PM(10.2L), Cordon_tolls_no_discount_untolled_PM(10.2L)

  if(I = ZONES) PRINT PRINTO=5 CSV=T LIST= Period, "na", "truck_tolled", Daily_Trips_tolled_PM(10.2L), Daily_Trips_tolled_PM(10.2L),
                                                         TripTime_tolled_PM(10.2L),   TripTime_tolled_PM(10.2L),
                                                         TripDist_tolled_PM(10.2L),   TripDist_tolled_PM(10.2L),
                                                         TripCost_tolled_PM(10.2L),
                                                         "na","na",
                                                         Bridge_tolls_tolled_PM(10.2L), Value_tolls_w_discount_tolled_PM(10.2L), Value_tolls_no_discount_tolled_PM(10.2L),
                                                         Cordon_tolls_w_discount_tolled_PM(10.2L), Cordon_tolls_no_discount_tolled_PM(10.2L)

  Period = 'EV'
  if(I = ZONES) PRINT PRINTO=6 CSV=T LIST= Period, "na", "truck", Daily_Trips_untolled_EV(10.2L), Daily_Trips_untolled_EV(10.2L),
                                                         TripTime_untolled_EV(10.2L),   TripTime_untolled_EV(10.2L),
                                                         TripDist_untolled_EV(10.2L),   TripDist_untolled_EV(10.2L),
                                                         TripCost_untolled_EV(10.2L),
                                                         "na","na",
                                                         Bridge_tolls_untolled_EV(10.2L), Value_tolls_w_discount_untolled_EV(10.2L), Value_tolls_no_discount_untolled_EV(10.2L),
                                                         Cordon_tolls_w_discount_untolled_EV(10.2L), Cordon_tolls_no_discount_untolled_EV(10.2L)                                                         

  if(I = ZONES) PRINT PRINTO=6 CSV=T LIST= Period, "na", "truck_tolled", Daily_Trips_tolled_EV(10.2L), Daily_Trips_tolled_EV(10.2L),
                                                         TripTime_tolled_EV(10.2L),   TripTime_tolled_EV(10.2L),
                                                         TripDist_tolled_EV(10.2L),   TripDist_tolled_EV(10.2L),
                                                         TripCost_tolled_EV(10.2L),
                                                         "na","na",
                                                         Bridge_tolls_tolled_EV(10.2L), Value_tolls_w_discount_tolled_EV(10.2L), Value_tolls_no_discount_tolled_EV(10.2L),
                                                         Cordon_tolls_w_discount_tolled_EV(10.2L), Cordon_tolls_no_discount_tolled_EV(10.2L)   

ENDRUN


; Combine time perod results together

* copy metrics\auto_times_truck_only_EA.csv + metrics\auto_times_truck_only_AM.csv + metrics\auto_times_truck_only_MD.csv + metrics\auto_times_truck_only_PM.csv + metrics\auto_times_truck_only_EV.csv metrics\auto_timestruckonlybyTimePeriod.csv
; delete the individual ones
* del metrics\auto_times_*.csv