
# Units = year 2000 cents per mile
# See MTC AOC calculation_workingfile_V4.xlsx: https://mtcdrive.box.com/s/smltib5kow88rmlgvaw3f37mgnhpo1fs
# Mileage-based fee applied to auto AOC, see MTC T5_mileage_fee.xlsx: https://mtcdrive.box.com/s/3hzh8xmp04o7cyuj6y2gw8p93wmytrld
# trucks are 2x of auto, and large trucks / buses are 3x of auto
# use AOC from travel-model-one/utilities/RTP/config_RTP2025/params_2035_IPA.properties
AutoOpCost      = 17.58
SmTruckOpCost   = 35.16
LrTruckOpCost   = 52.74
BusOpCost       = 52.74
 
# TruckTripDistribution gravity LOS term is a blended travel time
# This configures how much is tolled time vs non-tolled (free) time
# 0.0 = non-tolled (free) time only, 1.0 = tolled time only
# See "Make truck trip distribution use blended toll/no toll time" https://app.asana.com/0/1201809392759895/1201931894576117/f
TRUCK_DISTRIB_LOS_TOLL_PART = 0.5

# WFH adjustment - added for PBA50+
# Starting in 2023, there's a simple WFH model specified as a logarithmic model wfh_rate = m * ln(household income) + b
# The formula is segmented and weighted by industry at the workplace TAZ
# These factors are applied on top of that by getting passed through to mtcTourBased.properties
# These factors are calibrated to the target of ~28% WFH in 2035 
WFH_FullTimeWorker_Factor = 0.87
WFH_PartTimeWorker_Factor = 0.78

# An additional constant in bike mode, to represent improvement in bike infrastructure
# Expressed in terms of "in-vehicle travel time equivalent"
# This additional constant is applied to all travel purposes
# E.g. A factor of -2 means 2 minutes of in-vehicle travel time equivalent is deducted from the utility, making the bike mode more attractive (and hence increasing the bike mode share)
# A multiplier of 0 means no change
# Use the bike infra muliplier from utilities/RTP/config_RTP2025/params_2035_IPA.properties
Bike_Infra_C_IVT_Multiplier  = -28.1

# Transit Hesitance
# Implemented for PBA50+ to represent behavior changes in mode choice around transit that occurred in 2020 and after, these should be set
# to zero before 2020. The adjustment affects all transit modes only.
# An adjustment to the modal constant, expressed in terms of "in-vehicle travel time equivalent"
# E.g. A factor of -2 means 2 minutes of in-vehicle travel time is deducted from the utility, making transit more attractive
# E.g. A factor of 2 means an extra 2 minutes of in-vehicle travel time is added to the utility, making transit less attractive
# A factor of 0 means no change
# Asana task "Update Transit Hesitance assumption" (https://app.asana.com/0/1204085012544660/1205246262881184/f)
# Proceed with option 4: keep 2023 transit hesitancy for no project 2035.
# use values from 2023_TM160_IPA_55
Work_Transit_Hesitance = 83.3
NonWork_Transit_Hesitance = 0.0
BART_Transit_Hesitance = 72.0

# TNC availability adjustment
# An adjustment to the modal constant, expressed in terms of "in-vehicle travel time equivalent"
# E.g. A factor of -10 means 10 minutes of in-vehicle travel time is deducted from the utility, making the modes more attractive (ie a positive boost)
# A factor of 0 means no change
# Tour mode and trip modes are decoupled here because TNCs are available for all tour modes
# Use values in PBA50 2035, i.e. X:\travel-model-one-master\utilities\RTP\config_RTP2021\params_PBA50_Blueprint2035.properties
Adjust_TNCsingle_TourMode = -8.25
Adjust_TNCshared_TourMode = -8.25
Adjust_TNCsingle_TripMode = -8.25
Adjust_TNCshared_TripMode = 21.75

#-- Mobility Scenario Parameters
#
#   AV.Share: Specifies the share of vehicles assumed to be AVs in the vehicle fleet
#             Auto ownership ASCs will be calibrated for different levels of AV penetration
#   AV.ProbabilityBoost: The increased probability (multiplicative) for using AVs for tours, based on autos to drivers. The highest
#             this should go is 1.2
#   AV.IVTFactor: The auto in-vehicle time factor to apply to AVs
#   AV.ParkingCostFactor: The auto parking cost factor to apply to AVs, assuming some AVs are sent to remote locations or home
#   AV.CostPerMileFactor: The auto cost per mile factor to apply to AVs, assuming AVs are more efficient in terms of fuel consumption than human-driven vehicles
#   AV.TerminalTimeFactor: The factor to apply to terminal time for AVs, assuming AVs offer curbside passenger pickup/dropoff

# AV impacts on road capacity - represented by adjusting passenger car equivalents (PCEs) by facility type
# AV_PCE_FAC is a factor between 0 and 1
# Facility type 1 = freeway-to-freeway connector
# Facility type 2 = freeway
# Facility type 3 = expressway
# Facility type 4 = collector
# Facility type 5 = freeway ramp
# Facility type 6 = centroid connector/dummy link
# Facility type 7 = major arterial
# Facility type 8 = managed freeway
# Facility type 9 = special facility
# Facility type 10 = toll plaza
AV_PCE_FAC_FT01  = 1.00
AV_PCE_FAC_FT02  = 1.00
AV_PCE_FAC_FT03  = 1.00
AV_PCE_FAC_FT04  = 1.00
AV_PCE_FAC_FT05  = 1.00
AV_PCE_FAC_FT06  = 1.00
AV_PCE_FAC_FT07  = 1.00
AV_PCE_FAC_FT08  = 1.00
AV_PCE_FAC_FT09  = 1.00
AV_PCE_FAC_FT10  = 1.00

# Zero Passenger Vehicles Factor
OwnedAV_ZPV_fac  = 0.70
TNC_ZPV_fac  = 0.70

# Autonomous vehicles assumptions:
# Use values in PBA50 2035, i.e. X:\travel-model-one-master\utilities\RTP\config_RTP2021\params_PBA50_Blueprint2035.properties
Mobility.AV.Share = 0.05
Mobility.AV.ProbabilityBoost.AutosLTDrivers = 1.0
Mobility.AV.ProbabilityBoost.AutosGEDrivers = 1.0
Mobility.AV.IVTFactor = 1.0
Mobility.AV.ParkingCostFactor = 1.0
Mobility.AV.CostPerMileFactor = 1.7
Mobility.AV.TerminalTimeFactor = 1.0

# To reflect longer in-vehicle travel time in TNC shared rides due to detours taken to drop off/pick up other passengers
# Based on data collected in Chicago between Nov 2017 to Mar 2018 (Schwieterman and Livingston, 2018)
Mobility.TNC.shared.IVTFactor = 1.5

taxi.baseFare = 2.20
taxi.costPerMile = 2.30
taxi.costPerMinute = 0.10

TNC.single.baseFare = 2.20
TNC.single.costPerMile = 1.33
TNC.single.costPerMinute = 0.24
TNC.single.costMinimum = 7.20

# use lower costs for TNC shared
# Schwieterman and Livingston (2018) found that the savings are about 48% for UberPOOL and 23% for Lyft Line
# asserted to be about 0.4 of that of TNC single, so that the savings is in the high 30s for the average trip
TNC.shared.baseFare = 2.20
TNC.shared.costPerMile = 0.53
TNC.shared.costPerMinute = 0.10
TNC.shared.costMinimum = 3.00


#Note: the following comma-separated value properties cannot have spaces between them, or else the RuntimeConfiguration.py code won't work
TNC.single.waitTime.mean =  10.3,8.5,8.4,6.3,3.0
TNC.single.waitTime.sd =     4.1,4.1,4.1,4.1,2.0

TNC.shared.waitTime.mean =  15.0,15.0,11.0,8.0,5.0
TNC.shared.waitTime.sd =     4.1,4.1,4.1,4.1,2.0

Taxi.waitTime.mean = 26.5,17.3,13.3,9.5,5.5
Taxi.waitTime.sd =    6.4,6.4,6.4,6.4,6.4

# vehicle occupancy for TNC and Taxi
Taxi.da.share = 0.00
Taxi.s2.share = 0.53
Taxi.s3.share = 0.47

# Use values in PBA50 2035, i.e. X:\travel-model-one-master\utilities\RTP\config_RTP2021\params_PBA50_Blueprint2035.properties
TNC.single.da.share = 0.53
TNC.single.s2.share = 0.29
TNC.single.s3.share = 0.18

TNC.shared.da.share = 0.09
TNC.shared.s2.share = 0.29
TNC.shared.s3.share = 0.62

# TNC occupancy factors for s3 vehicles
# used by sumautotimes.job
TNC.single.s3.occ = 3.6
TNC.shared.s3.occ = 3.83

# Means_Based_Tolling_Q1Factor and Means_Based_Tolling_Q2Factor refer to the discounts received by individuals 
# in households in the two lowest income quartiles (Q1 and Q2) for *value* tolls (e.g., express lane tolls)
# For example:
#  - Means_Based_Tolling_Q1Factor = 0.5 => individuals from Q1 household pay only half of the full price  
#  - Means_Based_Tolling_Q1Factor = 1.0 => individuals in Q1 household pay full price
# Note that toll rates maybe be dependent on occupancy
# Assumptions related to occupancy (HOV2 and HOV3) during the toll optimization process are hardcoded in 
# travel-model-one\utilities\check-network\TollCalib_CheckSpeeds.R
#  - full price toll rate for HOV2 = Half of SOV
#  - full price toll rate for HOV3 = None
Means_Based_Tolling_Q1Factor  = 1.0
Means_Based_Tolling_Q2Factor  = 1.0

# These are similar to the previous factors, but apply to Cordon tolls, which are implemented as bridge tolls
Means_Based_Cordon_Tolling_Q1Factor = 1.0
Means_Based_Cordon_Tolling_Q2Factor = 1.0

# Means-based transit fare
# For example: 
# - Means_Based_Fare_Q1Factor = 0.5 => individuals from Q1 household pay only half of full fare
# - Means_Based_Fare_Q1Factor = 1.0 => individuals in Q1 household pay full fare
Means_Based_Fare_Q1Factor  = 0.5
Means_Based_Fare_Q2Factor  = 1.0

# These are similar to the previous factors, but apply to transit tours and trips that begin or end in a cordon
# So these take precedence over Means_Based_Fare_Q[12]Factor
Means_Based_Cordon_Fare_Q1Factor  = 1.0
Means_Based_Cordon_Fare_Q2Factor  = 1.0

# --------------------
# Minimum toll
# --------------------
# Existing express lanes in real life charge users a minimum toll, because operators need to recover the costs of operations
# From what we know, the minimum tolls in the region are as follows:
# Express lanes operated by MTC (in current prices):  $0.50
# I-580 opened in Feb 2016 operated by ACTC (in current prices): $0.30 (2016, in our 2015 network); $0.50 (since 2017)
# Legacy I-680 operated by ACTC (in current prices): <$0.50 (2015); $0.50 (since 2017)
# Express lanes operated by VTA (in current prices):  $0.30 (always)
# Caveat: The current model implementation accept only one minimum toll for all express lanes in the region

# 50 cents in 2023$ =  50 cents/1.87 = 26.74 cents in 2000$
# based on inflation assumptions stated here: https://github.com/BayAreaMetro/modeling-website/wiki/InflationAssumptions
min_vtoll = 26.74

# --------------------
# Trip toll cap
# --------------------
# Trip toll cap levels for Q1 and first X% of Q2
# The trip toll cap is implemented as a simple way of representing a daily/monthly toll cap
# The trip toll cap level is expected to be a fraction of the daily toll cap
# For example, if the trip toll cap is set to be 50% of the daily toll cap,
# toll road users will be able to make two long toll trips in the simulated day without going over the cap
# Typical values of the trip toll caps are:
# TripTollCap_Q1 = 38.5
# TripTollCap_firstXpercentOfQ2 = 77
# note that these values are in cents 2000 prices
# To turn off trip toll cap, set the toll cap to be a very large value e.g. 999999
# TripTollCap_Q1 = 999999
# TripTollCap_firstXpercentOfQ2 = 999999
TripTollCap_Q1 = 38.5
TripTollCap_firstXpercentOfQ2 = 147
# TripTollCap_firstXpercentOfQ2 = 147 cents represent a monthly toll cap of $115 in NGF Round 2 Pathway 1
# TripTollCap_firstXpercentOfQ2 = 160 cents represent a monthly toll cap of $125 in NGF Round 2 Pathway 1


# This is the household income cut off for the second group that receives the toll cap
hhldinc_cutoff = 60000
# In the current implementation, 60000 is the only acceptable value for hhldinc_cutoff 
# if hhldinc_cutoff != 60000, runtimeconfiguration.py will error out
# This is because we decided to disable the feature to apply the trip toll cap to a subset of Q2 
# in order to minimize the time and effort required to modify the summarization script sumautotimes.job
# see discussion in: https://app.asana.com/0/0/1206291367285833/1207048219216893/f
# If in the future we complete the required updates to sumautotimes.job, 
# then hhldinc_cutoff can be set to any value between 30K and 60K (in 2000$)

# --------------------------------
# Free parking eligibility on-off
# --------------------------------
# Set to     0.0 to keep on (e.g. free parking eligibility enabled)
# Set to -9999.0 to turn off (e.g. no free parking)
Free_Parking_Eligibility_OnOff = -9999.0

# ---------------------------------------------
# HSR inter-regional travel -- flag to disable
# ---------------------------------------------
# Introduced in TM1 v0.6, trips to/from HSR stations are from HSR Business Plan (https://github.com/BayAreaMetro/modeling-website/wiki/TravelModelOneV06)
# Note HSR intraregional travel represented with network project
# Set to 0 to leave trips ON, set to 1 to DISABLE
HSR_Interregional_Disable = 0

# -------------------------------
# Mileage-Based User fees (MBUF) 
# -------------------------------
# This is a link-based implementation. Essentially, MBUF is being implemented as value tolls.
# If MBUF is greater than 0, each link will be given a value toll. The only exception is bridge toll booth links (which are identified by having a non-zero TOLLCLASS < firstvalue)
# MBUF is specified by users via the properties file. And then via RuntimeConfiguration.py, it gets passed to hwyParam.block and then settolls.job
#
# Note that this link-based implementation only works in scenario where there are no express lanes.
# Settolls.job will abort if the model inputs indicate that both MBUF and express lanes exist in a scenario. 
#
# The unit for MBUF is cents per mile (in year 2000 prices).
Mileage_Based_User_Fees = 4.4


# -----------------------------------------------------
# Differentiating bridge tolls from express lane tolls 
# -----------------------------------------------------
; Typically, express lane toll classes are numbered 31 or higher i.e. FIRSTVALUE = 31
; However, in some model applications, we want to include SR37 toll as a bridge toll rather than an express lane (e.g. in NGF Round 2 where express lane toll discount is not a strategy)
; in the case of NGR Round 2, we set FIRSTVALUE = 38 
FIRST_EL_TollClass = 38